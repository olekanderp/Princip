[{"id":"edffc925.6e1988","type":"tab","label":"scale 1"},{"id":"cd04ff99.5a648","type":"tab","label":"processing_scale1"},{"id":"c2227dc5.f093e","type":"tab","label":"Dashboard"},{"id":"3f389a60.fd0696","type":"tab","label":"Telegram informer"},{"id":"7d24c700.ff9778","type":"tab","label":"Radnom demo photoes"},{"id":"f078b964.d91168","type":"tab","label":"Snapshot video"},{"id":"2fe00946.488356","type":"tab","label":"Demo_S1"},{"id":"2f07d3e2.0f102c","type":"tab","label":"Demo_S2"},{"id":"7f6ea0f.1a6ab6","type":"tab","label":"Демо ваги 1 , Вага"},{"id":"e761e99f.3a2628","type":"tab","label":"Демо ваги  1 config"},{"id":"6871a0d3.6ca94","type":"tab","label":"Демо Ваги Poland"},{"id":"891702d3.77cb6","type":"tab","label":"Demo 4 Poland"},{"id":"54099c75.aa76a4","type":"tab","label":"Send Serial and IP"},{"id":"3cdb3dc4.4ec0b2","type":"tab","label":"Flow 1"},{"id":"92b4cbf5.3a0778","type":"subflow","name":"ETTN","info":"","in":[],"out":[]},{"id":"e98be28f.defb7","type":"subflow","name":"Subflow 1","info":"","in":[],"out":[]},{"id":"263b82ba.e2f13e","type":"subflow","name":"ETTN (2)","info":"","in":[],"out":[]},{"id":"782a1b6f.bc0ef4","type":"subflow","name":"Subflow 1 (2)","info":"","in":[],"out":[]},{"id":"83444fbb.28aea","type":"subflow","name":"Subflow 1 (3)","info":"","in":[],"out":[]},{"id":"13b955d2.9b3fca","type":"ui_tab","z":"","name":"Smart Scales","icon":"dashboard"},{"id":"1855b912.398047","type":"ui_base","name":"Scale dasboard","theme":"theme-dark"},{"id":"d89e05a7.0d3b18","type":"serial-port","z":"","serialport":"/dev/ttyACM1","serialbaud":"9600","databits":"8","parity":"none","stopbits":"1","newline":"\\n","bin":"false","out":"char","addchar":false},{"id":"ac10a2da.0aebd","type":"ui_group","z":"","name":"Scale and identity","tab":"13b955d2.9b3fca","order":5,"disp":true,"width":"6"},{"id":"e6719f26.1792c","type":"ui_group","z":"","name":"Additional properties","tab":"13b955d2.9b3fca","disp":true,"width":"6"},{"id":"6c186a4d.86cd04","type":"socket-io-server","z":"","port":"4001"},{"id":"90321c35.2726c","type":"socket-io-event","z":"","addr":"getWeight"},{"id":"5783c757.fc1a68","type":"websocket-listener","z":"","path":"/ws/duration","wholemsg":"false"},{"id":"8899089e.c8c758","type":"ui_tab","z":"","name":"LoRaWAN","icon":"dashboard"},{"id":"3c1fe7c6.ce6f58","type":"ui_group","z":"","name":"Group 1","tab":"8899089e.c8c758","disp":true,"width":"6"},{"id":"a4d7b7e.8d4f548","type":"ui_group","z":"","name":"Group 2","tab":"8899089e.c8c758","order":2,"disp":true,"width":"6"},{"id":"a4ea0525.cc1b58","type":"telegram bot","z":0,"botname":"Smart scales bot","usernames":"","chatids":"","baseapiurl":"","updatemode":"polling","pollinterval":"300","usesocks":false,"sockshost":"","socksport":"6667","socksusername":"anonymous","sockspassword":"","bothost":"","localbotport":"8443","publicbotport":"8443","privatekey":"","certificate":"","useselfsignedcertificate":false,"verboselogging":true},{"id":"4a93adc9.1e7624","type":"ui_tab","z":"","name":"Smart Scales","icon":"dashboard"},{"id":"96b89cf1.ebcdc","type":"ui_base","name":"Scale dasboard","theme":"theme-light"},{"id":"46fbc936.5a30a8","type":"socket-io-event","z":"","addr":"getWeight"},{"id":"be21ecdd.07806","type":"socket-io-server","z":"","port":"4001"},{"id":"12b489d5.caec66","type":"tls-config","z":"","name":"","cert":"","key":"","ca":"","verifyservercert":false},{"id":"fcb332a0.4f509","type":"ui_group","z":"","name":"Поточна вага","tab":"4a93adc9.1e7624","disp":true,"width":"6"},{"id":"27f96994.d55246","type":"ui_group","z":"","name":"Графік ваги","tab":"4a93adc9.1e7624","disp":true,"width":"6"},{"id":"f9b71846.00a698","type":"socket-io-event","z":"","addr":"getWeight"},{"id":"51918520.6da61c","type":"socket-io-server","z":"","port":"4001"},{"id":"7af11ba6.34b4d4","type":"tls-config","z":"","name":"","cert":"","key":"","ca":"","verifyservercert":false},{"id":"127d6473.29615c","type":"ui_group","z":"","name":"Поточна вага","tab":"f9cf26c8.9e17f8","disp":true,"width":"6"},{"id":"8ff9ffcf.5b6eb","type":"ui_group","z":"","name":"Графік ваги","tab":"f9cf26c8.9e17f8","disp":true,"width":"6"},{"id":"f9cf26c8.9e17f8","type":"ui_tab","z":"","name":"Smart Scales","icon":"dashboard"},{"id":"83c149ec.6b9648","type":"socket-io-event","z":"","addr":"getWeight"},{"id":"5c7d224d.8a636c","type":"socket-io-server","z":"","port":"4001"},{"id":"ce8a2022.9dbe7","type":"ui_group","z":"","name":"Поточна вага","tab":"a3af68cf.f73168","disp":true,"width":"6"},{"id":"d03ed285.c2f47","type":"ui_group","z":"","name":"Графік ваги","tab":"a3af68cf.f73168","disp":true,"width":"6"},{"id":"145ca816.bc4f08","type":"tls-config","z":"","name":"","cert":"","key":"","ca":"","verifyservercert":false},{"id":"a3af68cf.f73168","type":"ui_tab","z":"","name":"Smart Scales","icon":"dashboard"},{"id":"5d034524.4d3d6c","type":"MSSQL-CN","z":"","name":"mes-bmez-01","server":"10.0.15.145","encyption":true,"database":"WINCCSQL"},{"id":"b049067.db04bf8","type":"serial-port","z":"","serialport":"/dev/ttyUSB0","serialbaud":"1200","databits":"7","parity":"none","stopbits":"1","newline":"\\n","bin":"false","out":"char","addchar":false},{"id":"87cc99a4.0f0328","type":"tls-config","z":"","name":"","cert":"","key":"","ca":"","verifyservercert":false},{"id":"66d3dfd4.d04cc","type":"tls-config","z":"","name":"","cert":"","key":"","ca":"","verifyservercert":false},{"id":"84ed82cc.607ad","type":"inject","z":"edffc925.6e1988","name":"","topic":"","payload":"inputString","payloadType":"flow","repeat":"3","crontab":"","once":false,"x":120,"y":180,"wires":[["a947f323.3423c","dee4f079.d6d3c"]]},{"id":"dee4f079.d6d3c","type":"serial out","z":"edffc925.6e1988","name":"support","serial":"d89e05a7.0d3b18","x":348,"y":180,"wires":[]},{"id":"8ce449ae.4d4808","type":"serial in","z":"edffc925.6e1988","name":"","serial":"d89e05a7.0d3b18","x":110,"y":240,"wires":[["6ae6ae72.61965","d655b6dd.02b4b8"]]},{"id":"6ae6ae72.61965","type":"function","z":"edffc925.6e1988","name":"GET WEIGHT","func":"msg.payload = flow.get('parser')(msg.payload);\nmsg.weight1 = 0;\nmsg.weight2 = 0;\nreturn msg;","outputs":1,"noerr":0,"x":300,"y":240,"wires":[["b4c2eb1c.2b6148"]]},{"id":"cb78d85b.292058","type":"comment","z":"edffc925.6e1988","name":"Device level","info":"","x":90,"y":140,"wires":[]},{"id":"9c1d7a7b.6a9bd8","type":"inject","z":"edffc925.6e1988","name":"init","topic":"","payload":"init","payloadType":"str","repeat":"","crontab":"","once":true,"x":90,"y":80,"wires":[["f0450fb4.8e27a"]]},{"id":"b4889bc8.259c48","type":"comment","z":"edffc925.6e1988","name":"INITIALIZING","info":"","x":90,"y":20,"wires":[]},{"id":"76ecdebd.7b69e","type":"link in","z":"cd04ff99.5a648","name":"weight","links":["20edce7e.5b51e2","a952ade4.1021c","b4c2eb1c.2b6148"],"x":35,"y":540,"wires":[["19c893b8.3fa72c","110d5dea.4e5da2","7f6a5a1e.65da34","afd2407e.78e1c"]]},{"id":"19c893b8.3fa72c","type":"function","z":"cd04ff99.5a648","name":"main module","func":"var prevWeight = flow.get('prevWeight');\nvar transaction = flow.get('transaction');\nvar transactionData = flow.get('transactionData');\nvar transactionMaxWeight = flow.get('transactionMaxWeight');\nvar transactionHasMaxWeight = flow.get('transactionHasMaxWeight');\nvar transactionHasMinWeight = flow.get('transactionHasMinWeight');\nvar transactionHasMaxDuration = flow.get('transactionHasMaxDuration');\nvar waybill = flow.get('transactionWaybill');\nvar weight = msg.payload;\nvar stableSize = 5;\nvar duration = 0;\nvar maxWeight = flow.get('maxWeight');\nvar maxDuration = flow.get('maxDuration');\nvar prevTransaction = transaction;\nvar minWeight = flow.get('minWeight');\nvar minTriggerWeight = flow.get('minTriggerWeight');\nvar is_minus = false;\nvar transactionAccWeight = flow.get('transactionAccWeight');//облікова вага\nvar overLoadWeight = flow.get('overLoadWeight');\n\n//transaction\nif (prevWeight === null){\n    prevWeight = msg.payload;    \n}else{\n    if((prevWeight <= 0) && (weight > 0) && (weight > minTriggerWeight)){\n        //start of transaction\n        transaction = Date.now();\n        msg.on = true;\n        flow.set('transaction',transaction);\n    }else if((prevWeight > 0) && (weight <=0) && (transaction)){\n        //transaction = 0;\n        msg.on = false;\n        transactionData = [];\n        flow.set('transaction',0);\n        flow.set('transactionMaxWeight',null);\n        flow.set('transactionHasMaxWeight',null);\n        flow.set('transactionHasMinWeight',null);\n        flow.set('transactionHasMaxDuration',null);\n        flow.set('transactionHasOverLoad',null);//облікова вага\n        flow.set('transactionWaybill',null);\n        flow.set('transactionMetadata',null);\n        flow.set('transactionAccWeight', null);//облікова вага\n    }else if((transaction === null) && (weight>0) && (weight > minTriggerWeight)){\n        transaction = Date.now();\n        flow.set('transaction',transaction);\n    }\n    if((prevWeight < 0) && ((weight-prevWeight) > minTriggerWeight)){\n        //start of transaction\n        is_minus = true;\n        msg.prevWeight = prevWeight;\n    }\n}\n\nif (transaction > 0){\n    transactionData.push(weight);    \n\n    //stable\n    if(transactionData.length > stableSize+1){\n        var stabletmp = true;\n        for (var i = transactionData.length-1; i > transactionData.length-1-stableSize; i--){\n            if (transactionData[i] !== transactionData[i-1]){\n                stabletmp = false;\n                msg.stable = stabletmp;\n                break;\n            }\n            msg.stable = stabletmp;\n        }\n    }else{\n        msg.stable = false;\n    }\n\n    //duration & transactionMaxWeight\n    duration = (Number(Date.now()) - Number(transaction));\n    if( (weight>transactionMaxWeight) || (transactionMaxWeight === null)){\n        transactionMaxWeight = weight;\n        flow.set(\"transactionMaxWeight\",transactionMaxWeight);\n    }\n    \n    if(!transactionHasMaxWeight && weight > maxWeight){\n        msg.transactionHasMaxWeight = true;\n        flow.set('transactionHasMaxWeight',true);\n    }\n    \n    if(!transactionHasMinWeight && weight < minWeight){\n        msg.transactionHasMinWeight = true;\n        flow.set('transactionHasMinWeight',true);\n    }\n    \n    //max duartion\n    if(!transactionHasMaxDuration && duration > maxDuration){\n        msg.transactionHasMaxDuration = true;\n        flow.set('transactionHasMaxDuration',true);\n    }\n}\n\n//result\nmsg.metadata = {\n    'weight':weight,\n    'prevWeight':prevWeight,\n    'prevTransaction':prevTransaction,\n    'transaction':transaction,\n    'on':msg.on,\n    'transactionDataCount':transactionData.length,\n    'stable':msg.stable,\n    'duration':Math.round(duration/1000),\n    'transactionMaxWeight':transactionMaxWeight,\n    'transactionAccWeight':transactionAccWeight,\n    'waybill':waybill,\n    'perimetr':true,\n    'weight1':msg.weight1,\n    'weight2':msg.weight2,\n    'weight_center':msg.weight_center,\n    'driverInCar':false\n}\nflow.set('transactionData',transactionData);\nflow.set('prevWeight',weight);\nflow.set('transactionMetadata',msg.metadata);\nflow.set('lasttimedata', new Date());\nmsg.is_minus = is_minus;\n\nif(transactionAccWeight){\n   flow.set('transactionHasOverLoad',true);\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":170,"y":540,"wires":[["e8b3cea8.a26de","c14acbff.2400f8","945f0b5c.12d788","73dfbfe8.42863","2841c780.146968","5c52711c.11911","a52301e0.247f6"]]},{"id":"a53e9394.90938","type":"function","z":"cd04ff99.5a648","name":"get weight from accounting system","func":"var transactionMetadata = flow.get('transactionMetadata');\nvar transactionMaxWeight = flow.get('transactionMaxWeight');\nvar driverWeight = flow.get('driverWeight');\nvar buisness_data = msg.req.query;\n\nmsg.metadata = Object.assign(transactionMetadata,buisness_data);\n\n//check driver in a car\nvar driver_in = false;\nmsg.driverWeight = driverWeight;\nif((transactionMaxWeight - msg.metadata.weight) < driverWeight){\n    driver_in = true;\n}\n\nmsg.event_id = flow.get('event_get_weight_acc');\ntransactionWaybill = flow.get('transactionWaybill');\nif (!transactionWaybill){\n    flow.set('transactionWaybill',msg.req.query.reader);\n}\nmsg.description = ' '+buisness_data.operation_name+'. '+buisness_data.operation_type+'. Зареєстрували в облікову систему. Поточна вага: ' + msg.metadata.weight+\" Номер авто: \"+buisness_data.truck1+\" \"+buisness_data.truck2+\" \"+buisness_data.item_name;\nmsg.transactionMetadata = transactionMetadata;\nmsg.driver_in = driver_in;\n\nflow.set('transactionAccWeight',  msg.metadata.weight);//облікова вага\n\nreturn msg;","outputs":1,"noerr":0,"x":480,"y":880,"wires":[["58f2d037.aff6b","6531c873.862378"]]},{"id":"e8b3cea8.a26de","type":"switch","z":"cd04ff99.5a648","name":"switch move","property":"on","propertyType":"msg","rules":[{"t":"true"},{"t":"false"}],"checkall":"true","outputs":2,"x":390,"y":520,"wires":[["66caa12c.93bc1"],["c9c98354.a0676","c89290da.f2573","5502b98f.401748"]]},{"id":"abc54bcc.e49ac8","type":"http request","z":"cd04ff99.5a648","name":"EVENTS","method":"POST","ret":"txt","url":"","tls":"","x":1220,"y":600,"wires":[["8d633037.850a","daeca6d1.5cce78"]]},{"id":"58f2d037.aff6b","type":"function","z":"cd04ff99.5a648","name":"events payload","func":"var event_id = msg.event_id;\nvar scale_id = global.get('scale_id');\nvar snapshot_events = flow.get('snapshot_events');\nvar snapshot = false;\n\nif (snapshot_events.indexOf(event_id)>=0){\n    snapshot = true;\n}\n\nmsg.payload = {\n    'event':{\n        'id':msg.event_id\n    },\n    'devices':[{'id':scale_id}],\n    'data':msg.metadata,\n    'description':msg.description\n}\n\nmsg.headers = {\n    \"content-type\":\"application/json\"\n}\n\nmsg.url = flow.get('main_host')+flow.get('event_url');\nmsg.main_host = flow.get('main_host');\nmsg.event_url = flow.get('event_url');\nmsg.snapshot = snapshot;\nreturn msg;","outputs":1,"noerr":0,"x":973.3333320617676,"y":583.3333206176758,"wires":[["88e8c771.1ba338","24980419.c1addc","13548510.f4879b"]]},{"id":"66caa12c.93bc1","type":"function","z":"cd04ff99.5a648","name":"move in","func":"msg.event_id = flow.get('event_move_in_id');\nmsg.description = 'Заїзд на ваги. Поточна вага: ' + msg.metadata.weight;\n\nreturn msg;","outputs":1,"noerr":0,"x":580,"y":480,"wires":[["58f2d037.aff6b"]]},{"id":"c14acbff.2400f8","type":"switch","z":"cd04ff99.5a648","name":"switch max weight","property":"transactionHasMaxWeight","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":390,"y":560,"wires":[["7de58fb5.4d879"]]},{"id":"7de58fb5.4d879","type":"function","z":"cd04ff99.5a648","name":"transactionHasMaxWeight","func":"msg.event_id = flow.get('event_max_weight_id');\nmsg.description = 'Перевищена максимально-допустима вага, кг: ' + msg.metadata.weight;\n\n\nreturn msg;","outputs":1,"noerr":0,"x":630,"y":560,"wires":[["58f2d037.aff6b"]]},{"id":"a6c23835.338228","type":"inject","z":"cd04ff99.5a648","name":"","topic":"","payload":"","payloadType":"date","repeat":"1","crontab":"","once":false,"x":110,"y":780,"wires":[["5f160709.04a458"]]},{"id":"5f160709.04a458","type":"function","z":"cd04ff99.5a648","name":"check scale health","func":"var lastcheckHealth = flow.get('checkHealth');\nvar checkHealth = null;\nvar lasttimedata = flow.get('lasttimedata');\n\nvar currenttimedata = new Date();\n\nif ((currenttimedata - lasttimedata) > 3000){\n    checkHealth = false;\n} else {\n    checkHealth = true;\n}\n\nflow.set(\"checkHealth\",checkHealth);\n\nif (lastcheckHealth != checkHealth){\n    msg.checkHealth = checkHealth;\n}else{\n    msg.checkHealth = null;\n}\nmsg.payload = checkHealth;\n\nreturn msg;","outputs":1,"noerr":0,"x":290,"y":780,"wires":[["c058cc73.58c69"]]},{"id":"c058cc73.58c69","type":"switch","z":"cd04ff99.5a648","name":"","property":"checkHealth","propertyType":"msg","rules":[{"t":"true"},{"t":"false"}],"checkall":"true","outputs":2,"x":470,"y":740,"wires":[["82e4f752.f84f38"],["eb81b4e9.b2de48"]]},{"id":"eb81b4e9.b2de48","type":"function","z":"cd04ff99.5a648","name":"off","func":"msg.event_id = flow.get('event_off_id');\nmsg.description = 'Прилад відключено';\nmsg.metadata = {\n    'state':msg.checkHealth\n}\nreturn msg;","outputs":1,"noerr":0,"x":610,"y":720,"wires":[["58f2d037.aff6b"]]},{"id":"82e4f752.f84f38","type":"function","z":"cd04ff99.5a648","name":"on","func":"msg.event_id = flow.get('event_on_id');\nmsg.description = 'Прилад підключено';\nmsg.metadata = {\n    'state':msg.checkHealth\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":610,"y":680,"wires":[["58f2d037.aff6b"]]},{"id":"b9c389a1.943988","type":"function","z":"cd04ff99.5a648","name":"main config","func":"flow.set('prevWeight',null);\nflow.set('transaction',null);\nflow.set('transactionData',[]);\nflow.set('transactionMaxWeight',null);\nflow.set('transactionHasMinWeight',null);\nflow.set('transactionHasMaxWeight',null);\nflow.set('transactionHasMaxDuration',null);\nflow.set('lasttimedata', new Date());\nflow.set('checkHealth',null);\nflow.set('transactionWaybill',null);\nflow.set('transactionDriverIn',null);\nflow.set('transactionAccWeight', null);\nflow.set('transactionHasOverLoad', null);\nreturn msg;\n","outputs":1,"noerr":0,"x":370,"y":240,"wires":[[]]},{"id":"93b9a551.a9d288","type":"inject","z":"cd04ff99.5a648","name":"","topic":"","payload":"","payloadType":"str","repeat":"","crontab":"","once":true,"x":90,"y":220,"wires":[["e06e102d.d7985","b9c389a1.943988"]]},{"id":"f0450fb4.8e27a","type":"function","z":"edffc925.6e1988","name":"Scale PARSER","func":"flow.set('inputString',\"CMD\");\nflow.set('parser',function(v){\n       v = v;\n       return Number(v);\n    }\n  );\nglobal.set('scale_id','80096CB0EFD83B63E0533300000A4334');\nglobal.set('ip','81.30.161.168');\nglobal.set('video_camera_url','http://test:Test2003@192.168.0.150/ISAPI/Streaming/channels/101/picture?snapShotImageType=JPEG');\nreturn msg;","outputs":1,"noerr":0,"x":280,"y":80,"wires":[[]]},{"id":"c9c98354.a0676","type":"function","z":"cd04ff99.5a648","name":"move out","func":"msg.event_id = flow.get('event_move_out_id');\nmsg.description = 'Зїзд з ваг. Поточна вага: ' + msg.metadata.weight;\n\nreturn msg;","outputs":1,"noerr":0,"x":580,"y":520,"wires":[["58f2d037.aff6b"]]},{"id":"945f0b5c.12d788","type":"switch","z":"cd04ff99.5a648","name":"max duration","property":"transactionHasMaxDuration","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":370,"y":600,"wires":[["37a0bcd5.3493a4"]]},{"id":"37a0bcd5.3493a4","type":"function","z":"cd04ff99.5a648","name":"transaction has max duration","func":"msg.event_id = flow.get('event_max_duration');\nmsg.description = 'Перевищено максимальний час находження на вагах, сек: ' + msg.metadata.duration;\n\nreturn msg;","outputs":1,"noerr":0,"x":640,"y":600,"wires":[["58f2d037.aff6b"]]},{"id":"57652fe9.de2df","type":"http in","z":"cd04ff99.5a648","name":"","url":"/firmware_1","method":"post","swaggerDoc":"","x":140,"y":160,"wires":[["a1d74782.83f248"]]},{"id":"a1d74782.83f248","type":"file","z":"cd04ff99.5a648","name":"deivce_config","filename":"deivce_config.json","appendNewline":true,"createDir":false,"overwriteFile":"true","x":380,"y":160,"wires":[]},{"id":"e06e102d.d7985","type":"file in","z":"cd04ff99.5a648","name":"deivce_config","filename":"deivce_config.json","format":"utf8","x":380,"y":200,"wires":[["4e2d6b43.194a44"]]},{"id":"7e91807e.d35ce","type":"http in","z":"cd04ff99.5a648","name":"","url":"/serial_1","method":"get","swaggerDoc":"","x":130,"y":40,"wires":[["75d5d7d6.de3be8"]]},{"id":"75d5d7d6.de3be8","type":"exec","z":"cd04ff99.5a648","command":"cat /proc/cpuinfo","addpay":true,"append":"| grep Serial","useSpawn":"","timer":"5","name":"","x":350,"y":40,"wires":[["7ef0d2eb.ea111c","715ffef5.849c8"],[],[]]},{"id":"7ef0d2eb.ea111c","type":"http response","z":"cd04ff99.5a648","name":"","x":550,"y":20,"wires":[]},{"id":"715ffef5.849c8","type":"function","z":"cd04ff99.5a648","name":"","func":"msg.payload = msg.payload.split(':')[1].replace('\\n','').replace(' ','');\nreturn msg;","outputs":1,"noerr":0,"x":540,"y":100,"wires":[["dd701fa5.e0f8c"]]},{"id":"dd701fa5.e0f8c","type":"debug","z":"cd04ff99.5a648","name":"","active":false,"console":"false","complete":"false","x":680,"y":100,"wires":[]},{"id":"cd9d22c3.978e4","type":"inject","z":"cd04ff99.5a648","name":"DEMO","topic":"","payload":"","payloadType":"str","repeat":"","crontab":"","once":true,"x":90,"y":100,"wires":[["283fb872.7cdae8"]]},{"id":"283fb872.7cdae8","type":"function","z":"cd04ff99.5a648","name":"DEMO Data","func":"var device_config = {\n    'event_move_in_id':'80096D9ABE7F68F3E0533300000A6C0D',\n    'event_move_out_id':'80096D9ABE8068F3E0533300000A6C0D',\n    'event_max_weight_id':'85A255F950F9BEF4E0533300000AC45D',\n    'event_off_id':'85A2CC4570292DD1E0533300000A0C94',\n    'event_max_duration':'8642EE858DE89BAAE0533300000AFCC7',\n    'event_fake_traffic':'80096EF60C186574E0533300000ADBA5',\n    'event_get_weight_acc':'800970AC1FDC683CE0533300000AF1B0',\n    'event_min_weight':'875C3EB5C9DD092DE055000000000001',\n    'event_driver_in':'8E68D8D8B2977181E055000000000001',\n    'event_over_load':'B3EB5F800EFD2620E0530101007F8A05',\n    'snapshot_events':['80096D9ABE7F68F3E0533300000A6C0D','85A255F950F9BEF4E0533300000AC45D','8642EE858DE89BAAE0533300000AFCC7','800970AC1FDC683CE0533300000AF1B0', \"8E68D8D8B2977181E055000000000001\",\"B3EB5F800EFD2620E0530101007F8A05\"],\n    'main_host':'http://104.248.255.131/ords/ettn',\n    'event_url':'/iot_cli/events/log_v2',\n    'state_url':'/iot_cli/device',\n    'snapshot_url':'/iot_cli/events/snapshot',\n    'maxWeight':60000,\n    'maxDuration':100000,\n    'minWeight':0,\n    'checkHealthTimeout':3000,\n    'minTriggerWeight':200,\n    'driverWeight':40\n}\nmsg.payload = device_config;\n// flow.set('scale_id','80096CB0EFD83B63E0533300000A4334');\n// flow.set('event_move_in_id','80096D9ABE7F68F3E0533300000A6C0D');\n// flow.set('event_move_out_id','80096D9ABE8068F3E0533300000A6C0D');\n// flow.set('event_max_weight_id','85A255F950F9BEF4E0533300000AC45D');\n// flow.set('event_off_id','85A2CC4570292DD1E0533300000A0C94');\n// flow.set('event_on_id', '85A2CC45702A2DD1E0533300000A0C94');\n// flow.set('event_max_duration','8642EE858DE89BAAE0533300000AFCC7');\n// flow.set('main_host','http://prod.apex.rest/ords/ettn');\n// flow.set('event_url','/iot_cli/events/log');\n// flow.set('state_url','/v1/device');\n// flow.set('maxWeight',40000);\n// flow.set('maxDuration',20000);\n// flow.set('checkHealthTimeout',3000);\nreturn msg;","outputs":1,"noerr":0,"x":230,"y":100,"wires":[["a1d74782.83f248"]]},{"id":"110d5dea.4e5da2","type":"debug","z":"cd04ff99.5a648","name":"TEST Weight ","active":false,"console":"false","complete":"payload","x":190,"y":460,"wires":[]},{"id":"b4c2eb1c.2b6148","type":"link out","z":"edffc925.6e1988","name":"","links":["76ecdebd.7b69e","13fa0fce.4d239","9b19ea4.53fd718","55a0d53d.f4fb6c"],"x":415,"y":240,"wires":[]},{"id":"c89290da.f2573","type":"switch","z":"cd04ff99.5a648","name":"waybill","property":"metadata.waybill","propertyType":"msg","rules":[{"t":"null"}],"checkall":"true","outputs":1,"x":575.0000228881836,"y":439.5833330154419,"wires":[["89b447ec.3e5018"]]},{"id":"89b447ec.3e5018","type":"function","z":"cd04ff99.5a648","name":"empty waybill","func":"msg.event_id = flow.get('event_fake_traffic');\nmsg.description = 'Холостий проїзд по вагам. Тривалість проїзду ' + Math.round(msg.metadata.duration/60)+ 'хв.';\n\nreturn msg;","outputs":1,"noerr":0,"x":745.4166793823242,"y":441.6666564941406,"wires":[["58f2d037.aff6b","9a0629b6.a7b638"]]},{"id":"9a0629b6.a7b638","type":"debug","z":"cd04ff99.5a648","name":"","active":false,"console":"false","complete":"payload","x":958.7500152587891,"y":392.50000381469727,"wires":[]},{"id":"1def561d.9c741a","type":"http in","z":"cd04ff99.5a648","name":"","url":"/getWeight","method":"get","swaggerDoc":"","x":160,"y":940,"wires":[["a53e9394.90938","a2e461.ece7aba","4fac5e67.67719"]]},{"id":"2d3b6f56.776aa","type":"http response","z":"cd04ff99.5a648","name":"","x":550,"y":920,"wires":[]},{"id":"a2e461.ece7aba","type":"function","z":"cd04ff99.5a648","name":"response","func":"msg.payload = flow.get('transactionMetadata');\nmsg.payload.driverInCar = false;\ntransactionWaybill = flow.get('transactionWaybill');\nmsg.payload.transactionWaybill = transactionWaybill;\nif(transactionWaybill && transactionWaybill !== msg.req.query.waybill){\n    msg.payload.status = false;    \n}else {\n    msg.payload.status = true;    \n}\n\nreturn msg;","outputs":1,"noerr":0,"x":400,"y":920,"wires":[["2d3b6f56.776aa"]]},{"id":"80a6295a.fec318","type":"link in","z":"c2227dc5.f093e","name":"dashboard","links":["73dfbfe8.42863"],"x":80,"y":100,"wires":[["148659d0.eae746","1d923af6.7a4ca5","80a2eba.47cae18","1b12aeb5.33d571","857be32d.41597","1f81c304.b2014d"]]},{"id":"73dfbfe8.42863","type":"link out","z":"cd04ff99.5a648","name":"processing","links":["80a6295a.fec318","fbf4c2b.417b44"],"x":329.9999942779541,"y":441.6666679382324,"wires":[]},{"id":"148659d0.eae746","type":"ui_gauge","z":"c2227dc5.f093e","name":"","group":"ac10a2da.0aebd","order":0,"width":0,"height":0,"gtype":"gage","title":"Weight","label":"kg","format":"{{value}} kg","min":0,"max":"60000","colors":["#00b500","#e6e600","#ca3838"],"x":210,"y":20,"wires":[]},{"id":"1d923af6.7a4ca5","type":"ui_chart","z":"c2227dc5.f093e","name":"","group":"ac10a2da.0aebd","order":0,"width":0,"height":0,"label":"History","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","ymin":"0","ymax":"60000","removeOlder":"10","removeOlderPoints":"","removeOlderUnit":"60","cutout":0,"x":210,"y":60,"wires":[[],[]]},{"id":"493fd481.0e268c","type":"ui_gauge","z":"c2227dc5.f093e","name":"","group":"e6719f26.1792c","order":0,"width":0,"height":0,"gtype":"wave","title":"Time on scale","label":"units","format":"{{value}} seconds","min":0,"max":"30000","colors":["#00b500","#e6e600","#ca3838"],"x":350,"y":100,"wires":[]},{"id":"80a2eba.47cae18","type":"ui_text","z":"c2227dc5.f093e","group":"e6719f26.1792c","order":0,"width":0,"height":0,"name":"","label":"Stable","format":"{{msg.metadata.stable}}","layout":"row-spread","x":210,"y":140,"wires":[]},{"id":"1b12aeb5.33d571","type":"ui_text","z":"c2227dc5.f093e","group":"e6719f26.1792c","order":0,"width":0,"height":0,"name":"","label":"on / off truck on scale","format":"{{msg.metadata.on}}","layout":"row-spread","x":260,"y":180,"wires":[]},{"id":"857be32d.41597","type":"ui_text","z":"c2227dc5.f093e","group":"e6719f26.1792c","order":0,"width":0,"height":0,"name":"","label":"Max weight","format":"{{msg.metadata.transactionMaxWeight}}","layout":"row-spread","x":230,"y":220,"wires":[]},{"id":"1f81c304.b2014d","type":"function","z":"c2227dc5.f093e","name":"duration","func":"msg.payload = msg.metadata.duration;\nreturn msg;","outputs":1,"noerr":0,"x":220,"y":100,"wires":[["493fd481.0e268c"]]},{"id":"2af6eb60.ee1574","type":"telegram receiver","z":"3f389a60.fd0696","name":"","bot":"a4ea0525.cc1b58","saveDataDir":"","x":100,"y":220,"wires":[["6a245cbf.3cb874","aa585db3.3491b"],[]]},{"id":"6a245cbf.3cb874","type":"function","z":"3f389a60.fd0696","name":"get text","func":"msg.text = msg.payload.content;\nmsg.chatId = msg.payload.chatId;\n\nreturn msg;","outputs":1,"noerr":0,"x":318,"y":212,"wires":[["4d7894e7.237adc","ae86dd47.6a799"]]},{"id":"deed5f3c.a0a3c","type":"telegram sender","z":"3f389a60.fd0696","name":"","bot":"a4ea0525.cc1b58","x":740,"y":200,"wires":[["1134be97.61af51"]]},{"id":"e893a0b8.cd5f3","type":"link in","z":"3f389a60.fd0696","name":"telegram","links":["88e8c771.1ba338"],"x":15,"y":440,"wires":[[]]},{"id":"b29e410a.0eacd","type":"function","z":"3f389a60.fd0696","name":"create payload","func":"var access_table = flow.get('access_table');\nmsg.payload = {\n    \"content\":msg.payload.description,\n    \"type\":\"message\",\n    \"chatId\":access_table.chatId\n}\nmsg.sendmsg = access_table.subscribe;\nreturn msg;","outputs":1,"noerr":0,"x":140,"y":440,"wires":[["b0f60f1.cd77ef"]]},{"id":"1134be97.61af51","type":"debug","z":"3f389a60.fd0696","name":"","active":false,"console":"false","complete":"false","x":950,"y":200,"wires":[]},{"id":"88e8c771.1ba338","type":"link out","z":"cd04ff99.5a648","name":"processing event","links":["e893a0b8.cd5f3"],"x":1120,"y":500,"wires":[]},{"id":"4d7894e7.237adc","type":"switch","z":"3f389a60.fd0696","name":"","property":"text","propertyType":"msg","rules":[{"t":"eq","v":"/start","vt":"str"},{"t":"eq","v":"Unsubscribe","vt":"str"},{"t":"eq","v":"Subscribe","vt":"str"}],"checkall":"true","outputs":3,"x":410,"y":320,"wires":[["4072cf0c.8589b"],["e5105224.a54a3","67507430.a373ac"],["d50d740f.055558"]]},{"id":"4072cf0c.8589b","type":"function","z":"3f389a60.fd0696","name":"send auth","func":"context.global.keyboard = { pending : true };\n\nmsg.payload = {\n    \"content\":'Select the action',\n    \"options\":{\n        \"reply_markup\":JSON.stringify({\n            \"keyboard\":[\n            [{\n                \"text\":'Authorization',\n                \"request_contact\":true\n                }]\n            ],\n        \"resize_keyboard\":true,\n        \"one_time_keyboard\":true\n        })\n    },\n    \"type\":\"message\",\n    \"chatId\":msg.chatId\n}\n    \nreturn msg;","outputs":1,"noerr":0,"x":560,"y":200,"wires":[["deed5f3c.a0a3c"]]},{"id":"ae86dd47.6a799","type":"switch","z":"3f389a60.fd0696","name":"","property":"payload.type","propertyType":"msg","rules":[{"t":"eq","v":"contact","vt":"str"}],"checkall":"true","outputs":1,"x":410,"y":260,"wires":[["d6d220ed.5a67c"]]},{"id":"213e07a0.7386f8","type":"inject","z":"3f389a60.fd0696","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":80,"y":40,"wires":[["de9eac81.5c91f"]]},{"id":"bf3d7c61.4c855","type":"file","z":"3f389a60.fd0696","name":"","filename":"telegram_auth","appendNewline":true,"createDir":false,"overwriteFile":"true","x":540,"y":40,"wires":[]},{"id":"de9eac81.5c91f","type":"function","z":"3f389a60.fd0696","name":"set phone_numbers for auth","func":"msg.payload = ['+380971688870'];\nreturn msg;","outputs":1,"noerr":0,"x":300,"y":40,"wires":[["bf3d7c61.4c855"]]},{"id":"f8538d33.e886d","type":"inject","z":"3f389a60.fd0696","name":"","topic":"","payload":"","payloadType":"str","repeat":"","crontab":"","once":true,"x":70,"y":80,"wires":[["782cccbe.4bcfd4","a557a218.ed308"]]},{"id":"782cccbe.4bcfd4","type":"file in","z":"3f389a60.fd0696","name":"","filename":"telegram_auth","format":"utf8","x":260,"y":80,"wires":[["d86620b0.59dc1"]]},{"id":"d86620b0.59dc1","type":"function","z":"3f389a60.fd0696","name":"parse to JSON","func":"var auth = JSON.parse(msg.payload);\nflow.set('auth',auth);\nmsg.payload = auth;\nreturn msg;","outputs":1,"noerr":0,"x":440,"y":80,"wires":[["f8b46c7c.a4b45"]]},{"id":"d6d220ed.5a67c","type":"function","z":"3f389a60.fd0696","name":"check auth","func":"var auth = flow.get('auth');\nvar phone_number = msg.payload.content.phone_number;\nvar auth_ok = false;\nfor (var i = 0; i < auth.length; i++){\n    if (auth[i] === phone_number){\n        auth_ok = true;\n        break;\n    }\n}\nmsg.auth_ok = auth_ok;\nmsg.phone_number = phone_number;\nmsg.chatId = msg.payload.chatId;\nreturn msg;","outputs":1,"noerr":0,"x":570,"y":260,"wires":[["39beb26e.dbabfe"]]},{"id":"39beb26e.dbabfe","type":"switch","z":"3f389a60.fd0696","name":"","property":"auth_ok","propertyType":"msg","rules":[{"t":"true"},{"t":"false"}],"checkall":"true","outputs":2,"x":730,"y":260,"wires":[["e4ae5417.a0b3f8"],["dfe6b406.0c92d8"]]},{"id":"e4ae5417.a0b3f8","type":"function","z":"3f389a60.fd0696","name":"send auth ok","func":"context.global.keyboard = { pending : true };\nmsg.payload = {\n    \"content\":'Your successful subscribe on events',\n    \"options\":{\n        \"reply_markup\":JSON.stringify({\n            \"keyboard\":[\n            [{\n                \"text\":'Unsubscribe'\n                }]\n            ],\n        \"resize_keyboard\":true,\n        \"one_time_keyboard\":true\n        })\n    },\n    \"type\":\"message\",\n    \"chatId\":msg.chatId\n}\nmsg.subscribe = true;\nreturn msg;","outputs":1,"noerr":0,"x":950,"y":260,"wires":[["deed5f3c.a0a3c","7c4fa20.bb1436"]]},{"id":"dfe6b406.0c92d8","type":"function","z":"3f389a60.fd0696","name":"send auth false","func":"context.global.keyboard = { pending : true };\nmsg.payload = {\n    \"content\":'Access denied. Please try more or contact the administrator',\n    \"options\":{\n        \"reply_markup\":JSON.stringify({\n            \"keyboard\":[\n            [{\n                \"text\":'Authorization',\n                \"request_contact\":true\n                }]\n            ],\n        \"resize_keyboard\":true,\n        \"one_time_keyboard\":true\n        })\n    },\n    \"type\":\"message\",\n    \"chatId\":msg.chatId\n}\n    \nreturn msg;","outputs":1,"noerr":0,"x":960,"y":320,"wires":[["deed5f3c.a0a3c"]]},{"id":"76f8069b.eafe28","type":"file","z":"3f389a60.fd0696","name":"","filename":"access_table","appendNewline":true,"createDir":false,"overwriteFile":"true","x":1110,"y":400,"wires":[]},{"id":"a557a218.ed308","type":"file in","z":"3f389a60.fd0696","name":"","filename":"access_table","format":"utf8","x":250,"y":120,"wires":[["63ad1960.a1fb18"]]},{"id":"63ad1960.a1fb18","type":"function","z":"3f389a60.fd0696","name":"parse to JSON","func":"flow.set('access_table',JSON.parse(msg.payload));\nreturn msg;","outputs":1,"noerr":0,"x":440,"y":120,"wires":[["f091fed7.20faf"]]},{"id":"f8b46c7c.a4b45","type":"debug","z":"3f389a60.fd0696","name":"","active":false,"console":"false","complete":"false","x":610,"y":80,"wires":[]},{"id":"f091fed7.20faf","type":"debug","z":"3f389a60.fd0696","name":"","active":false,"console":"false","complete":"false","x":610,"y":120,"wires":[]},{"id":"7c4fa20.bb1436","type":"function","z":"3f389a60.fd0696","name":"","func":"msg.payload = JSON.stringify({\n        'chatId':msg.payload.chatId,\n        'subscribe':msg.subscribe\n    }); \nreturn msg;","outputs":1,"noerr":0,"x":910,"y":380,"wires":[["76f8069b.eafe28","967348e9.b8afb8","783871cb.0ff66"]]},{"id":"e5105224.a54a3","type":"function","z":"3f389a60.fd0696","name":"","func":"msg.subscribe = false;\nreturn msg;","outputs":1,"noerr":0,"x":590,"y":380,"wires":[["7c4fa20.bb1436"]]},{"id":"967348e9.b8afb8","type":"delay","z":"3f389a60.fd0696","name":"","pauseType":"delay","timeout":"1","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":1100,"y":360,"wires":[["a557a218.ed308"]]},{"id":"b0f60f1.cd77ef","type":"switch","z":"3f389a60.fd0696","name":"","property":"sendmsg","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":370,"y":440,"wires":[["deed5f3c.a0a3c"]]},{"id":"783871cb.0ff66","type":"debug","z":"3f389a60.fd0696","name":"","active":true,"console":"false","complete":"false","x":1110,"y":440,"wires":[]},{"id":"aa585db3.3491b","type":"debug","z":"3f389a60.fd0696","name":"","active":false,"console":"false","complete":"false","x":190,"y":380,"wires":[]},{"id":"d50d740f.055558","type":"function","z":"3f389a60.fd0696","name":"check auth for subscribe","func":"var access_table = flow.get('access_table');\nif (msg.payload.chatId === access_table.chatId){\n    msg.auth_ok = true;    \n}else{\n    msg.auth_ok = false;\n}\nreturn msg;","outputs":1,"noerr":0,"x":610,"y":480,"wires":[["e4ae5417.a0b3f8"]]},{"id":"67507430.a373ac","type":"function","z":"3f389a60.fd0696","name":"send subscribe","func":"context.global.keyboard = { pending : true };\nmsg.payload = {\n    \"content\":'You do not subscribe on any events. Please press Subscribe',\n    \"options\":{\n        \"reply_markup\":JSON.stringify({\n            \"keyboard\":[\n            [{\n                \"text\":'Subscribe'\n                }]\n            ],\n        \"resize_keyboard\":true,\n        \"one_time_keyboard\":true\n        })\n    },\n    \"type\":\"message\",\n    \"chatId\":msg.chatId\n}\nmsg.subscribe = true;\nreturn msg;","outputs":1,"noerr":0,"x":620,"y":340,"wires":[["deed5f3c.a0a3c"]]},{"id":"ff71069a.594e18","type":"file in","z":"7d24c700.ff9778","name":"full","filename":"","format":"","x":555,"y":180,"wires":[["604ff1b1.6fe79"]]},{"id":"d1384292.61bfe","type":"file in","z":"7d24c700.ff9778","name":"empty","filename":"","format":"","x":569.444393157959,"y":234.44437420368195,"wires":[["4c47b0c2.dc165"]]},{"id":"58fe7eee.155d6","type":"inject","z":"7d24c700.ff9778","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":290.55554580688477,"y":173.3332406282425,"wires":[["98b00423.544948"]]},{"id":"98b00423.544948","type":"function","z":"7d24c700.ff9778","name":"","func":"var max = 1;\nvar min = 101;\n\nvar img = (Math.random() * (max - min) + min).toFixed();\n\nmsg.payload = \"/distr/data/full/\" + img + \".jpg\";\nmsg.filename = msg.payload;\nreturn msg;\n\n","outputs":1,"noerr":0,"x":428.3333168029785,"y":173.3332176208496,"wires":[["ff71069a.594e18"]]},{"id":"9fe1b8bf.bf6328","type":"inject","z":"7d24c700.ff9778","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":282.77774810791016,"y":228.88879597187042,"wires":[["3bc29279.ea983e"]]},{"id":"3bc29279.ea983e","type":"function","z":"7d24c700.ff9778","name":"","func":"var max = 1;\nvar min = 101;\n\nvar img = (Math.random() * (max - min) + min).toFixed();\n\nmsg.payload = \"/distr/data/empty/\" + img + \".jpg\";\nmsg.filename = msg.payload;\nreturn msg;\n\n","outputs":1,"noerr":0,"x":432.7777519226074,"y":231.11100018024445,"wires":[["d1384292.61bfe"]]},{"id":"44b653c1.e59fdc","type":"file in","z":"7d24c700.ff9778","name":"noCar","filename":"","format":"","x":562.2222099304199,"y":343.33323872089386,"wires":[["49ed8ccc.81c9c4"]]},{"id":"18cdf6d0.5943b9","type":"inject","z":"7d24c700.ff9778","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":275.5555648803711,"y":337.77766048908234,"wires":[["fd965b43.de0a88"]]},{"id":"fd965b43.de0a88","type":"function","z":"7d24c700.ff9778","name":"","func":"var max = 1;\nvar min = 101;\n\nvar img = (Math.random() * (max - min) + min).toFixed();\n\nmsg.payload = \"/distr/data/noCar/\" + img + \".jpg\";\nmsg.filename = msg.payload;\nreturn msg;\n\n","outputs":1,"noerr":0,"x":425.55556869506836,"y":339.99986469745636,"wires":[["44b653c1.e59fdc"]]},{"id":"4f2e4b55.9bfa44","type":"exec","z":"7d24c700.ff9778","command":"curl -X POST \"http://192.168.0.50:5000/predict\" -H \"accept: */*\" -H \"Content-Type: multipart/form-data\" -F \"image=@/distr/data/noCar/32.jpg;type=image/jpeg\"","addpay":true,"append":"","useSpawn":"","timer":"","name":"cmd","x":492.22222900390625,"y":607.2221565246582,"wires":[["8fdbb6dd.f96268"],[],[]]},{"id":"ae311239.6485b","type":"inject","z":"7d24c700.ff9778","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":277.777774810791,"y":612.22216796875,"wires":[["4f2e4b55.9bfa44"]]},{"id":"8fdbb6dd.f96268","type":"debug","z":"7d24c700.ff9778","name":"","active":true,"console":"false","complete":"false","x":681.1111217074924,"y":593.3332790798611,"wires":[]},{"id":"29148a12.d367b6","type":"http request","z":"7d24c700.ff9778","name":"Send on analis","method":"POST","ret":"obj","url":"http://192.168.0.50:1880/api/Photo_a/probability","tls":"","x":486.2222328186035,"y":704.22216796875,"wires":[["7c34f7b6.7afb28"]]},{"id":"7c34f7b6.7afb28","type":"debug","z":"7d24c700.ff9778","name":"","active":true,"console":false,"complete":"false","x":696.2222328186035,"y":704.22216796875,"wires":[]},{"id":"c588a521.8c5b68","type":"function","z":"7d24c700.ff9778","name":"conver to base64","func":"var photo = msg.payload.toString('base64');\nmsg.payload = photo;\nflow.set('res',msg.res);\nreturn msg;","outputs":1,"noerr":0,"x":295.2222328186035,"y":704.22216796875,"wires":[["29148a12.d367b6"]]},{"id":"a136ae31.7409e","type":"file in","z":"7d24c700.ff9778","name":"back","filename":"","format":"","x":558.3333129882812,"y":431.6666564941406,"wires":[["29a08858.ebcc98"]]},{"id":"f6c76724.fbf518","type":"inject","z":"7d24c700.ff9778","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":271.6666679382324,"y":426.1110782623291,"wires":[["5d9c0415.7e317c"]]},{"id":"5d9c0415.7e317c","type":"function","z":"7d24c700.ff9778","name":"","func":"var max = 1;\nvar min = 15;\n\nvar img = (Math.random() * (max - min) + min).toFixed();\n\nmsg.payload = \"/distr/data/back/\" + img + \".jpg\";\nmsg.filename = msg.payload;\nreturn msg;\n\n","outputs":1,"noerr":0,"x":421.6666717529297,"y":428.3332824707031,"wires":[["a136ae31.7409e"]]},{"id":"b6176c3a.e29df","type":"file in","z":"7d24c700.ff9778","name":"front","filename":"","format":"","x":559.9999580383301,"y":498.33331298828125,"wires":[["c3836747.d92488"]]},{"id":"38163da8.022a82","type":"inject","z":"7d24c700.ff9778","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":273.33331298828125,"y":492.7777347564697,"wires":[["10fd0f3e.e73641"]]},{"id":"10fd0f3e.e73641","type":"function","z":"7d24c700.ff9778","name":"","func":"var max = 1;\nvar min = 15;\n\nvar img = (Math.random() * (max - min) + min).toFixed();\n\nmsg.payload = \"/distr/data/front/\" + img + \".jpg\";\nmsg.filename = msg.payload;\nreturn msg;\n\n","outputs":1,"noerr":0,"x":423.3333168029785,"y":494.99993896484375,"wires":[["b6176c3a.e29df"]]},{"id":"24980419.c1addc","type":"debug","z":"cd04ff99.5a648","name":"","active":false,"console":"false","complete":"false","x":1140,"y":440,"wires":[]},{"id":"82022d6d.4c76b","type":"function","z":"3f389a60.fd0696","name":"DEMO Photo","func":"var max = 1;\nvar min = 15;\n\nvar img = (Math.random() * (max - min) + min).toFixed();\n\nmsg.payload = \"/distr/data/front/\" + img + \".jpg\";\nmsg.filename = msg.payload;\nreturn msg;\n\n","outputs":1,"noerr":0,"x":310,"y":560,"wires":[["ed06751.856a288"]]},{"id":"ed06751.856a288","type":"file in","z":"3f389a60.fd0696","name":"front","filename":"","format":"","x":450,"y":560,"wires":[["5c12d33.1a1f02c"]]},{"id":"921ef43e.07d1d8","type":"switch","z":"3f389a60.fd0696","name":"","property":"payload.event.id","propertyType":"msg","rules":[{"t":"eq","v":"80096D9ABE7F68F3E0533300000A6C0D","vt":"str"}],"checkall":"true","outputs":1,"x":170,"y":560,"wires":[["82022d6d.4c76b"]]},{"id":"5c12d33.1a1f02c","type":"function","z":"3f389a60.fd0696","name":"create payload","func":"var access_table = flow.get('access_table');\nmsg.payload = {\n    \"content\":msg.filename,\n    \"type\":\"photo\",\n    \"chatId\":access_table.chatId\n}\nmsg.sendmsg = access_table.subscribe;\nreturn msg;","outputs":1,"noerr":0,"x":600,"y":560,"wires":[["b0f60f1.cd77ef"]]},{"id":"2841c780.146968","type":"switch","z":"cd04ff99.5a648","name":"switch min weight","property":"transactionHasMinWeight","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":390,"y":640,"wires":[["3106c039.db72b"]]},{"id":"3106c039.db72b","type":"function","z":"cd04ff99.5a648","name":"transactionHasMinWeight","func":"msg.event_id = flow.get('event_min_weight');\nmsg.description = 'Перевищена мінімально-допустима вага, кг: ' + msg.metadata.weight;\n\nreturn msg;","outputs":1,"noerr":0,"x":630,"y":640,"wires":[["58f2d037.aff6b"]]},{"id":"409e00b4.7178b","type":"switch","z":"cd04ff99.5a648","name":"take snapshot","property":"snapshot","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":1273.3333053588867,"y":748.3333339691162,"wires":[["b2865f3e.9ea7d"]]},{"id":"7f6a5a1e.65da34","type":"socket-io-out","z":"cd04ff99.5a648","name":"socket 4001","event":"90321c35.2726c","server":"6c186a4d.86cd04","x":170,"y":620,"wires":[]},{"id":"c6b2b5f2.c72eb8","type":"http in","z":"cd04ff99.5a648","name":"","url":"/getSimpleWeight","method":"get","swaggerDoc":"","x":160,"y":1020,"wires":[["551dbbda.34f414"]]},{"id":"551dbbda.34f414","type":"function","z":"cd04ff99.5a648","name":"response","func":"msg.payload = flow.get('transactionMetadata').weight;\nreturn msg;","outputs":1,"noerr":0,"x":400,"y":1020,"wires":[["cfb1b2b8.6e38f"]]},{"id":"cfb1b2b8.6e38f","type":"http response","z":"cd04ff99.5a648","name":"","x":590,"y":1020,"wires":[]},{"id":"e1454ef7.f0d09","type":"http in","z":"cd04ff99.5a648","name":"","url":"/socket","method":"get","swaggerDoc":"","x":130,"y":1180,"wires":[["6574cdc8.668804"]]},{"id":"2f33be04.5f7652","type":"template","z":"cd04ff99.5a648","name":"socket page","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"<html>\n     \n  <body>\n    <h1><p id='weight'></p></h1>\n    \n     <script>\n    setTimeout(function() {\n       ;(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.io=f()}})(function(){var define,module,exports;return function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}({1:[function(_dereq_,module,exports){module.exports=_dereq_(\"./lib/\")},{\"./lib/\":2}],2:[function(_dereq_,module,exports){module.exports=_dereq_(\"./socket\");module.exports.parser=_dereq_(\"engine.io-parser\")},{\"./socket\":3,\"engine.io-parser\":19}],3:[function(_dereq_,module,exports){(function(global){var transports=_dereq_(\"./transports\");var Emitter=_dereq_(\"component-emitter\");var debug=_dereq_(\"debug\")(\"engine.io-client:socket\");var index=_dereq_(\"indexof\");var parser=_dereq_(\"engine.io-parser\");var parseuri=_dereq_(\"parseuri\");var parsejson=_dereq_(\"parsejson\");var parseqs=_dereq_(\"parseqs\");module.exports=Socket;function noop(){}function Socket(uri,opts){if(!(this instanceof Socket))return new Socket(uri,opts);opts=opts||{};if(uri&&\"object\"==typeof uri){opts=uri;uri=null}if(uri){uri=parseuri(uri);opts.hostname=uri.host;opts.secure=uri.protocol==\"https\"||uri.protocol==\"wss\";opts.port=uri.port;if(uri.query)opts.query=uri.query}else if(opts.host){opts.hostname=parseuri(opts.host).host}this.secure=null!=opts.secure?opts.secure:global.location&&\"https:\"==location.protocol;if(opts.hostname&&!opts.port){opts.port=this.secure?\"443\":\"80\"}this.agent=opts.agent||false;this.hostname=opts.hostname||(global.location?location.hostname:\"localhost\");this.port=opts.port||(global.location&&location.port?location.port:this.secure?443:80);this.query=opts.query||{};if(\"string\"==typeof this.query)this.query=parseqs.decode(this.query);this.upgrade=false!==opts.upgrade;this.path=(opts.path||\"/engine.io\").replace(/\\/$/,\"\")+\"/\";this.forceJSONP=!!opts.forceJSONP;this.jsonp=false!==opts.jsonp;this.forceBase64=!!opts.forceBase64;this.enablesXDR=!!opts.enablesXDR;this.timestampParam=opts.timestampParam||\"t\";this.timestampRequests=opts.timestampRequests;this.transports=opts.transports||[\"polling\",\"websocket\"];this.readyState=\"\";this.writeBuffer=[];this.policyPort=opts.policyPort||843;this.rememberUpgrade=opts.rememberUpgrade||false;this.binaryType=null;this.onlyBinaryUpgrades=opts.onlyBinaryUpgrades;this.perMessageDeflate=false!==opts.perMessageDeflate?opts.perMessageDeflate||{}:false;if(true===this.perMessageDeflate)this.perMessageDeflate={};if(this.perMessageDeflate&&null==this.perMessageDeflate.threshold){this.perMessageDeflate.threshold=1024}this.pfx=opts.pfx||null;this.key=opts.key||null;this.passphrase=opts.passphrase||null;this.cert=opts.cert||null;this.ca=opts.ca||null;this.ciphers=opts.ciphers||null;this.rejectUnauthorized=opts.rejectUnauthorized===undefined?null:opts.rejectUnauthorized;var freeGlobal=typeof global==\"object\"&&global;if(freeGlobal.global===freeGlobal){if(opts.extraHeaders&&Object.keys(opts.extraHeaders).length>0){this.extraHeaders=opts.extraHeaders}}this.open()}Socket.priorWebsocketSuccess=false;Emitter(Socket.prototype);Socket.protocol=parser.protocol;Socket.Socket=Socket;Socket.Transport=_dereq_(\"./transport\");Socket.transports=_dereq_(\"./transports\");Socket.parser=_dereq_(\"engine.io-parser\");Socket.prototype.createTransport=function(name){debug('creating transport \"%s\"',name);var query=clone(this.query);query.EIO=parser.protocol;query.transport=name;if(this.id)query.sid=this.id;var transport=new transports[name]({agent:this.agent,hostname:this.hostname,port:this.port,secure:this.secure,path:this.path,query:query,forceJSONP:this.forceJSONP,jsonp:this.jsonp,forceBase64:this.forceBase64,enablesXDR:this.enablesXDR,timestampRequests:this.timestampRequests,timestampParam:this.timestampParam,policyPort:this.policyPort,socket:this,pfx:this.pfx,key:this.key,passphrase:this.passphrase,cert:this.cert,ca:this.ca,ciphers:this.ciphers,rejectUnauthorized:this.rejectUnauthorized,perMessageDeflate:this.perMessageDeflate,extraHeaders:this.extraHeaders});return transport};function clone(obj){var o={};for(var i in obj){if(obj.hasOwnProperty(i)){o[i]=obj[i]}}return o}Socket.prototype.open=function(){var transport;if(this.rememberUpgrade&&Socket.priorWebsocketSuccess&&this.transports.indexOf(\"websocket\")!=-1){transport=\"websocket\"}else if(0===this.transports.length){var self=this;setTimeout(function(){self.emit(\"error\",\"No transports available\")},0);return}else{transport=this.transports[0]}this.readyState=\"opening\";try{transport=this.createTransport(transport)}catch(e){this.transports.shift();this.open();return}transport.open();this.setTransport(transport)};Socket.prototype.setTransport=function(transport){debug(\"setting transport %s\",transport.name);var self=this;if(this.transport){debug(\"clearing existing transport %s\",this.transport.name);this.transport.removeAllListeners()}this.transport=transport;transport.on(\"drain\",function(){self.onDrain()}).on(\"packet\",function(packet){self.onPacket(packet)}).on(\"error\",function(e){self.onError(e)}).on(\"close\",function(){self.onClose(\"transport close\")})};Socket.prototype.probe=function(name){debug('probing transport \"%s\"',name);var transport=this.createTransport(name,{probe:1}),failed=false,self=this;Socket.priorWebsocketSuccess=false;function onTransportOpen(){if(self.onlyBinaryUpgrades){var upgradeLosesBinary=!this.supportsBinary&&self.transport.supportsBinary;failed=failed||upgradeLosesBinary}if(failed)return;debug('probe transport \"%s\" opened',name);transport.send([{type:\"ping\",data:\"probe\"}]);transport.once(\"packet\",function(msg){if(failed)return;if(\"pong\"==msg.type&&\"probe\"==msg.data){debug('probe transport \"%s\" pong',name);self.upgrading=true;self.emit(\"upgrading\",transport);if(!transport)return;Socket.priorWebsocketSuccess=\"websocket\"==transport.name;debug('pausing current transport \"%s\"',self.transport.name);self.transport.pause(function(){if(failed)return;if(\"closed\"==self.readyState)return;debug(\"changing transport and sending upgrade packet\");cleanup();self.setTransport(transport);transport.send([{type:\"upgrade\"}]);self.emit(\"upgrade\",transport);transport=null;self.upgrading=false;self.flush()})}else{debug('probe transport \"%s\" failed',name);var err=new Error(\"probe error\");err.transport=transport.name;self.emit(\"upgradeError\",err)}})}function freezeTransport(){if(failed)return;failed=true;cleanup();transport.close();transport=null}function onerror(err){var error=new Error(\"probe error: \"+err);error.transport=transport.name;freezeTransport();debug('probe transport \"%s\" failed because of error: %s',name,err);self.emit(\"upgradeError\",error)}function onTransportClose(){onerror(\"transport closed\")}function onclose(){onerror(\"socket closed\")}function onupgrade(to){if(transport&&to.name!=transport.name){debug('\"%s\" works - aborting \"%s\"',to.name,transport.name);freezeTransport()}}function cleanup(){transport.removeListener(\"open\",onTransportOpen);transport.removeListener(\"error\",onerror);transport.removeListener(\"close\",onTransportClose);self.removeListener(\"close\",onclose);self.removeListener(\"upgrading\",onupgrade)}transport.once(\"open\",onTransportOpen);transport.once(\"error\",onerror);transport.once(\"close\",onTransportClose);this.once(\"close\",onclose);this.once(\"upgrading\",onupgrade);transport.open()};Socket.prototype.onOpen=function(){debug(\"socket open\");this.readyState=\"open\";Socket.priorWebsocketSuccess=\"websocket\"==this.transport.name;this.emit(\"open\");this.flush();if(\"open\"==this.readyState&&this.upgrade&&this.transport.pause){debug(\"starting upgrade probes\");for(var i=0,l=this.upgrades.length;i<l;i++){this.probe(this.upgrades[i])}}};Socket.prototype.onPacket=function(packet){if(\"opening\"==this.readyState||\"open\"==this.readyState){debug('socket receive: type \"%s\", data \"%s\"',packet.type,packet.data);this.emit(\"packet\",packet);this.emit(\"heartbeat\");switch(packet.type){case\"open\":this.onHandshake(parsejson(packet.data));break;case\"pong\":this.setPing();this.emit(\"pong\");break;case\"error\":var err=new Error(\"server error\");err.code=packet.data;this.onError(err);break;case\"message\":this.emit(\"data\",packet.data);this.emit(\"message\",packet.data);break}}else{debug('packet received with socket readyState \"%s\"',this.readyState)}};Socket.prototype.onHandshake=function(data){this.emit(\"handshake\",data);this.id=data.sid;this.transport.query.sid=data.sid;this.upgrades=this.filterUpgrades(data.upgrades);this.pingInterval=data.pingInterval;this.pingTimeout=data.pingTimeout;this.onOpen();if(\"closed\"==this.readyState)return;this.setPing();this.removeListener(\"heartbeat\",this.onHeartbeat);this.on(\"heartbeat\",this.onHeartbeat)};Socket.prototype.onHeartbeat=function(timeout){clearTimeout(this.pingTimeoutTimer);var self=this;self.pingTimeoutTimer=setTimeout(function(){if(\"closed\"==self.readyState)return;self.onClose(\"ping timeout\")},timeout||self.pingInterval+self.pingTimeout)};Socket.prototype.setPing=function(){var self=this;clearTimeout(self.pingIntervalTimer);self.pingIntervalTimer=setTimeout(function(){debug(\"writing ping packet - expecting pong within %sms\",self.pingTimeout);self.ping();self.onHeartbeat(self.pingTimeout)},self.pingInterval)};Socket.prototype.ping=function(){var self=this;this.sendPacket(\"ping\",function(){self.emit(\"ping\")})};Socket.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen);this.prevBufferLen=0;if(0===this.writeBuffer.length){this.emit(\"drain\")}else{this.flush()}};Socket.prototype.flush=function(){if(\"closed\"!=this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length){debug(\"flushing %d packets in socket\",this.writeBuffer.length);this.transport.send(this.writeBuffer);this.prevBufferLen=this.writeBuffer.length;this.emit(\"flush\")}};Socket.prototype.write=Socket.prototype.send=function(msg,options,fn){this.sendPacket(\"message\",msg,options,fn);return this};Socket.prototype.sendPacket=function(type,data,options,fn){if(\"function\"==typeof data){fn=data;data=undefined}if(\"function\"==typeof options){fn=options;options=null}if(\"closing\"==this.readyState||\"closed\"==this.readyState){return}options=options||{};options.compress=false!==options.compress;var packet={type:type,data:data,options:options};this.emit(\"packetCreate\",packet);this.writeBuffer.push(packet);if(fn)this.once(\"flush\",fn);this.flush()};Socket.prototype.close=function(){if(\"opening\"==this.readyState||\"open\"==this.readyState){this.readyState=\"closing\";var self=this;if(this.writeBuffer.length){this.once(\"drain\",function(){if(this.upgrading){waitForUpgrade()}else{close()}})}else if(this.upgrading){waitForUpgrade()}else{close()}}function close(){self.onClose(\"forced close\");debug(\"socket closing - telling transport to close\");self.transport.close()}function cleanupAndClose(){self.removeListener(\"upgrade\",cleanupAndClose);self.removeListener(\"upgradeError\",cleanupAndClose);close()}function waitForUpgrade(){self.once(\"upgrade\",cleanupAndClose);self.once(\"upgradeError\",cleanupAndClose)}return this};Socket.prototype.onError=function(err){debug(\"socket error %j\",err);Socket.priorWebsocketSuccess=false;this.emit(\"error\",err);this.onClose(\"transport error\",err)};Socket.prototype.onClose=function(reason,desc){if(\"opening\"==this.readyState||\"open\"==this.readyState||\"closing\"==this.readyState){debug('socket close with reason: \"%s\"',reason);var self=this;clearTimeout(this.pingIntervalTimer);clearTimeout(this.pingTimeoutTimer);this.transport.removeAllListeners(\"close\");this.transport.close();this.transport.removeAllListeners();this.readyState=\"closed\";this.id=null;this.emit(\"close\",reason,desc);self.writeBuffer=[];self.prevBufferLen=0}};Socket.prototype.filterUpgrades=function(upgrades){var filteredUpgrades=[];for(var i=0,j=upgrades.length;i<j;i++){if(~index(this.transports,upgrades[i]))filteredUpgrades.push(upgrades[i])}return filteredUpgrades}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{\"./transport\":4,\"./transports\":5,\"component-emitter\":15,debug:17,\"engine.io-parser\":19,indexof:23,parsejson:26,parseqs:27,parseuri:28}],4:[function(_dereq_,module,exports){var parser=_dereq_(\"engine.io-parser\");var Emitter=_dereq_(\"component-emitter\");module.exports=Transport;function Transport(opts){this.path=opts.path;this.hostname=opts.hostname;this.port=opts.port;this.secure=opts.secure;this.query=opts.query;this.timestampParam=opts.timestampParam;this.timestampRequests=opts.timestampRequests;this.readyState=\"\";this.agent=opts.agent||false;this.socket=opts.socket;this.enablesXDR=opts.enablesXDR;this.pfx=opts.pfx;this.key=opts.key;this.passphrase=opts.passphrase;this.cert=opts.cert;this.ca=opts.ca;this.ciphers=opts.ciphers;this.rejectUnauthorized=opts.rejectUnauthorized;this.extraHeaders=opts.extraHeaders}Emitter(Transport.prototype);Transport.prototype.onError=function(msg,desc){var err=new Error(msg);err.type=\"TransportError\";err.description=desc;this.emit(\"error\",err);return this};Transport.prototype.open=function(){if(\"closed\"==this.readyState||\"\"==this.readyState){this.readyState=\"opening\";this.doOpen()}return this};Transport.prototype.close=function(){if(\"opening\"==this.readyState||\"open\"==this.readyState){this.doClose();this.onClose()}return this};Transport.prototype.send=function(packets){if(\"open\"==this.readyState){this.write(packets)}else{throw new Error(\"Transport not open\")}};Transport.prototype.onOpen=function(){this.readyState=\"open\";this.writable=true;this.emit(\"open\")};Transport.prototype.onData=function(data){var packet=parser.decodePacket(data,this.socket.binaryType);this.onPacket(packet)};Transport.prototype.onPacket=function(packet){this.emit(\"packet\",packet)};Transport.prototype.onClose=function(){this.readyState=\"closed\";this.emit(\"close\")}},{\"component-emitter\":15,\"engine.io-parser\":19}],5:[function(_dereq_,module,exports){(function(global){var XMLHttpRequest=_dereq_(\"xmlhttprequest-ssl\");var XHR=_dereq_(\"./polling-xhr\");var JSONP=_dereq_(\"./polling-jsonp\");var websocket=_dereq_(\"./websocket\");exports.polling=polling;exports.websocket=websocket;function polling(opts){var xhr;var xd=false;var xs=false;var jsonp=false!==opts.jsonp;if(global.location){var isSSL=\"https:\"==location.protocol;var port=location.port;if(!port){port=isSSL?443:80}xd=opts.hostname!=location.hostname||port!=opts.port;xs=opts.secure!=isSSL}opts.xdomain=xd;opts.xscheme=xs;xhr=new XMLHttpRequest(opts);if(\"open\"in xhr&&!opts.forceJSONP){return new XHR(opts)}else{if(!jsonp)throw new Error(\"JSONP disabled\");return new JSONP(opts)}}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{\"./polling-jsonp\":6,\"./polling-xhr\":7,\"./websocket\":9,\"xmlhttprequest-ssl\":10}],6:[function(_dereq_,module,exports){(function(global){var Polling=_dereq_(\"./polling\");var inherit=_dereq_(\"component-inherit\");module.exports=JSONPPolling;var rNewline=/\\n/g;var rEscapedNewline=/\\\\n/g;var callbacks;var index=0;function empty(){}function JSONPPolling(opts){Polling.call(this,opts);this.query=this.query||{};if(!callbacks){if(!global.___eio)global.___eio=[];callbacks=global.___eio}this.index=callbacks.length;var self=this;callbacks.push(function(msg){self.onData(msg)});this.query.j=this.index;if(global.document&&global.addEventListener){global.addEventListener(\"beforeunload\",function(){if(self.script)self.script.onerror=empty},false)}}inherit(JSONPPolling,Polling);JSONPPolling.prototype.supportsBinary=false;JSONPPolling.prototype.doClose=function(){if(this.script){this.script.parentNode.removeChild(this.script);this.script=null}if(this.form){this.form.parentNode.removeChild(this.form);this.form=null;this.iframe=null}Polling.prototype.doClose.call(this)};JSONPPolling.prototype.doPoll=function(){var self=this;var script=document.createElement(\"script\");if(this.script){this.script.parentNode.removeChild(this.script);this.script=null}script.async=true;script.src=this.uri();script.onerror=function(e){self.onError(\"jsonp poll error\",e)};var insertAt=document.getElementsByTagName(\"script\")[0];if(insertAt){insertAt.parentNode.insertBefore(script,insertAt)}else{(document.head||document.body).appendChild(script)}this.script=script;var isUAgecko=\"undefined\"!=typeof navigator&&/gecko/i.test(navigator.userAgent);if(isUAgecko){setTimeout(function(){var iframe=document.createElement(\"iframe\");document.body.appendChild(iframe);document.body.removeChild(iframe)},100)}};JSONPPolling.prototype.doWrite=function(data,fn){var self=this;if(!this.form){var form=document.createElement(\"form\");var area=document.createElement(\"textarea\");var id=this.iframeId=\"eio_iframe_\"+this.index;var iframe;form.className=\"socketio\";form.style.position=\"absolute\";form.style.top=\"-1000px\";form.style.left=\"-1000px\";form.target=id;form.method=\"POST\";form.setAttribute(\"accept-charset\",\"utf-8\");area.name=\"d\";form.appendChild(area);document.body.appendChild(form);this.form=form;this.area=area}this.form.action=this.uri();function complete(){initIframe();fn()}function initIframe(){if(self.iframe){try{self.form.removeChild(self.iframe)}catch(e){self.onError(\"jsonp polling iframe removal error\",e)}}try{var html='<iframe src=\"javascript:0\" name=\"'+self.iframeId+'\">';iframe=document.createElement(html)}catch(e){iframe=document.createElement(\"iframe\");iframe.name=self.iframeId;iframe.src=\"javascript:0\"}iframe.id=self.iframeId;self.form.appendChild(iframe);self.iframe=iframe}initIframe();data=data.replace(rEscapedNewline,\"\\\\\\n\");this.area.value=data.replace(rNewline,\"\\\\n\");try{this.form.submit()}catch(e){}if(this.iframe.attachEvent){this.iframe.onreadystatechange=function(){if(self.iframe.readyState==\"complete\"){complete()}}}else{this.iframe.onload=complete}}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{\"./polling\":8,\"component-inherit\":16}],7:[function(_dereq_,module,exports){(function(global){var XMLHttpRequest=_dereq_(\"xmlhttprequest-ssl\");var Polling=_dereq_(\"./polling\");var Emitter=_dereq_(\"component-emitter\");var inherit=_dereq_(\"component-inherit\");var debug=_dereq_(\"debug\")(\"engine.io-client:polling-xhr\");module.exports=XHR;module.exports.Request=Request;function empty(){}function XHR(opts){Polling.call(this,opts);if(global.location){var isSSL=\"https:\"==location.protocol;var port=location.port;if(!port){port=isSSL?443:80}this.xd=opts.hostname!=global.location.hostname||port!=opts.port;this.xs=opts.secure!=isSSL}else{this.extraHeaders=opts.extraHeaders}}inherit(XHR,Polling);XHR.prototype.supportsBinary=true;XHR.prototype.request=function(opts){opts=opts||{};opts.uri=this.uri();opts.xd=this.xd;opts.xs=this.xs;opts.agent=this.agent||false;opts.supportsBinary=this.supportsBinary;opts.enablesXDR=this.enablesXDR;opts.pfx=this.pfx;opts.key=this.key;opts.passphrase=this.passphrase;opts.cert=this.cert;opts.ca=this.ca;opts.ciphers=this.ciphers;opts.rejectUnauthorized=this.rejectUnauthorized;opts.extraHeaders=this.extraHeaders;return new Request(opts)};XHR.prototype.doWrite=function(data,fn){var isBinary=typeof data!==\"string\"&&data!==undefined;var req=this.request({method:\"POST\",data:data,isBinary:isBinary});var self=this;req.on(\"success\",fn);req.on(\"error\",function(err){self.onError(\"xhr post error\",err)});this.sendXhr=req};XHR.prototype.doPoll=function(){debug(\"xhr poll\");var req=this.request();var self=this;req.on(\"data\",function(data){self.onData(data)});req.on(\"error\",function(err){self.onError(\"xhr poll error\",err)});this.pollXhr=req};function Request(opts){this.method=opts.method||\"GET\";this.uri=opts.uri;this.xd=!!opts.xd;this.xs=!!opts.xs;this.async=false!==opts.async;this.data=undefined!=opts.data?opts.data:null;this.agent=opts.agent;this.isBinary=opts.isBinary;this.supportsBinary=opts.supportsBinary;this.enablesXDR=opts.enablesXDR;this.pfx=opts.pfx;this.key=opts.key;this.passphrase=opts.passphrase;this.cert=opts.cert;this.ca=opts.ca;this.ciphers=opts.ciphers;this.rejectUnauthorized=opts.rejectUnauthorized;this.extraHeaders=opts.extraHeaders;this.create()}Emitter(Request.prototype);Request.prototype.create=function(){var opts={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};opts.pfx=this.pfx;opts.key=this.key;opts.passphrase=this.passphrase;opts.cert=this.cert;opts.ca=this.ca;opts.ciphers=this.ciphers;opts.rejectUnauthorized=this.rejectUnauthorized;var xhr=this.xhr=new XMLHttpRequest(opts);var self=this;try{debug(\"xhr open %s: %s\",this.method,this.uri);xhr.open(this.method,this.uri,this.async);try{if(this.extraHeaders){xhr.setDisableHeaderCheck(true);for(var i in this.extraHeaders){if(this.extraHeaders.hasOwnProperty(i)){xhr.setRequestHeader(i,this.extraHeaders[i])}}}}catch(e){}if(this.supportsBinary){xhr.responseType=\"arraybuffer\"}if(\"POST\"==this.method){try{if(this.isBinary){xhr.setRequestHeader(\"Content-type\",\"application/octet-stream\")}else{xhr.setRequestHeader(\"Content-type\",\"text/plain;charset=UTF-8\")}}catch(e){}}if(\"withCredentials\"in xhr){xhr.withCredentials=true}if(this.hasXDR()){xhr.onload=function(){self.onLoad()};xhr.onerror=function(){self.onError(xhr.responseText)}}else{xhr.onreadystatechange=function(){if(4!=xhr.readyState)return;if(200==xhr.status||1223==xhr.status){self.onLoad()}else{setTimeout(function(){self.onError(xhr.status)},0)}}}debug(\"xhr data %s\",this.data);xhr.send(this.data)}catch(e){setTimeout(function(){self.onError(e)},0);return}if(global.document){this.index=Request.requestsCount++;Request.requests[this.index]=this}};Request.prototype.onSuccess=function(){this.emit(\"success\");this.cleanup()};Request.prototype.onData=function(data){this.emit(\"data\",data);this.onSuccess()};Request.prototype.onError=function(err){this.emit(\"error\",err);this.cleanup(true)};Request.prototype.cleanup=function(fromError){if(\"undefined\"==typeof this.xhr||null===this.xhr){return}if(this.hasXDR()){this.xhr.onload=this.xhr.onerror=empty}else{this.xhr.onreadystatechange=empty}if(fromError){try{this.xhr.abort()}catch(e){}}if(global.document){delete Request.requests[this.index]}this.xhr=null};Request.prototype.onLoad=function(){var data;try{var contentType;try{contentType=this.xhr.getResponseHeader(\"Content-Type\").split(\";\")[0]}catch(e){}if(contentType===\"application/octet-stream\"){data=this.xhr.response}else{if(!this.supportsBinary){data=this.xhr.responseText}else{try{data=String.fromCharCode.apply(null,new Uint8Array(this.xhr.response))}catch(e){var ui8Arr=new Uint8Array(this.xhr.response);var dataArray=[];for(var idx=0,length=ui8Arr.length;idx<length;idx++){dataArray.push(ui8Arr[idx])}data=String.fromCharCode.apply(null,dataArray)}}}}catch(e){this.onError(e)}if(null!=data){this.onData(data)}};Request.prototype.hasXDR=function(){return\"undefined\"!==typeof global.XDomainRequest&&!this.xs&&this.enablesXDR};Request.prototype.abort=function(){this.cleanup()};if(global.document){Request.requestsCount=0;Request.requests={};if(global.attachEvent){global.attachEvent(\"onunload\",unloadHandler)}else if(global.addEventListener){global.addEventListener(\"beforeunload\",unloadHandler,false)}}function unloadHandler(){for(var i in Request.requests){if(Request.requests.hasOwnProperty(i)){Request.requests[i].abort()}}}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{\"./polling\":8,\"component-emitter\":15,\"component-inherit\":16,debug:17,\"xmlhttprequest-ssl\":10}],8:[function(_dereq_,module,exports){var Transport=_dereq_(\"../transport\");var parseqs=_dereq_(\"parseqs\");var parser=_dereq_(\"engine.io-parser\");var inherit=_dereq_(\"component-inherit\");var yeast=_dereq_(\"yeast\");var debug=_dereq_(\"debug\")(\"engine.io-client:polling\");module.exports=Polling;var hasXHR2=function(){var XMLHttpRequest=_dereq_(\"xmlhttprequest-ssl\");var xhr=new XMLHttpRequest({xdomain:false});return null!=xhr.responseType}();function Polling(opts){var forceBase64=opts&&opts.forceBase64;if(!hasXHR2||forceBase64){this.supportsBinary=false}Transport.call(this,opts)}inherit(Polling,Transport);Polling.prototype.name=\"polling\";Polling.prototype.doOpen=function(){this.poll()};Polling.prototype.pause=function(onPause){var pending=0;var self=this;this.readyState=\"pausing\";function pause(){debug(\"paused\");self.readyState=\"paused\";onPause()}if(this.polling||!this.writable){var total=0;if(this.polling){debug(\"we are currently polling - waiting to pause\");total++;this.once(\"pollComplete\",function(){debug(\"pre-pause polling complete\");--total||pause()})}if(!this.writable){debug(\"we are currently writing - waiting to pause\");total++;this.once(\"drain\",function(){debug(\"pre-pause writing complete\");--total||pause()})}}else{pause()}};Polling.prototype.poll=function(){debug(\"polling\");this.polling=true;this.doPoll();this.emit(\"poll\")};Polling.prototype.onData=function(data){var self=this;debug(\"polling got data %s\",data);var callback=function(packet,index,total){if(\"opening\"==self.readyState){self.onOpen()}if(\"close\"==packet.type){self.onClose();return false}self.onPacket(packet)};parser.decodePayload(data,this.socket.binaryType,callback);if(\"closed\"!=this.readyState){this.polling=false;this.emit(\"pollComplete\");if(\"open\"==this.readyState){this.poll()}else{debug('ignoring poll - transport state \"%s\"',this.readyState)}}};Polling.prototype.doClose=function(){var self=this;function close(){debug(\"writing close packet\");self.write([{type:\"close\"}])}if(\"open\"==this.readyState){debug(\"transport open - closing\");close()}else{debug(\"transport not open - deferring close\");this.once(\"open\",close)}};Polling.prototype.write=function(packets){var self=this;this.writable=false;var callbackfn=function(){self.writable=true;self.emit(\"drain\")};var self=this;parser.encodePayload(packets,this.supportsBinary,function(data){self.doWrite(data,callbackfn)})};Polling.prototype.uri=function(){var query=this.query||{};var schema=this.secure?\"https\":\"http\";var port=\"\";if(false!==this.timestampRequests){query[this.timestampParam]=yeast()}if(!this.supportsBinary&&!query.sid){query.b64=1}query=parseqs.encode(query);if(this.port&&(\"https\"==schema&&this.port!=443||\"http\"==schema&&this.port!=80)){port=\":\"+this.port}if(query.length){query=\"?\"+query}var ipv6=this.hostname.indexOf(\":\")!==-1;return schema+\"://\"+(ipv6?\"[\"+this.hostname+\"]\":this.hostname)+port+this.path+query}},{\"../transport\":4,\"component-inherit\":16,debug:17,\"engine.io-parser\":19,parseqs:27,\"xmlhttprequest-ssl\":10,yeast:30}],9:[function(_dereq_,module,exports){(function(global){var Transport=_dereq_(\"../transport\");var parser=_dereq_(\"engine.io-parser\");var parseqs=_dereq_(\"parseqs\");var inherit=_dereq_(\"component-inherit\");var yeast=_dereq_(\"yeast\");var debug=_dereq_(\"debug\")(\"engine.io-client:websocket\");var BrowserWebSocket=global.WebSocket||global.MozWebSocket;var WebSocket=BrowserWebSocket;if(!WebSocket&&typeof window===\"undefined\"){try{WebSocket=_dereq_(\"ws\")}catch(e){}}module.exports=WS;function WS(opts){var forceBase64=opts&&opts.forceBase64;if(forceBase64){this.supportsBinary=false}this.perMessageDeflate=opts.perMessageDeflate;Transport.call(this,opts)}inherit(WS,Transport);WS.prototype.name=\"websocket\";WS.prototype.supportsBinary=true;WS.prototype.doOpen=function(){if(!this.check()){return}var self=this;var uri=this.uri();var protocols=void 0;var opts={agent:this.agent,perMessageDeflate:this.perMessageDeflate};opts.pfx=this.pfx;opts.key=this.key;opts.passphrase=this.passphrase;opts.cert=this.cert;opts.ca=this.ca;opts.ciphers=this.ciphers;opts.rejectUnauthorized=this.rejectUnauthorized;if(this.extraHeaders){opts.headers=this.extraHeaders}this.ws=BrowserWebSocket?new WebSocket(uri):new WebSocket(uri,protocols,opts);if(this.ws.binaryType===undefined){this.supportsBinary=false}if(this.ws.supports&&this.ws.supports.binary){this.supportsBinary=true;this.ws.binaryType=\"buffer\"}else{this.ws.binaryType=\"arraybuffer\"}this.addEventListeners()};WS.prototype.addEventListeners=function(){var self=this;this.ws.onopen=function(){self.onOpen()};this.ws.onclose=function(){self.onClose()};this.ws.onmessage=function(ev){self.onData(ev.data)};this.ws.onerror=function(e){self.onError(\"websocket error\",e)}};if(\"undefined\"!=typeof navigator&&/iPad|iPhone|iPod/i.test(navigator.userAgent)){WS.prototype.onData=function(data){var self=this;setTimeout(function(){Transport.prototype.onData.call(self,data)},0)}}WS.prototype.write=function(packets){var self=this;this.writable=false;var total=packets.length;for(var i=0,l=total;i<l;i++){(function(packet){parser.encodePacket(packet,self.supportsBinary,function(data){if(!BrowserWebSocket){var opts={};if(packet.options){opts.compress=packet.options.compress}if(self.perMessageDeflate){var len=\"string\"==typeof data?global.Buffer.byteLength(data):data.length;if(len<self.perMessageDeflate.threshold){opts.compress=false}}}try{if(BrowserWebSocket){self.ws.send(data)}else{self.ws.send(data,opts)}}catch(e){debug(\"websocket closed before onclose event\")}--total||done()})})(packets[i])}function done(){self.emit(\"flush\");setTimeout(function(){self.writable=true;self.emit(\"drain\")},0)}};WS.prototype.onClose=function(){Transport.prototype.onClose.call(this)};WS.prototype.doClose=function(){if(typeof this.ws!==\"undefined\"){this.ws.close()}};WS.prototype.uri=function(){var query=this.query||{};var schema=this.secure?\"wss\":\"ws\";var port=\"\";if(this.port&&(\"wss\"==schema&&this.port!=443||\"ws\"==schema&&this.port!=80)){port=\":\"+this.port}if(this.timestampRequests){query[this.timestampParam]=yeast()}if(!this.supportsBinary){query.b64=1}query=parseqs.encode(query);if(query.length){query=\"?\"+query}var ipv6=this.hostname.indexOf(\":\")!==-1;return schema+\"://\"+(ipv6?\"[\"+this.hostname+\"]\":this.hostname)+port+this.path+query};WS.prototype.check=function(){return!!WebSocket&&!(\"__initialize\"in WebSocket&&this.name===WS.prototype.name)}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{\"../transport\":4,\"component-inherit\":16,debug:17,\"engine.io-parser\":19,parseqs:27,ws:undefined,yeast:30}],10:[function(_dereq_,module,exports){var hasCORS=_dereq_(\"has-cors\");module.exports=function(opts){var xdomain=opts.xdomain;var xscheme=opts.xscheme;var enablesXDR=opts.enablesXDR;try{if(\"undefined\"!=typeof XMLHttpRequest&&(!xdomain||hasCORS)){return new XMLHttpRequest}}catch(e){}try{if(\"undefined\"!=typeof XDomainRequest&&!xscheme&&enablesXDR){return new XDomainRequest}}catch(e){}if(!xdomain){try{return new ActiveXObject(\"Microsoft.XMLHTTP\")}catch(e){}}}},{\"has-cors\":22}],11:[function(_dereq_,module,exports){module.exports=after;function after(count,callback,err_cb){var bail=false;err_cb=err_cb||noop;proxy.count=count;return count===0?callback():proxy;function proxy(err,result){if(proxy.count<=0){throw new Error(\"after called too many times\")}--proxy.count;if(err){bail=true;callback(err);callback=err_cb}else if(proxy.count===0&&!bail){callback(null,result)}}}function noop(){}},{}],12:[function(_dereq_,module,exports){module.exports=function(arraybuffer,start,end){var bytes=arraybuffer.byteLength;start=start||0;end=end||bytes;if(arraybuffer.slice){return arraybuffer.slice(start,end)}if(start<0){start+=bytes}if(end<0){end+=bytes}if(end>bytes){end=bytes}if(start>=bytes||start>=end||bytes===0){return new ArrayBuffer(0)}var abv=new Uint8Array(arraybuffer);var result=new Uint8Array(end-start);for(var i=start,ii=0;i<end;i++,ii++){result[ii]=abv[i]}return result.buffer}},{}],13:[function(_dereq_,module,exports){(function(chars){\"use strict\";exports.encode=function(arraybuffer){var bytes=new Uint8Array(arraybuffer),i,len=bytes.length,base64=\"\";for(i=0;i<len;i+=3){base64+=chars[bytes[i]>>2];\nbase64+=chars[(bytes[i]&3)<<4|bytes[i+1]>>4];base64+=chars[(bytes[i+1]&15)<<2|bytes[i+2]>>6];base64+=chars[bytes[i+2]&63]}if(len%3===2){base64=base64.substring(0,base64.length-1)+\"=\"}else if(len%3===1){base64=base64.substring(0,base64.length-2)+\"==\"}return base64};exports.decode=function(base64){var bufferLength=base64.length*.75,len=base64.length,i,p=0,encoded1,encoded2,encoded3,encoded4;if(base64[base64.length-1]===\"=\"){bufferLength--;if(base64[base64.length-2]===\"=\"){bufferLength--}}var arraybuffer=new ArrayBuffer(bufferLength),bytes=new Uint8Array(arraybuffer);for(i=0;i<len;i+=4){encoded1=chars.indexOf(base64[i]);encoded2=chars.indexOf(base64[i+1]);encoded3=chars.indexOf(base64[i+2]);encoded4=chars.indexOf(base64[i+3]);bytes[p++]=encoded1<<2|encoded2>>4;bytes[p++]=(encoded2&15)<<4|encoded3>>2;bytes[p++]=(encoded3&3)<<6|encoded4&63}return arraybuffer}})(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\")},{}],14:[function(_dereq_,module,exports){(function(global){var BlobBuilder=global.BlobBuilder||global.WebKitBlobBuilder||global.MSBlobBuilder||global.MozBlobBuilder;var blobSupported=function(){try{var a=new Blob([\"hi\"]);return a.size===2}catch(e){return false}}();var blobSupportsArrayBufferView=blobSupported&&function(){try{var b=new Blob([new Uint8Array([1,2])]);return b.size===2}catch(e){return false}}();var blobBuilderSupported=BlobBuilder&&BlobBuilder.prototype.append&&BlobBuilder.prototype.getBlob;function mapArrayBufferViews(ary){for(var i=0;i<ary.length;i++){var chunk=ary[i];if(chunk.buffer instanceof ArrayBuffer){var buf=chunk.buffer;if(chunk.byteLength!==buf.byteLength){var copy=new Uint8Array(chunk.byteLength);copy.set(new Uint8Array(buf,chunk.byteOffset,chunk.byteLength));buf=copy.buffer}ary[i]=buf}}}function BlobBuilderConstructor(ary,options){options=options||{};var bb=new BlobBuilder;mapArrayBufferViews(ary);for(var i=0;i<ary.length;i++){bb.append(ary[i])}return options.type?bb.getBlob(options.type):bb.getBlob()}function BlobConstructor(ary,options){mapArrayBufferViews(ary);return new Blob(ary,options||{})}module.exports=function(){if(blobSupported){return blobSupportsArrayBufferView?global.Blob:BlobConstructor}else if(blobBuilderSupported){return BlobBuilderConstructor}else{return undefined}}()}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{}],15:[function(_dereq_,module,exports){module.exports=Emitter;function Emitter(obj){if(obj)return mixin(obj)}function mixin(obj){for(var key in Emitter.prototype){obj[key]=Emitter.prototype[key]}return obj}Emitter.prototype.on=Emitter.prototype.addEventListener=function(event,fn){this._callbacks=this._callbacks||{};(this._callbacks[event]=this._callbacks[event]||[]).push(fn);return this};Emitter.prototype.once=function(event,fn){var self=this;this._callbacks=this._callbacks||{};function on(){self.off(event,on);fn.apply(this,arguments)}on.fn=fn;this.on(event,on);return this};Emitter.prototype.off=Emitter.prototype.removeListener=Emitter.prototype.removeAllListeners=Emitter.prototype.removeEventListener=function(event,fn){this._callbacks=this._callbacks||{};if(0==arguments.length){this._callbacks={};return this}var callbacks=this._callbacks[event];if(!callbacks)return this;if(1==arguments.length){delete this._callbacks[event];return this}var cb;for(var i=0;i<callbacks.length;i++){cb=callbacks[i];if(cb===fn||cb.fn===fn){callbacks.splice(i,1);break}}return this};Emitter.prototype.emit=function(event){this._callbacks=this._callbacks||{};var args=[].slice.call(arguments,1),callbacks=this._callbacks[event];if(callbacks){callbacks=callbacks.slice(0);for(var i=0,len=callbacks.length;i<len;++i){callbacks[i].apply(this,args)}}return this};Emitter.prototype.listeners=function(event){this._callbacks=this._callbacks||{};return this._callbacks[event]||[]};Emitter.prototype.hasListeners=function(event){return!!this.listeners(event).length}},{}],16:[function(_dereq_,module,exports){module.exports=function(a,b){var fn=function(){};fn.prototype=b.prototype;a.prototype=new fn;a.prototype.constructor=a}},{}],17:[function(_dereq_,module,exports){exports=module.exports=_dereq_(\"./debug\");exports.log=log;exports.formatArgs=formatArgs;exports.save=save;exports.load=load;exports.useColors=useColors;exports.storage=\"undefined\"!=typeof chrome&&\"undefined\"!=typeof chrome.storage?chrome.storage.local:localstorage();exports.colors=[\"lightseagreen\",\"forestgreen\",\"goldenrod\",\"dodgerblue\",\"darkorchid\",\"crimson\"];function useColors(){return\"WebkitAppearance\"in document.documentElement.style||window.console&&(console.firebug||console.exception&&console.table)||navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)&&parseInt(RegExp.$1,10)>=31}exports.formatters.j=function(v){return JSON.stringify(v)};function formatArgs(){var args=arguments;var useColors=this.useColors;args[0]=(useColors?\"%c\":\"\")+this.namespace+(useColors?\" %c\":\" \")+args[0]+(useColors?\"%c \":\" \")+\"+\"+exports.humanize(this.diff);if(!useColors)return args;var c=\"color: \"+this.color;args=[args[0],c,\"color: inherit\"].concat(Array.prototype.slice.call(args,1));var index=0;var lastC=0;args[0].replace(/%[a-z%]/g,function(match){if(\"%%\"===match)return;index++;if(\"%c\"===match){lastC=index}});args.splice(lastC,0,c);return args}function log(){return\"object\"===typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)}function save(namespaces){try{if(null==namespaces){exports.storage.removeItem(\"debug\")}else{exports.storage.debug=namespaces}}catch(e){}}function load(){var r;try{r=exports.storage.debug}catch(e){}return r}exports.enable(load());function localstorage(){try{return window.localStorage}catch(e){}}},{\"./debug\":18}],18:[function(_dereq_,module,exports){exports=module.exports=debug;exports.coerce=coerce;exports.disable=disable;exports.enable=enable;exports.enabled=enabled;exports.humanize=_dereq_(\"ms\");exports.names=[];exports.skips=[];exports.formatters={};var prevColor=0;var prevTime;function selectColor(){return exports.colors[prevColor++%exports.colors.length]}function debug(namespace){function disabled(){}disabled.enabled=false;function enabled(){var self=enabled;var curr=+new Date;var ms=curr-(prevTime||curr);self.diff=ms;self.prev=prevTime;self.curr=curr;prevTime=curr;if(null==self.useColors)self.useColors=exports.useColors();if(null==self.color&&self.useColors)self.color=selectColor();var args=Array.prototype.slice.call(arguments);args[0]=exports.coerce(args[0]);if(\"string\"!==typeof args[0]){args=[\"%o\"].concat(args)}var index=0;args[0]=args[0].replace(/%([a-z%])/g,function(match,format){if(match===\"%%\")return match;index++;var formatter=exports.formatters[format];if(\"function\"===typeof formatter){var val=args[index];match=formatter.call(self,val);args.splice(index,1);index--}return match});if(\"function\"===typeof exports.formatArgs){args=exports.formatArgs.apply(self,args)}var logFn=enabled.log||exports.log||console.log.bind(console);logFn.apply(self,args)}enabled.enabled=true;var fn=exports.enabled(namespace)?enabled:disabled;fn.namespace=namespace;return fn}function enable(namespaces){exports.save(namespaces);var split=(namespaces||\"\").split(/[\\s,]+/);var len=split.length;for(var i=0;i<len;i++){if(!split[i])continue;namespaces=split[i].replace(/\\*/g,\".*?\");if(namespaces[0]===\"-\"){exports.skips.push(new RegExp(\"^\"+namespaces.substr(1)+\"$\"))}else{exports.names.push(new RegExp(\"^\"+namespaces+\"$\"))}}}function disable(){exports.enable(\"\")}function enabled(name){var i,len;for(i=0,len=exports.skips.length;i<len;i++){if(exports.skips[i].test(name)){return false}}for(i=0,len=exports.names.length;i<len;i++){if(exports.names[i].test(name)){return true}}return false}function coerce(val){if(val instanceof Error)return val.stack||val.message;return val}},{ms:25}],19:[function(_dereq_,module,exports){(function(global){var keys=_dereq_(\"./keys\");var hasBinary=_dereq_(\"has-binary\");var sliceBuffer=_dereq_(\"arraybuffer.slice\");var base64encoder=_dereq_(\"base64-arraybuffer\");var after=_dereq_(\"after\");var utf8=_dereq_(\"utf8\");var isAndroid=navigator.userAgent.match(/Android/i);var isPhantomJS=/PhantomJS/i.test(navigator.userAgent);var dontSendBlobs=isAndroid||isPhantomJS;exports.protocol=3;var packets=exports.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6};var packetslist=keys(packets);var err={type:\"error\",data:\"parser error\"};var Blob=_dereq_(\"blob\");exports.encodePacket=function(packet,supportsBinary,utf8encode,callback){if(\"function\"==typeof supportsBinary){callback=supportsBinary;supportsBinary=false}if(\"function\"==typeof utf8encode){callback=utf8encode;utf8encode=null}var data=packet.data===undefined?undefined:packet.data.buffer||packet.data;if(global.ArrayBuffer&&data instanceof ArrayBuffer){return encodeArrayBuffer(packet,supportsBinary,callback)}else if(Blob&&data instanceof global.Blob){return encodeBlob(packet,supportsBinary,callback)}if(data&&data.base64){return encodeBase64Object(packet,callback)}var encoded=packets[packet.type];if(undefined!==packet.data){encoded+=utf8encode?utf8.encode(String(packet.data)):String(packet.data)}return callback(\"\"+encoded)};function encodeBase64Object(packet,callback){var message=\"b\"+exports.packets[packet.type]+packet.data.data;return callback(message)}function encodeArrayBuffer(packet,supportsBinary,callback){if(!supportsBinary){return exports.encodeBase64Packet(packet,callback)}var data=packet.data;var contentArray=new Uint8Array(data);var resultBuffer=new Uint8Array(1+data.byteLength);resultBuffer[0]=packets[packet.type];for(var i=0;i<contentArray.length;i++){resultBuffer[i+1]=contentArray[i]}return callback(resultBuffer.buffer)}function encodeBlobAsArrayBuffer(packet,supportsBinary,callback){if(!supportsBinary){return exports.encodeBase64Packet(packet,callback)}var fr=new FileReader;fr.onload=function(){packet.data=fr.result;exports.encodePacket(packet,supportsBinary,true,callback)};return fr.readAsArrayBuffer(packet.data)}function encodeBlob(packet,supportsBinary,callback){if(!supportsBinary){return exports.encodeBase64Packet(packet,callback)}if(dontSendBlobs){return encodeBlobAsArrayBuffer(packet,supportsBinary,callback)}var length=new Uint8Array(1);length[0]=packets[packet.type];var blob=new Blob([length.buffer,packet.data]);return callback(blob)}exports.encodeBase64Packet=function(packet,callback){var message=\"b\"+exports.packets[packet.type];if(Blob&&packet.data instanceof global.Blob){var fr=new FileReader;fr.onload=function(){var b64=fr.result.split(\",\")[1];callback(message+b64)};return fr.readAsDataURL(packet.data)}var b64data;try{b64data=String.fromCharCode.apply(null,new Uint8Array(packet.data))}catch(e){var typed=new Uint8Array(packet.data);var basic=new Array(typed.length);for(var i=0;i<typed.length;i++){basic[i]=typed[i]}b64data=String.fromCharCode.apply(null,basic)}message+=global.btoa(b64data);return callback(message)};exports.decodePacket=function(data,binaryType,utf8decode){if(typeof data==\"string\"||data===undefined){if(data.charAt(0)==\"b\"){return exports.decodeBase64Packet(data.substr(1),binaryType)}if(utf8decode){try{data=utf8.decode(data)}catch(e){return err}}var type=data.charAt(0);if(Number(type)!=type||!packetslist[type]){return err}if(data.length>1){return{type:packetslist[type],data:data.substring(1)}}else{return{type:packetslist[type]}}}var asArray=new Uint8Array(data);var type=asArray[0];var rest=sliceBuffer(data,1);if(Blob&&binaryType===\"blob\"){rest=new Blob([rest])}return{type:packetslist[type],data:rest}};exports.decodeBase64Packet=function(msg,binaryType){var type=packetslist[msg.charAt(0)];if(!global.ArrayBuffer){return{type:type,data:{base64:true,data:msg.substr(1)}}}var data=base64encoder.decode(msg.substr(1));if(binaryType===\"blob\"&&Blob){data=new Blob([data])}return{type:type,data:data}};exports.encodePayload=function(packets,supportsBinary,callback){if(typeof supportsBinary==\"function\"){callback=supportsBinary;supportsBinary=null}var isBinary=hasBinary(packets);if(supportsBinary&&isBinary){if(Blob&&!dontSendBlobs){return exports.encodePayloadAsBlob(packets,callback)}return exports.encodePayloadAsArrayBuffer(packets,callback)}if(!packets.length){return callback(\"0:\")}function setLengthHeader(message){return message.length+\":\"+message}function encodeOne(packet,doneCallback){exports.encodePacket(packet,!isBinary?false:supportsBinary,true,function(message){doneCallback(null,setLengthHeader(message))})}map(packets,encodeOne,function(err,results){return callback(results.join(\"\"))})};function map(ary,each,done){var result=new Array(ary.length);var next=after(ary.length,done);var eachWithIndex=function(i,el,cb){each(el,function(error,msg){result[i]=msg;cb(error,result)})};for(var i=0;i<ary.length;i++){eachWithIndex(i,ary[i],next)}}exports.decodePayload=function(data,binaryType,callback){if(typeof data!=\"string\"){return exports.decodePayloadAsBinary(data,binaryType,callback)}if(typeof binaryType===\"function\"){callback=binaryType;binaryType=null}var packet;if(data==\"\"){return callback(err,0,1)}var length=\"\",n,msg;for(var i=0,l=data.length;i<l;i++){var chr=data.charAt(i);if(\":\"!=chr){length+=chr}else{if(\"\"==length||length!=(n=Number(length))){return callback(err,0,1)}msg=data.substr(i+1,n);if(length!=msg.length){return callback(err,0,1)}if(msg.length){packet=exports.decodePacket(msg,binaryType,true);if(err.type==packet.type&&err.data==packet.data){return callback(err,0,1)}var ret=callback(packet,i+n,l);if(false===ret)return}i+=n;length=\"\"}}if(length!=\"\"){return callback(err,0,1)}};exports.encodePayloadAsArrayBuffer=function(packets,callback){if(!packets.length){return callback(new ArrayBuffer(0))}function encodeOne(packet,doneCallback){exports.encodePacket(packet,true,true,function(data){return doneCallback(null,data)})}map(packets,encodeOne,function(err,encodedPackets){var totalLength=encodedPackets.reduce(function(acc,p){var len;if(typeof p===\"string\"){len=p.length}else{len=p.byteLength}return acc+len.toString().length+len+2},0);var resultArray=new Uint8Array(totalLength);var bufferIndex=0;encodedPackets.forEach(function(p){var isString=typeof p===\"string\";var ab=p;if(isString){var view=new Uint8Array(p.length);for(var i=0;i<p.length;i++){view[i]=p.charCodeAt(i)}ab=view.buffer}if(isString){resultArray[bufferIndex++]=0}else{resultArray[bufferIndex++]=1}var lenStr=ab.byteLength.toString();for(var i=0;i<lenStr.length;i++){resultArray[bufferIndex++]=parseInt(lenStr[i])}resultArray[bufferIndex++]=255;var view=new Uint8Array(ab);for(var i=0;i<view.length;i++){resultArray[bufferIndex++]=view[i]}});return callback(resultArray.buffer)})};exports.encodePayloadAsBlob=function(packets,callback){function encodeOne(packet,doneCallback){exports.encodePacket(packet,true,true,function(encoded){var binaryIdentifier=new Uint8Array(1);binaryIdentifier[0]=1;if(typeof encoded===\"string\"){var view=new Uint8Array(encoded.length);for(var i=0;i<encoded.length;i++){view[i]=encoded.charCodeAt(i)}encoded=view.buffer;binaryIdentifier[0]=0}var len=encoded instanceof ArrayBuffer?encoded.byteLength:encoded.size;var lenStr=len.toString();var lengthAry=new Uint8Array(lenStr.length+1);for(var i=0;i<lenStr.length;i++){lengthAry[i]=parseInt(lenStr[i])}lengthAry[lenStr.length]=255;if(Blob){var blob=new Blob([binaryIdentifier.buffer,lengthAry.buffer,encoded]);doneCallback(null,blob)}})}map(packets,encodeOne,function(err,results){return callback(new Blob(results))})};exports.decodePayloadAsBinary=function(data,binaryType,callback){if(typeof binaryType===\"function\"){callback=binaryType;binaryType=null}var bufferTail=data;var buffers=[];var numberTooLong=false;while(bufferTail.byteLength>0){var tailArray=new Uint8Array(bufferTail);var isString=tailArray[0]===0;var msgLength=\"\";for(var i=1;;i++){if(tailArray[i]==255)break;if(msgLength.length>310){numberTooLong=true;break}msgLength+=tailArray[i]}if(numberTooLong)return callback(err,0,1);bufferTail=sliceBuffer(bufferTail,2+msgLength.length);msgLength=parseInt(msgLength);var msg=sliceBuffer(bufferTail,0,msgLength);if(isString){try{msg=String.fromCharCode.apply(null,new Uint8Array(msg))}catch(e){var typed=new Uint8Array(msg);msg=\"\";for(var i=0;i<typed.length;i++){msg+=String.fromCharCode(typed[i])}}}buffers.push(msg);bufferTail=sliceBuffer(bufferTail,msgLength)}var total=buffers.length;buffers.forEach(function(buffer,i){callback(exports.decodePacket(buffer,binaryType,true),i,total)})}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{\"./keys\":20,after:11,\"arraybuffer.slice\":12,\"base64-arraybuffer\":13,blob:14,\"has-binary\":21,utf8:29}],20:[function(_dereq_,module,exports){module.exports=Object.keys||function keys(obj){var arr=[];var has=Object.prototype.hasOwnProperty;for(var i in obj){if(has.call(obj,i)){arr.push(i)}}return arr}},{}],21:[function(_dereq_,module,exports){(function(global){var isArray=_dereq_(\"isarray\");module.exports=hasBinary;function hasBinary(data){function _hasBinary(obj){if(!obj)return false;if(global.Buffer&&global.Buffer.isBuffer(obj)||global.ArrayBuffer&&obj instanceof ArrayBuffer||global.Blob&&obj instanceof Blob||global.File&&obj instanceof File){return true}if(isArray(obj)){for(var i=0;i<obj.length;i++){if(_hasBinary(obj[i])){return true}}}else if(obj&&\"object\"==typeof obj){if(obj.toJSON){obj=obj.toJSON()}for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)&&_hasBinary(obj[key])){return true}}}return false}return _hasBinary(data)}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{isarray:24}],22:[function(_dereq_,module,exports){try{module.exports=typeof XMLHttpRequest!==\"undefined\"&&\"withCredentials\"in new XMLHttpRequest}catch(err){module.exports=false}},{}],23:[function(_dereq_,module,exports){var indexOf=[].indexOf;module.exports=function(arr,obj){if(indexOf)return arr.indexOf(obj);for(var i=0;i<arr.length;++i){if(arr[i]===obj)return i}return-1}},{}],24:[function(_dereq_,module,exports){module.exports=Array.isArray||function(arr){return Object.prototype.toString.call(arr)==\"[object Array]\"}},{}],25:[function(_dereq_,module,exports){var s=1e3;var m=s*60;var h=m*60;var d=h*24;var y=d*365.25;module.exports=function(val,options){options=options||{};if(\"string\"==typeof val)return parse(val);return options.long?long(val):short(val)};function parse(str){str=\"\"+str;if(str.length>1e4)return;var match=/^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);if(!match)return;var n=parseFloat(match[1]);var type=(match[2]||\"ms\").toLowerCase();switch(type){case\"years\":case\"year\":case\"yrs\":case\"yr\":case\"y\":return n*y;case\"days\":case\"day\":case\"d\":return n*d;case\"hours\":case\"hour\":case\"hrs\":case\"hr\":case\"h\":return n*h;case\"minutes\":case\"minute\":case\"mins\":case\"min\":case\"m\":return n*m;case\"seconds\":case\"second\":case\"secs\":case\"sec\":case\"s\":return n*s;case\"milliseconds\":case\"millisecond\":case\"msecs\":case\"msec\":case\"ms\":return n}}function short(ms){if(ms>=d)return Math.round(ms/d)+\"d\";if(ms>=h)return Math.round(ms/h)+\"h\";if(ms>=m)return Math.round(ms/m)+\"m\";if(ms>=s)return Math.round(ms/s)+\"s\";return ms+\"ms\"}function long(ms){return plural(ms,d,\"day\")||plural(ms,h,\"hour\")||plural(ms,m,\"minute\")||plural(ms,s,\"second\")||ms+\" ms\"}function plural(ms,n,name){if(ms<n)return;if(ms<n*1.5)return Math.floor(ms/n)+\" \"+name;return Math.ceil(ms/n)+\" \"+name+\"s\"}},{}],26:[function(_dereq_,module,exports){(function(global){var rvalidchars=/^[\\],:{}\\s]*$/;var rvalidescape=/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g;var rvalidtokens=/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g;var rvalidbraces=/(?:^|:|,)(?:\\s*\\[)+/g;var rtrimLeft=/^\\s+/;var rtrimRight=/\\s+$/;module.exports=function parsejson(data){if(\"string\"!=typeof data||!data){return null}data=data.replace(rtrimLeft,\"\").replace(rtrimRight,\"\");if(global.JSON&&JSON.parse){return JSON.parse(data)}if(rvalidchars.test(data.replace(rvalidescape,\"@\").replace(rvalidtokens,\"]\").replace(rvalidbraces,\"\"))){return new Function(\"return \"+data)()}}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{}],27:[function(_dereq_,module,exports){exports.encode=function(obj){var str=\"\";for(var i in obj){if(obj.hasOwnProperty(i)){if(str.length)str+=\"&\";str+=encodeURIComponent(i)+\"=\"+encodeURIComponent(obj[i])}}return str};exports.decode=function(qs){var qry={};var pairs=qs.split(\"&\");for(var i=0,l=pairs.length;i<l;i++){var pair=pairs[i].split(\"=\");qry[decodeURIComponent(pair[0])]=decodeURIComponent(pair[1])}return qry}},{}],28:[function(_dereq_,module,exports){var re=/^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;var parts=[\"source\",\"protocol\",\"authority\",\"userInfo\",\"user\",\"password\",\"host\",\"port\",\"relative\",\"path\",\"directory\",\"file\",\"query\",\"anchor\"];module.exports=function parseuri(str){var src=str,b=str.indexOf(\"[\"),e=str.indexOf(\"]\");if(b!=-1&&e!=-1){str=str.substring(0,b)+str.substring(b,e).replace(/:/g,\";\")+str.substring(e,str.length)}var m=re.exec(str||\"\"),uri={},i=14;while(i--){uri[parts[i]]=m[i]||\"\"}if(b!=-1&&e!=-1){uri.source=src;uri.host=uri.host.substring(1,uri.host.length-1).replace(/;/g,\":\");uri.authority=uri.authority.replace(\"[\",\"\").replace(\"]\",\"\").replace(/;/g,\":\");uri.ipv6uri=true}return uri}},{}],29:[function(_dereq_,module,exports){(function(global){(function(root){var freeExports=typeof exports==\"object\"&&exports;var freeModule=typeof module==\"object\"&&module&&module.exports==freeExports&&module;var freeGlobal=typeof global==\"object\"&&global;if(freeGlobal.global===freeGlobal||freeGlobal.window===freeGlobal){root=freeGlobal}var stringFromCharCode=String.fromCharCode;function ucs2decode(string){var output=[];var counter=0;var length=string.length;var value;var extra;while(counter<length){value=string.charCodeAt(counter++);if(value>=55296&&value<=56319&&counter<length){extra=string.charCodeAt(counter++);if((extra&64512)==56320){output.push(((value&1023)<<10)+(extra&1023)+65536)}else{output.push(value);counter--}}else{output.push(value)}}return output}function ucs2encode(array){var length=array.length;var index=-1;var value;var output=\"\";while(++index<length){value=array[index];if(value>65535){value-=65536;output+=stringFromCharCode(value>>>10&1023|55296);value=56320|value&1023}output+=stringFromCharCode(value)}return output}function checkScalarValue(codePoint){if(codePoint>=55296&&codePoint<=57343){throw Error(\"Lone surrogate U+\"+codePoint.toString(16).toUpperCase()+\" is not a scalar value\")}}function createByte(codePoint,shift){return stringFromCharCode(codePoint>>shift&63|128)}function encodeCodePoint(codePoint){if((codePoint&4294967168)==0){return stringFromCharCode(codePoint)}var symbol=\"\";if((codePoint&4294965248)==0){symbol=stringFromCharCode(codePoint>>6&31|192)}else if((codePoint&4294901760)==0){checkScalarValue(codePoint);symbol=stringFromCharCode(codePoint>>12&15|224);symbol+=createByte(codePoint,6)}else if((codePoint&4292870144)==0){symbol=stringFromCharCode(codePoint>>18&7|240);symbol+=createByte(codePoint,12);symbol+=createByte(codePoint,6)}symbol+=stringFromCharCode(codePoint&63|128);return symbol}function utf8encode(string){var codePoints=ucs2decode(string);var length=codePoints.length;var index=-1;var codePoint;var byteString=\"\";while(++index<length){codePoint=codePoints[index];byteString+=encodeCodePoint(codePoint)}return byteString}function readContinuationByte(){if(byteIndex>=byteCount){throw Error(\"Invalid byte index\")}var continuationByte=byteArray[byteIndex]&255;byteIndex++;if((continuationByte&192)==128){return continuationByte&63}throw Error(\"Invalid continuation byte\")}function decodeSymbol(){var byte1;var byte2;var byte3;var byte4;var codePoint;if(byteIndex>byteCount){throw Error(\"Invalid byte index\")}if(byteIndex==byteCount){return false}byte1=byteArray[byteIndex]&255;byteIndex++;if((byte1&128)==0){return byte1}if((byte1&224)==192){var byte2=readContinuationByte();codePoint=(byte1&31)<<6|byte2;if(codePoint>=128){return codePoint}else{throw Error(\"Invalid continuation byte\")}}if((byte1&240)==224){byte2=readContinuationByte();byte3=readContinuationByte();codePoint=(byte1&15)<<12|byte2<<6|byte3;if(codePoint>=2048){checkScalarValue(codePoint);return codePoint}else{throw Error(\"Invalid continuation byte\")}}if((byte1&248)==240){byte2=readContinuationByte();byte3=readContinuationByte();byte4=readContinuationByte();codePoint=(byte1&15)<<18|byte2<<12|byte3<<6|byte4;if(codePoint>=65536&&codePoint<=1114111){return codePoint}}throw Error(\"Invalid UTF-8 detected\")}var byteArray;var byteCount;var byteIndex;function utf8decode(byteString){byteArray=ucs2decode(byteString);byteCount=byteArray.length;byteIndex=0;var codePoints=[];var tmp;while((tmp=decodeSymbol())!==false){codePoints.push(tmp)}return ucs2encode(codePoints)}var utf8={version:\"2.0.0\",encode:utf8encode,decode:utf8decode};if(typeof define==\"function\"&&typeof define.amd==\"object\"&&define.amd){define(function(){return utf8})}else if(freeExports&&!freeExports.nodeType){if(freeModule){freeModule.exports=utf8}else{var object={};var hasOwnProperty=object.hasOwnProperty;for(var key in utf8){hasOwnProperty.call(utf8,key)&&(freeExports[key]=utf8[key])}}}else{root.utf8=utf8}})(this)}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{}],30:[function(_dereq_,module,exports){\"use strict\";var alphabet=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_\".split(\"\"),length=64,map={},seed=0,i=0,prev;function encode(num){var encoded=\"\";do{encoded=alphabet[num%length]+encoded;num=Math.floor(num/length)}while(num>0);return encoded}function decode(str){var decoded=0;for(i=0;i<str.length;i++){decoded=decoded*length+map[str.charAt(i)]}return decoded}function yeast(){var now=encode(+new Date);if(now!==prev)return seed=0,prev=now;return now+\".\"+encode(seed++)}for(;i<length;i++)map[alphabet[i]]=i;yeast.encode=encode;yeast.decode=decode;module.exports=yeast},{}],31:[function(_dereq_,module,exports){var url=_dereq_(\"./url\");var parser=_dereq_(\"socket.io-parser\");var Manager=_dereq_(\"./manager\");var debug=_dereq_(\"debug\")(\"socket.io-client\");module.exports=exports=lookup;var cache=exports.managers={};function lookup(uri,opts){if(typeof uri==\"object\"){opts=uri;uri=undefined}opts=opts||{};var parsed=url(uri);var source=parsed.source;var id=parsed.id;var path=parsed.path;var sameNamespace=cache[id]&&path in cache[id].nsps;var newConnection=opts.forceNew||opts[\"force new connection\"]||false===opts.multiplex||sameNamespace;var io;if(newConnection){debug(\"ignoring socket cache for %s\",source);io=Manager(source,opts)}else{if(!cache[id]){debug(\"new io instance for %s\",source);cache[id]=Manager(source,opts)}io=cache[id]}return io.socket(parsed.path)}exports.protocol=parser.protocol;exports.connect=lookup;exports.Manager=_dereq_(\"./manager\");exports.Socket=_dereq_(\"./socket\")},{\"./manager\":32,\"./socket\":34,\"./url\":35,debug:39,\"socket.io-parser\":47}],32:[function(_dereq_,module,exports){var eio=_dereq_(\"engine.io-client\");var Socket=_dereq_(\"./socket\");var Emitter=_dereq_(\"component-emitter\");var parser=_dereq_(\"socket.io-parser\");var on=_dereq_(\"./on\");var bind=_dereq_(\"component-bind\");var debug=_dereq_(\"debug\")(\"socket.io-client:manager\");var indexOf=_dereq_(\"indexof\");var Backoff=_dereq_(\"backo2\");var has=Object.prototype.hasOwnProperty;module.exports=Manager;function Manager(uri,opts){if(!(this instanceof Manager))return new Manager(uri,opts);if(uri&&\"object\"==typeof uri){opts=uri;uri=undefined}opts=opts||{};opts.path=opts.path||\"/socket.io\";this.nsps={};this.subs=[];this.opts=opts;this.reconnection(opts.reconnection!==false);this.reconnectionAttempts(opts.reconnectionAttempts||Infinity);this.reconnectionDelay(opts.reconnectionDelay||1e3);this.reconnectionDelayMax(opts.reconnectionDelayMax||5e3);this.randomizationFactor(opts.randomizationFactor||.5);this.backoff=new Backoff({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()});this.timeout(null==opts.timeout?2e4:opts.timeout);this.readyState=\"closed\";this.uri=uri;this.connecting=[];this.lastPing=null;this.encoding=false;this.packetBuffer=[];this.encoder=new parser.Encoder;this.decoder=new parser.Decoder;this.autoConnect=opts.autoConnect!==false;if(this.autoConnect)this.open()}Manager.prototype.emitAll=function(){this.emit.apply(this,arguments);for(var nsp in this.nsps){if(has.call(this.nsps,nsp)){this.nsps[nsp].emit.apply(this.nsps[nsp],arguments)}}};Manager.prototype.updateSocketIds=function(){for(var nsp in this.nsps){if(has.call(this.nsps,nsp)){this.nsps[nsp].id=this.engine.id}}};Emitter(Manager.prototype);Manager.prototype.reconnection=function(v){if(!arguments.length)return this._reconnection;this._reconnection=!!v;return this};Manager.prototype.reconnectionAttempts=function(v){if(!arguments.length)return this._reconnectionAttempts;this._reconnectionAttempts=v;return this};Manager.prototype.reconnectionDelay=function(v){if(!arguments.length)return this._reconnectionDelay;this._reconnectionDelay=v;this.backoff&&this.backoff.setMin(v);return this};Manager.prototype.randomizationFactor=function(v){if(!arguments.length)return this._randomizationFactor;this._randomizationFactor=v;this.backoff&&this.backoff.setJitter(v);return this};Manager.prototype.reconnectionDelayMax=function(v){if(!arguments.length)return this._reconnectionDelayMax;this._reconnectionDelayMax=v;this.backoff&&this.backoff.setMax(v);return this};Manager.prototype.timeout=function(v){if(!arguments.length)return this._timeout;this._timeout=v;return this};Manager.prototype.maybeReconnectOnOpen=function(){if(!this.reconnecting&&this._reconnection&&this.backoff.attempts===0){this.reconnect()}};Manager.prototype.open=Manager.prototype.connect=function(fn){debug(\"readyState %s\",this.readyState);if(~this.readyState.indexOf(\"open\"))return this;debug(\"opening %s\",this.uri);this.engine=eio(this.uri,this.opts);var socket=this.engine;var self=this;this.readyState=\"opening\";this.skipReconnect=false;var openSub=on(socket,\"open\",function(){self.onopen();fn&&fn()});var errorSub=on(socket,\"error\",function(data){debug(\"connect_error\");self.cleanup();self.readyState=\"closed\";self.emitAll(\"connect_error\",data);if(fn){var err=new Error(\"Connection error\");err.data=data;fn(err)}else{self.maybeReconnectOnOpen()}});if(false!==this._timeout){var timeout=this._timeout;debug(\"connect attempt will timeout after %d\",timeout);var timer=setTimeout(function(){debug(\"connect attempt timed out after %d\",timeout);openSub.destroy();socket.close();socket.emit(\"error\",\"timeout\");self.emitAll(\"connect_timeout\",timeout)},timeout);this.subs.push({destroy:function(){clearTimeout(timer)}})}this.subs.push(openSub);this.subs.push(errorSub);return this};Manager.prototype.onopen=function(){debug(\"open\");this.cleanup();this.readyState=\"open\";this.emit(\"open\");var socket=this.engine;this.subs.push(on(socket,\"data\",bind(this,\"ondata\")));this.subs.push(on(socket,\"ping\",bind(this,\"onping\")));this.subs.push(on(socket,\"pong\",bind(this,\"onpong\")));this.subs.push(on(socket,\"error\",bind(this,\"onerror\")));this.subs.push(on(socket,\"close\",bind(this,\"onclose\")));this.subs.push(on(this.decoder,\"decoded\",bind(this,\"ondecoded\")))};Manager.prototype.onping=function(){this.lastPing=new Date;this.emitAll(\"ping\")};Manager.prototype.onpong=function(){this.emitAll(\"pong\",new Date-this.lastPing)};Manager.prototype.ondata=function(data){this.decoder.add(data)};Manager.prototype.ondecoded=function(packet){this.emit(\"packet\",packet)};Manager.prototype.onerror=function(err){debug(\"error\",err);this.emitAll(\"error\",err)};Manager.prototype.socket=function(nsp){var socket=this.nsps[nsp];if(!socket){socket=new Socket(this,nsp);this.nsps[nsp]=socket;var self=this;socket.on(\"connecting\",onConnecting);\nsocket.on(\"connect\",function(){socket.id=self.engine.id});if(this.autoConnect){onConnecting()}}function onConnecting(){if(!~indexOf(self.connecting,socket)){self.connecting.push(socket)}}return socket};Manager.prototype.destroy=function(socket){var index=indexOf(this.connecting,socket);if(~index)this.connecting.splice(index,1);if(this.connecting.length)return;this.close()};Manager.prototype.packet=function(packet){debug(\"writing packet %j\",packet);var self=this;if(!self.encoding){self.encoding=true;this.encoder.encode(packet,function(encodedPackets){for(var i=0;i<encodedPackets.length;i++){self.engine.write(encodedPackets[i],packet.options)}self.encoding=false;self.processPacketQueue()})}else{self.packetBuffer.push(packet)}};Manager.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var pack=this.packetBuffer.shift();this.packet(pack)}};Manager.prototype.cleanup=function(){debug(\"cleanup\");var sub;while(sub=this.subs.shift())sub.destroy();this.packetBuffer=[];this.encoding=false;this.lastPing=null;this.decoder.destroy()};Manager.prototype.close=Manager.prototype.disconnect=function(){debug(\"disconnect\");this.skipReconnect=true;this.reconnecting=false;if(\"opening\"==this.readyState){this.cleanup()}this.backoff.reset();this.readyState=\"closed\";if(this.engine)this.engine.close()};Manager.prototype.onclose=function(reason){debug(\"onclose\");this.cleanup();this.backoff.reset();this.readyState=\"closed\";this.emit(\"close\",reason);if(this._reconnection&&!this.skipReconnect){this.reconnect()}};Manager.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var self=this;if(this.backoff.attempts>=this._reconnectionAttempts){debug(\"reconnect failed\");this.backoff.reset();this.emitAll(\"reconnect_failed\");this.reconnecting=false}else{var delay=this.backoff.duration();debug(\"will wait %dms before reconnect attempt\",delay);this.reconnecting=true;var timer=setTimeout(function(){if(self.skipReconnect)return;debug(\"attempting reconnect\");self.emitAll(\"reconnect_attempt\",self.backoff.attempts);self.emitAll(\"reconnecting\",self.backoff.attempts);if(self.skipReconnect)return;self.open(function(err){if(err){debug(\"reconnect attempt error\");self.reconnecting=false;self.reconnect();self.emitAll(\"reconnect_error\",err.data)}else{debug(\"reconnect success\");self.onreconnect()}})},delay);this.subs.push({destroy:function(){clearTimeout(timer)}})}};Manager.prototype.onreconnect=function(){var attempt=this.backoff.attempts;this.reconnecting=false;this.backoff.reset();this.updateSocketIds();this.emitAll(\"reconnect\",attempt)}},{\"./on\":33,\"./socket\":34,backo2:36,\"component-bind\":37,\"component-emitter\":38,debug:39,\"engine.io-client\":1,indexof:42,\"socket.io-parser\":47}],33:[function(_dereq_,module,exports){module.exports=on;function on(obj,ev,fn){obj.on(ev,fn);return{destroy:function(){obj.removeListener(ev,fn)}}}},{}],34:[function(_dereq_,module,exports){var parser=_dereq_(\"socket.io-parser\");var Emitter=_dereq_(\"component-emitter\");var toArray=_dereq_(\"to-array\");var on=_dereq_(\"./on\");var bind=_dereq_(\"component-bind\");var debug=_dereq_(\"debug\")(\"socket.io-client:socket\");var hasBin=_dereq_(\"has-binary\");module.exports=exports=Socket;var events={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1};var emit=Emitter.prototype.emit;function Socket(io,nsp){this.io=io;this.nsp=nsp;this.json=this;this.ids=0;this.acks={};this.receiveBuffer=[];this.sendBuffer=[];this.connected=false;this.disconnected=true;if(this.io.autoConnect)this.open()}Emitter(Socket.prototype);Socket.prototype.subEvents=function(){if(this.subs)return;var io=this.io;this.subs=[on(io,\"open\",bind(this,\"onopen\")),on(io,\"packet\",bind(this,\"onpacket\")),on(io,\"close\",bind(this,\"onclose\"))]};Socket.prototype.open=Socket.prototype.connect=function(){if(this.connected)return this;this.subEvents();this.io.open();if(\"open\"==this.io.readyState)this.onopen();this.emit(\"connecting\");return this};Socket.prototype.send=function(){var args=toArray(arguments);args.unshift(\"message\");this.emit.apply(this,args);return this};Socket.prototype.emit=function(ev){if(events.hasOwnProperty(ev)){emit.apply(this,arguments);return this}var args=toArray(arguments);var parserType=parser.EVENT;if(hasBin(args)){parserType=parser.BINARY_EVENT}var packet={type:parserType,data:args};packet.options={};packet.options.compress=!this.flags||false!==this.flags.compress;if(\"function\"==typeof args[args.length-1]){debug(\"emitting packet with ack id %d\",this.ids);this.acks[this.ids]=args.pop();packet.id=this.ids++}if(this.connected){this.packet(packet)}else{this.sendBuffer.push(packet)}delete this.flags;return this};Socket.prototype.packet=function(packet){packet.nsp=this.nsp;this.io.packet(packet)};Socket.prototype.onopen=function(){debug(\"transport is open - connecting\");if(\"/\"!=this.nsp){this.packet({type:parser.CONNECT})}};Socket.prototype.onclose=function(reason){debug(\"close (%s)\",reason);this.connected=false;this.disconnected=true;delete this.id;this.emit(\"disconnect\",reason)};Socket.prototype.onpacket=function(packet){if(packet.nsp!=this.nsp)return;switch(packet.type){case parser.CONNECT:this.onconnect();break;case parser.EVENT:this.onevent(packet);break;case parser.BINARY_EVENT:this.onevent(packet);break;case parser.ACK:this.onack(packet);break;case parser.BINARY_ACK:this.onack(packet);break;case parser.DISCONNECT:this.ondisconnect();break;case parser.ERROR:this.emit(\"error\",packet.data);break}};Socket.prototype.onevent=function(packet){var args=packet.data||[];debug(\"emitting event %j\",args);if(null!=packet.id){debug(\"attaching ack callback to event\");args.push(this.ack(packet.id))}if(this.connected){emit.apply(this,args)}else{this.receiveBuffer.push(args)}};Socket.prototype.ack=function(id){var self=this;var sent=false;return function(){if(sent)return;sent=true;var args=toArray(arguments);debug(\"sending ack %j\",args);var type=hasBin(args)?parser.BINARY_ACK:parser.ACK;self.packet({type:type,id:id,data:args})}};Socket.prototype.onack=function(packet){var ack=this.acks[packet.id];if(\"function\"==typeof ack){debug(\"calling ack %s with %j\",packet.id,packet.data);ack.apply(this,packet.data);delete this.acks[packet.id]}else{debug(\"bad ack %s\",packet.id)}};Socket.prototype.onconnect=function(){this.connected=true;this.disconnected=false;this.emit(\"connect\");this.emitBuffered()};Socket.prototype.emitBuffered=function(){var i;for(i=0;i<this.receiveBuffer.length;i++){emit.apply(this,this.receiveBuffer[i])}this.receiveBuffer=[];for(i=0;i<this.sendBuffer.length;i++){this.packet(this.sendBuffer[i])}this.sendBuffer=[]};Socket.prototype.ondisconnect=function(){debug(\"server disconnect (%s)\",this.nsp);this.destroy();this.onclose(\"io server disconnect\")};Socket.prototype.destroy=function(){if(this.subs){for(var i=0;i<this.subs.length;i++){this.subs[i].destroy()}this.subs=null}this.io.destroy(this)};Socket.prototype.close=Socket.prototype.disconnect=function(){if(this.connected){debug(\"performing disconnect (%s)\",this.nsp);this.packet({type:parser.DISCONNECT})}this.destroy();if(this.connected){this.onclose(\"io client disconnect\")}return this};Socket.prototype.compress=function(compress){this.flags=this.flags||{};this.flags.compress=compress;return this}},{\"./on\":33,\"component-bind\":37,\"component-emitter\":38,debug:39,\"has-binary\":41,\"socket.io-parser\":47,\"to-array\":51}],35:[function(_dereq_,module,exports){(function(global){var parseuri=_dereq_(\"parseuri\");var debug=_dereq_(\"debug\")(\"socket.io-client:url\");module.exports=url;function url(uri,loc){var obj=uri;var loc=loc||global.location;if(null==uri)uri=loc.protocol+\"//\"+loc.host;if(\"string\"==typeof uri){if(\"/\"==uri.charAt(0)){if(\"/\"==uri.charAt(1)){uri=loc.protocol+uri}else{uri=loc.host+uri}}if(!/^(https?|wss?):\\/\\//.test(uri)){debug(\"protocol-less url %s\",uri);if(\"undefined\"!=typeof loc){uri=loc.protocol+\"//\"+uri}else{uri=\"https://\"+uri}}debug(\"parse %s\",uri);obj=parseuri(uri)}if(!obj.port){if(/^(http|ws)$/.test(obj.protocol)){obj.port=\"80\"}else if(/^(http|ws)s$/.test(obj.protocol)){obj.port=\"443\"}}obj.path=obj.path||\"/\";var ipv6=obj.host.indexOf(\":\")!==-1;var host=ipv6?\"[\"+obj.host+\"]\":obj.host;obj.id=obj.protocol+\"://\"+host+\":\"+obj.port;obj.href=obj.protocol+\"://\"+host+(loc&&loc.port==obj.port?\"\":\":\"+obj.port);return obj}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{debug:39,parseuri:45}],36:[function(_dereq_,module,exports){module.exports=Backoff;function Backoff(opts){opts=opts||{};this.ms=opts.min||100;this.max=opts.max||1e4;this.factor=opts.factor||2;this.jitter=opts.jitter>0&&opts.jitter<=1?opts.jitter:0;this.attempts=0}Backoff.prototype.duration=function(){var ms=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var rand=Math.random();var deviation=Math.floor(rand*this.jitter*ms);ms=(Math.floor(rand*10)&1)==0?ms-deviation:ms+deviation}return Math.min(ms,this.max)|0};Backoff.prototype.reset=function(){this.attempts=0};Backoff.prototype.setMin=function(min){this.ms=min};Backoff.prototype.setMax=function(max){this.max=max};Backoff.prototype.setJitter=function(jitter){this.jitter=jitter}},{}],37:[function(_dereq_,module,exports){var slice=[].slice;module.exports=function(obj,fn){if(\"string\"==typeof fn)fn=obj[fn];if(\"function\"!=typeof fn)throw new Error(\"bind() requires a function\");var args=slice.call(arguments,2);return function(){return fn.apply(obj,args.concat(slice.call(arguments)))}}},{}],38:[function(_dereq_,module,exports){module.exports=Emitter;function Emitter(obj){if(obj)return mixin(obj)}function mixin(obj){for(var key in Emitter.prototype){obj[key]=Emitter.prototype[key]}return obj}Emitter.prototype.on=Emitter.prototype.addEventListener=function(event,fn){this._callbacks=this._callbacks||{};(this._callbacks[\"$\"+event]=this._callbacks[\"$\"+event]||[]).push(fn);return this};Emitter.prototype.once=function(event,fn){function on(){this.off(event,on);fn.apply(this,arguments)}on.fn=fn;this.on(event,on);return this};Emitter.prototype.off=Emitter.prototype.removeListener=Emitter.prototype.removeAllListeners=Emitter.prototype.removeEventListener=function(event,fn){this._callbacks=this._callbacks||{};if(0==arguments.length){this._callbacks={};return this}var callbacks=this._callbacks[\"$\"+event];if(!callbacks)return this;if(1==arguments.length){delete this._callbacks[\"$\"+event];return this}var cb;for(var i=0;i<callbacks.length;i++){cb=callbacks[i];if(cb===fn||cb.fn===fn){callbacks.splice(i,1);break}}return this};Emitter.prototype.emit=function(event){this._callbacks=this._callbacks||{};var args=[].slice.call(arguments,1),callbacks=this._callbacks[\"$\"+event];if(callbacks){callbacks=callbacks.slice(0);for(var i=0,len=callbacks.length;i<len;++i){callbacks[i].apply(this,args)}}return this};Emitter.prototype.listeners=function(event){this._callbacks=this._callbacks||{};return this._callbacks[\"$\"+event]||[]};Emitter.prototype.hasListeners=function(event){return!!this.listeners(event).length}},{}],39:[function(_dereq_,module,exports){arguments[4][17][0].apply(exports,arguments)},{\"./debug\":40,dup:17}],40:[function(_dereq_,module,exports){arguments[4][18][0].apply(exports,arguments)},{dup:18,ms:44}],41:[function(_dereq_,module,exports){(function(global){var isArray=_dereq_(\"isarray\");module.exports=hasBinary;function hasBinary(data){function _hasBinary(obj){if(!obj)return false;if(global.Buffer&&global.Buffer.isBuffer&&global.Buffer.isBuffer(obj)||global.ArrayBuffer&&obj instanceof ArrayBuffer||global.Blob&&obj instanceof Blob||global.File&&obj instanceof File){return true}if(isArray(obj)){for(var i=0;i<obj.length;i++){if(_hasBinary(obj[i])){return true}}}else if(obj&&\"object\"==typeof obj){if(obj.toJSON&&\"function\"==typeof obj.toJSON){obj=obj.toJSON()}for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)&&_hasBinary(obj[key])){return true}}}return false}return _hasBinary(data)}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{isarray:43}],42:[function(_dereq_,module,exports){arguments[4][23][0].apply(exports,arguments)},{dup:23}],43:[function(_dereq_,module,exports){arguments[4][24][0].apply(exports,arguments)},{dup:24}],44:[function(_dereq_,module,exports){arguments[4][25][0].apply(exports,arguments)},{dup:25}],45:[function(_dereq_,module,exports){arguments[4][28][0].apply(exports,arguments)},{dup:28}],46:[function(_dereq_,module,exports){(function(global){var isArray=_dereq_(\"isarray\");var isBuf=_dereq_(\"./is-buffer\");exports.deconstructPacket=function(packet){var buffers=[];var packetData=packet.data;function _deconstructPacket(data){if(!data)return data;if(isBuf(data)){var placeholder={_placeholder:true,num:buffers.length};buffers.push(data);return placeholder}else if(isArray(data)){var newData=new Array(data.length);for(var i=0;i<data.length;i++){newData[i]=_deconstructPacket(data[i])}return newData}else if(\"object\"==typeof data&&!(data instanceof Date)){var newData={};for(var key in data){newData[key]=_deconstructPacket(data[key])}return newData}return data}var pack=packet;pack.data=_deconstructPacket(packetData);pack.attachments=buffers.length;return{packet:pack,buffers:buffers}};exports.reconstructPacket=function(packet,buffers){var curPlaceHolder=0;function _reconstructPacket(data){if(data&&data._placeholder){var buf=buffers[data.num];return buf}else if(isArray(data)){for(var i=0;i<data.length;i++){data[i]=_reconstructPacket(data[i])}return data}else if(data&&\"object\"==typeof data){for(var key in data){data[key]=_reconstructPacket(data[key])}return data}return data}packet.data=_reconstructPacket(packet.data);packet.attachments=undefined;return packet};exports.removeBlobs=function(data,callback){function _removeBlobs(obj,curKey,containingObject){if(!obj)return obj;if(global.Blob&&obj instanceof Blob||global.File&&obj instanceof File){pendingBlobs++;var fileReader=new FileReader;fileReader.onload=function(){if(containingObject){containingObject[curKey]=this.result}else{bloblessData=this.result}if(!--pendingBlobs){callback(bloblessData)}};fileReader.readAsArrayBuffer(obj)}else if(isArray(obj)){for(var i=0;i<obj.length;i++){_removeBlobs(obj[i],i,obj)}}else if(obj&&\"object\"==typeof obj&&!isBuf(obj)){for(var key in obj){_removeBlobs(obj[key],key,obj)}}}var pendingBlobs=0;var bloblessData=data;_removeBlobs(bloblessData);if(!pendingBlobs){callback(bloblessData)}}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{\"./is-buffer\":48,isarray:43}],47:[function(_dereq_,module,exports){var debug=_dereq_(\"debug\")(\"socket.io-parser\");var json=_dereq_(\"json3\");var isArray=_dereq_(\"isarray\");var Emitter=_dereq_(\"component-emitter\");var binary=_dereq_(\"./binary\");var isBuf=_dereq_(\"./is-buffer\");exports.protocol=4;exports.types=[\"CONNECT\",\"DISCONNECT\",\"EVENT\",\"BINARY_EVENT\",\"ACK\",\"BINARY_ACK\",\"ERROR\"];exports.CONNECT=0;exports.DISCONNECT=1;exports.EVENT=2;exports.ACK=3;exports.ERROR=4;exports.BINARY_EVENT=5;exports.BINARY_ACK=6;exports.Encoder=Encoder;exports.Decoder=Decoder;function Encoder(){}Encoder.prototype.encode=function(obj,callback){debug(\"encoding packet %j\",obj);if(exports.BINARY_EVENT==obj.type||exports.BINARY_ACK==obj.type){encodeAsBinary(obj,callback)}else{var encoding=encodeAsString(obj);callback([encoding])}};function encodeAsString(obj){var str=\"\";var nsp=false;str+=obj.type;if(exports.BINARY_EVENT==obj.type||exports.BINARY_ACK==obj.type){str+=obj.attachments;str+=\"-\"}if(obj.nsp&&\"/\"!=obj.nsp){nsp=true;str+=obj.nsp}if(null!=obj.id){if(nsp){str+=\",\";nsp=false}str+=obj.id}if(null!=obj.data){if(nsp)str+=\",\";str+=json.stringify(obj.data)}debug(\"encoded %j as %s\",obj,str);return str}function encodeAsBinary(obj,callback){function writeEncoding(bloblessData){var deconstruction=binary.deconstructPacket(bloblessData);var pack=encodeAsString(deconstruction.packet);var buffers=deconstruction.buffers;buffers.unshift(pack);callback(buffers)}binary.removeBlobs(obj,writeEncoding)}function Decoder(){this.reconstructor=null}Emitter(Decoder.prototype);Decoder.prototype.add=function(obj){var packet;if(\"string\"==typeof obj){packet=decodeString(obj);if(exports.BINARY_EVENT==packet.type||exports.BINARY_ACK==packet.type){this.reconstructor=new BinaryReconstructor(packet);if(this.reconstructor.reconPack.attachments===0){this.emit(\"decoded\",packet)}}else{this.emit(\"decoded\",packet)}}else if(isBuf(obj)||obj.base64){if(!this.reconstructor){throw new Error(\"got binary data when not reconstructing a packet\")}else{packet=this.reconstructor.takeBinaryData(obj);if(packet){this.reconstructor=null;this.emit(\"decoded\",packet)}}}else{throw new Error(\"Unknown type: \"+obj)}};function decodeString(str){var p={};var i=0;p.type=Number(str.charAt(0));if(null==exports.types[p.type])return error();if(exports.BINARY_EVENT==p.type||exports.BINARY_ACK==p.type){var buf=\"\";while(str.charAt(++i)!=\"-\"){buf+=str.charAt(i);if(i==str.length)break}if(buf!=Number(buf)||str.charAt(i)!=\"-\"){throw new Error(\"Illegal attachments\")}p.attachments=Number(buf)}if(\"/\"==str.charAt(i+1)){p.nsp=\"\";while(++i){var c=str.charAt(i);if(\",\"==c)break;p.nsp+=c;if(i==str.length)break}}else{p.nsp=\"/\"}var next=str.charAt(i+1);if(\"\"!==next&&Number(next)==next){p.id=\"\";while(++i){var c=str.charAt(i);if(null==c||Number(c)!=c){--i;break}p.id+=str.charAt(i);if(i==str.length)break}p.id=Number(p.id)}if(str.charAt(++i)){try{p.data=json.parse(str.substr(i))}catch(e){return error()}}debug(\"decoded %s as %j\",str,p);return p}Decoder.prototype.destroy=function(){if(this.reconstructor){this.reconstructor.finishedReconstruction()}};function BinaryReconstructor(packet){this.reconPack=packet;this.buffers=[]}BinaryReconstructor.prototype.takeBinaryData=function(binData){this.buffers.push(binData);if(this.buffers.length==this.reconPack.attachments){var packet=binary.reconstructPacket(this.reconPack,this.buffers);this.finishedReconstruction();return packet}return null};BinaryReconstructor.prototype.finishedReconstruction=function(){this.reconPack=null;this.buffers=[]};function error(data){return{type:exports.ERROR,data:\"parser error\"}}},{\"./binary\":46,\"./is-buffer\":48,\"component-emitter\":49,debug:39,isarray:43,json3:50}],48:[function(_dereq_,module,exports){(function(global){module.exports=isBuf;function isBuf(obj){return global.Buffer&&global.Buffer.isBuffer(obj)||global.ArrayBuffer&&obj instanceof ArrayBuffer}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{}],49:[function(_dereq_,module,exports){arguments[4][15][0].apply(exports,arguments)},{dup:15}],50:[function(_dereq_,module,exports){(function(global){(function(){var isLoader=typeof define===\"function\"&&define.amd;var objectTypes={\"function\":true,object:true};var freeExports=objectTypes[typeof exports]&&exports&&!exports.nodeType&&exports;var root=objectTypes[typeof window]&&window||this,freeGlobal=freeExports&&objectTypes[typeof module]&&module&&!module.nodeType&&typeof global==\"object\"&&global;if(freeGlobal&&(freeGlobal[\"global\"]===freeGlobal||freeGlobal[\"window\"]===freeGlobal||freeGlobal[\"self\"]===freeGlobal)){root=freeGlobal}function runInContext(context,exports){context||(context=root[\"Object\"]());exports||(exports=root[\"Object\"]());var Number=context[\"Number\"]||root[\"Number\"],String=context[\"String\"]||root[\"String\"],Object=context[\"Object\"]||root[\"Object\"],Date=context[\"Date\"]||root[\"Date\"],SyntaxError=context[\"SyntaxError\"]||root[\"SyntaxError\"],TypeError=context[\"TypeError\"]||root[\"TypeError\"],Math=context[\"Math\"]||root[\"Math\"],nativeJSON=context[\"JSON\"]||root[\"JSON\"];if(typeof nativeJSON==\"object\"&&nativeJSON){exports.stringify=nativeJSON.stringify;exports.parse=nativeJSON.parse}var objectProto=Object.prototype,getClass=objectProto.toString,isProperty,forEach,undef;var isExtended=new Date(-0xc782b5b800cec);try{isExtended=isExtended.getUTCFullYear()==-109252&&isExtended.getUTCMonth()===0&&isExtended.getUTCDate()===1&&isExtended.getUTCHours()==10&&isExtended.getUTCMinutes()==37&&isExtended.getUTCSeconds()==6&&isExtended.getUTCMilliseconds()==708}catch(exception){}function has(name){if(has[name]!==undef){return has[name]}var isSupported;if(name==\"bug-string-char-index\"){isSupported=\"a\"[0]!=\"a\"}else if(name==\"json\"){isSupported=has(\"json-stringify\")&&has(\"json-parse\")}else{var value,serialized='{\"a\":[1,true,false,null,\"\\\\u0000\\\\b\\\\n\\\\f\\\\r\\\\t\"]}';if(name==\"json-stringify\"){var stringify=exports.stringify,stringifySupported=typeof stringify==\"function\"&&isExtended;if(stringifySupported){(value=function(){return 1}).toJSON=value;try{stringifySupported=stringify(0)===\"0\"&&stringify(new Number)===\"0\"&&stringify(new String)=='\"\"'&&stringify(getClass)===undef&&stringify(undef)===undef&&stringify()===undef&&stringify(value)===\"1\"&&stringify([value])==\"[1]\"&&stringify([undef])==\"[null]\"&&stringify(null)==\"null\"&&stringify([undef,getClass,null])==\"[null,null,null]\"&&stringify({a:[value,true,false,null,\"\\x00\\b\\n\\f\\r\t\"]})==serialized&&stringify(null,value)===\"1\"&&stringify([1,2],null,1)==\"[\\n 1,\\n 2\\n]\"&&stringify(new Date(-864e13))=='\"-271821-04-20T00:00:00.000Z\"'&&stringify(new Date(864e13))=='\"+275760-09-13T00:00:00.000Z\"'&&stringify(new Date(-621987552e5))=='\"-000001-01-01T00:00:00.000Z\"'&&stringify(new Date(-1))=='\"1969-12-31T23:59:59.999Z\"'}catch(exception){stringifySupported=false}}isSupported=stringifySupported}if(name==\"json-parse\"){var parse=exports.parse;if(typeof parse==\"function\"){try{if(parse(\"0\")===0&&!parse(false)){value=parse(serialized);var parseSupported=value[\"a\"].length==5&&value[\"a\"][0]===1;if(parseSupported){try{parseSupported=!parse('\"\t\"')}catch(exception){}if(parseSupported){try{parseSupported=parse(\"01\")!==1}catch(exception){}}if(parseSupported){try{parseSupported=parse(\"1.\")!==1}catch(exception){}}}}}catch(exception){parseSupported=false}}isSupported=parseSupported}}return has[name]=!!isSupported}if(!has(\"json\")){var functionClass=\"[object Function]\",dateClass=\"[object Date]\",numberClass=\"[object Number]\",stringClass=\"[object String]\",arrayClass=\"[object Array]\",booleanClass=\"[object Boolean]\";var charIndexBuggy=has(\"bug-string-char-index\");if(!isExtended){var floor=Math.floor;var Months=[0,31,59,90,120,151,181,212,243,273,304,334];var getDay=function(year,month){return Months[month]+365*(year-1970)+floor((year-1969+(month=+(month>1)))/4)-floor((year-1901+month)/100)+floor((year-1601+month)/400)}}if(!(isProperty=objectProto.hasOwnProperty)){isProperty=function(property){var members={},constructor;if((members.__proto__=null,members.__proto__={toString:1},members).toString!=getClass){isProperty=function(property){var original=this.__proto__,result=property in(this.__proto__=null,this);this.__proto__=original;return result}}else{constructor=members.constructor;isProperty=function(property){var parent=(this.constructor||constructor).prototype;return property in this&&!(property in parent&&this[property]===parent[property])}}members=null;return isProperty.call(this,property)}}forEach=function(object,callback){var size=0,Properties,members,property;(Properties=function(){this.valueOf=0}).prototype.valueOf=0;members=new Properties;for(property in members){if(isProperty.call(members,property)){size++}}Properties=members=null;if(!size){members=[\"valueOf\",\"toString\",\"toLocaleString\",\"propertyIsEnumerable\",\"isPrototypeOf\",\"hasOwnProperty\",\"constructor\"];forEach=function(object,callback){var isFunction=getClass.call(object)==functionClass,property,length;var hasProperty=!isFunction&&typeof object.constructor!=\"function\"&&objectTypes[typeof object.hasOwnProperty]&&object.hasOwnProperty||isProperty;for(property in object){if(!(isFunction&&property==\"prototype\")&&hasProperty.call(object,property)){callback(property)}}for(length=members.length;property=members[--length];hasProperty.call(object,property)&&callback(property));}}else if(size==2){forEach=function(object,callback){var members={},isFunction=getClass.call(object)==functionClass,property;for(property in object){if(!(isFunction&&property==\"prototype\")&&!isProperty.call(members,property)&&(members[property]=1)&&isProperty.call(object,property)){callback(property)}}}}else{forEach=function(object,callback){var isFunction=getClass.call(object)==functionClass,property,isConstructor;for(property in object){if(!(isFunction&&property==\"prototype\")&&isProperty.call(object,property)&&!(isConstructor=property===\"constructor\")){callback(property)}}if(isConstructor||isProperty.call(object,property=\"constructor\")){callback(property)}}}return forEach(object,callback)};if(!has(\"json-stringify\")){var Escapes={92:\"\\\\\\\\\",34:'\\\\\"',8:\"\\\\b\",12:\"\\\\f\",10:\"\\\\n\",13:\"\\\\r\",9:\"\\\\t\"};var leadingZeroes=\"000000\";var toPaddedString=function(width,value){return(leadingZeroes+(value||0)).slice(-width)};var unicodePrefix=\"\\\\u00\";var quote=function(value){var result='\"',index=0,length=value.length,useCharIndex=!charIndexBuggy||length>10;var symbols=useCharIndex&&(charIndexBuggy?value.split(\"\"):value);for(;index<length;index++){var charCode=value.charCodeAt(index);switch(charCode){case 8:case 9:case 10:case 12:case 13:case 34:case 92:result+=Escapes[charCode];break;default:if(charCode<32){result+=unicodePrefix+toPaddedString(2,charCode.toString(16));break}result+=useCharIndex?symbols[index]:value.charAt(index)}}return result+'\"'};var serialize=function(property,object,callback,properties,whitespace,indentation,stack){var value,className,year,month,date,time,hours,minutes,seconds,milliseconds,results,element,index,length,prefix,result;try{value=object[property]}catch(exception){}if(typeof value==\"object\"&&value){className=getClass.call(value);if(className==dateClass&&!isProperty.call(value,\"toJSON\")){if(value>-1/0&&value<1/0){if(getDay){date=floor(value/864e5);for(year=floor(date/365.2425)+1970-1;getDay(year+1,0)<=date;year++);for(month=floor((date-getDay(year,0))/30.42);getDay(year,month+1)<=date;month++);date=1+date-getDay(year,month);time=(value%864e5+864e5)%864e5;hours=floor(time/36e5)%24;minutes=floor(time/6e4)%60;seconds=floor(time/1e3)%60;milliseconds=time%1e3}else{year=value.getUTCFullYear();month=value.getUTCMonth();date=value.getUTCDate();hours=value.getUTCHours();minutes=value.getUTCMinutes();seconds=value.getUTCSeconds();milliseconds=value.getUTCMilliseconds()}value=(year<=0||year>=1e4?(year<0?\"-\":\"+\")+toPaddedString(6,year<0?-year:year):toPaddedString(4,year))+\"-\"+toPaddedString(2,month+1)+\"-\"+toPaddedString(2,date)+\"T\"+toPaddedString(2,hours)+\":\"+toPaddedString(2,minutes)+\":\"+toPaddedString(2,seconds)+\".\"+toPaddedString(3,milliseconds)+\"Z\"}else{value=null}}else if(typeof value.toJSON==\"function\"&&(className!=numberClass&&className!=stringClass&&className!=arrayClass||isProperty.call(value,\"toJSON\"))){value=value.toJSON(property)}}if(callback){value=callback.call(object,property,value)}if(value===null){return\"null\"}className=getClass.call(value);if(className==booleanClass){return\"\"+value}else if(className==numberClass){return value>-1/0&&value<1/0?\"\"+value:\"null\"}else if(className==stringClass){return quote(\"\"+value)}if(typeof value==\"object\"){for(length=stack.length;length--;){if(stack[length]===value){throw TypeError()}}stack.push(value);results=[];prefix=indentation;indentation+=whitespace;if(className==arrayClass){for(index=0,length=value.length;index<length;index++){element=serialize(index,value,callback,properties,whitespace,indentation,stack);results.push(element===undef?\"null\":element)}result=results.length?whitespace?\"[\\n\"+indentation+results.join(\",\\n\"+indentation)+\"\\n\"+prefix+\"]\":\"[\"+results.join(\",\")+\"]\":\"[]\"}else{forEach(properties||value,function(property){var element=serialize(property,value,callback,properties,whitespace,indentation,stack);if(element!==undef){results.push(quote(property)+\":\"+(whitespace?\" \":\"\")+element)}});result=results.length?whitespace?\"{\\n\"+indentation+results.join(\",\\n\"+indentation)+\"\\n\"+prefix+\"}\":\"{\"+results.join(\",\")+\"}\":\"{}\"}stack.pop();return result}};exports.stringify=function(source,filter,width){var whitespace,callback,properties,className;if(objectTypes[typeof filter]&&filter){if((className=getClass.call(filter))==functionClass){callback=filter}else if(className==arrayClass){properties={};for(var index=0,length=filter.length,value;index<length;value=filter[index++],(className=getClass.call(value),className==stringClass||className==numberClass)&&(properties[value]=1));}}if(width){if((className=getClass.call(width))==numberClass){if((width-=width%1)>0){for(whitespace=\"\",width>10&&(width=10);whitespace.length<width;whitespace+=\" \");}}else if(className==stringClass){whitespace=width.length<=10?width:width.slice(0,10)}}return serialize(\"\",(value={},value[\"\"]=source,value),callback,properties,whitespace,\"\",[])}}if(!has(\"json-parse\")){var fromCharCode=String.fromCharCode;var Unescapes={92:\"\\\\\",34:'\"',47:\"/\",98:\"\\b\",116:\"\t\",110:\"\\n\",102:\"\\f\",114:\"\\r\"};var Index,Source;var abort=function(){Index=Source=null;throw SyntaxError()};var lex=function(){var source=Source,length=source.length,value,begin,position,isSigned,charCode;while(Index<length){charCode=source.charCodeAt(Index);switch(charCode){case 9:case 10:case 13:case 32:Index++;break;case 123:case 125:case 91:case 93:case 58:case 44:value=charIndexBuggy?source.charAt(Index):source[Index];Index++;return value;case 34:for(value=\"@\",Index++;Index<length;){charCode=source.charCodeAt(Index);if(charCode<32){abort()}else if(charCode==92){charCode=source.charCodeAt(++Index);switch(charCode){case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:value+=Unescapes[charCode];Index++;break;case 117:begin=++Index;for(position=Index+4;Index<position;Index++){charCode=source.charCodeAt(Index);if(!(charCode>=48&&charCode<=57||charCode>=97&&charCode<=102||charCode>=65&&charCode<=70)){abort()}}value+=fromCharCode(\"0x\"+source.slice(begin,Index));break;default:abort()}}else{if(charCode==34){break}charCode=source.charCodeAt(Index);begin=Index;while(charCode>=32&&charCode!=92&&charCode!=34){charCode=source.charCodeAt(++Index)}value+=source.slice(begin,Index)}}if(source.charCodeAt(Index)==34){Index++;return value}abort();default:begin=Index;if(charCode==45){isSigned=true;charCode=source.charCodeAt(++Index)}if(charCode>=48&&charCode<=57){if(charCode==48&&(charCode=source.charCodeAt(Index+1),charCode>=48&&charCode<=57)){abort()}isSigned=false;for(;Index<length&&(charCode=source.charCodeAt(Index),charCode>=48&&charCode<=57);Index++);if(source.charCodeAt(Index)==46){position=++Index;for(;position<length&&(charCode=source.charCodeAt(position),charCode>=48&&charCode<=57);position++);if(position==Index){abort()}Index=position}charCode=source.charCodeAt(Index);if(charCode==101||charCode==69){charCode=source.charCodeAt(++Index);if(charCode==43||charCode==45){Index++}for(position=Index;position<length&&(charCode=source.charCodeAt(position),charCode>=48&&charCode<=57);position++);if(position==Index){abort()}Index=position}return+source.slice(begin,Index)}if(isSigned){abort()}if(source.slice(Index,Index+4)==\"true\"){Index+=4;return true}else if(source.slice(Index,Index+5)==\"false\"){Index+=5;return false}else if(source.slice(Index,Index+4)==\"null\"){Index+=4;return null}abort()}}return\"$\"};var get=function(value){var results,hasMembers;if(value==\"$\"){abort()}if(typeof value==\"string\"){if((charIndexBuggy?value.charAt(0):value[0])==\"@\"){return value.slice(1)}if(value==\"[\"){results=[];for(;;hasMembers||(hasMembers=true)){value=lex();if(value==\"]\"){break}if(hasMembers){if(value==\",\"){value=lex();if(value==\"]\"){abort()}}else{abort()}}if(value==\",\"){abort()}results.push(get(value))}return results}else if(value==\"{\"){results={};for(;;hasMembers||(hasMembers=true)){value=lex();if(value==\"}\"){break}if(hasMembers){if(value==\",\"){value=lex();if(value==\"}\"){abort()}}else{abort()}}if(value==\",\"||typeof value!=\"string\"||(charIndexBuggy?value.charAt(0):value[0])!=\"@\"||lex()!=\":\"){abort()}results[value.slice(1)]=get(lex())\n}return results}abort()}return value};var update=function(source,property,callback){var element=walk(source,property,callback);if(element===undef){delete source[property]}else{source[property]=element}};var walk=function(source,property,callback){var value=source[property],length;if(typeof value==\"object\"&&value){if(getClass.call(value)==arrayClass){for(length=value.length;length--;){update(value,length,callback)}}else{forEach(value,function(property){update(value,property,callback)})}}return callback.call(source,property,value)};exports.parse=function(source,callback){var result,value;Index=0;Source=\"\"+source;result=get(lex());if(lex()!=\"$\"){abort()}Index=Source=null;return callback&&getClass.call(callback)==functionClass?walk((value={},value[\"\"]=result,value),\"\",callback):result}}}exports[\"runInContext\"]=runInContext;return exports}if(freeExports&&!isLoader){runInContext(root,freeExports)}else{var nativeJSON=root.JSON,previousJSON=root[\"JSON3\"],isRestored=false;var JSON3=runInContext(root,root[\"JSON3\"]={noConflict:function(){if(!isRestored){isRestored=true;root.JSON=nativeJSON;root[\"JSON3\"]=previousJSON;nativeJSON=previousJSON=null}return JSON3}});root.JSON={parse:JSON3.parse,stringify:JSON3.stringify}}if(isLoader){define(function(){return JSON3})}}).call(this)}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{}],51:[function(_dereq_,module,exports){module.exports=toArray;function toArray(list,index){var array=[];index=index||0;for(var i=index||0;i<list.length;i++){array[i-index]=list[i]}return array}},{}]},{},[31])(31)});\n\n    \n      ;var weight = document.getElementById('weight');\n      var socket = io('http://{{ip}}:4001');\n      socket.on('getWeight', function(msg) {\n        weight.innerHTML = msg;\n    \n      }); \n    }, 1000);\n    </script>\n\n  </body>\n</html>\n","x":530,"y":1180,"wires":[["a9a2cecf.ff0f4"]]},{"id":"a9a2cecf.ff0f4","type":"http response","z":"cd04ff99.5a648","name":"","x":690,"y":1220,"wires":[]},{"id":"6574cdc8.668804","type":"function","z":"cd04ff99.5a648","name":"set ip","func":"msg.ip = global.get('ip');\nreturn msg;","outputs":1,"noerr":0,"x":330,"y":1180,"wires":[["2f33be04.5f7652"]]},{"id":"ee246eb7.bcb87","type":"http request","z":"f078b964.d91168","name":"","method":"GET","ret":"bin","url":"","tls":"","x":550,"y":120,"wires":[["d15e333f.f5b43"]]},{"id":"c6e8b74d.020678","type":"link in","z":"f078b964.d91168","name":"","links":[],"x":140,"y":60,"wires":[["eb466987.2a01e8"]]},{"id":"eb466987.2a01e8","type":"function","z":"f078b964.d91168","name":"video url","func":"msg.url = 'http://test:Test2003@192.168.0.150/ISAPI/Streaming/channels/101/picture?snapShotImageType=JPEG'; \nreturn msg;","outputs":1,"noerr":0,"x":360,"y":120,"wires":[["ee246eb7.bcb87"]]},{"id":"b2865f3e.9ea7d","type":"function","z":"cd04ff99.5a648","name":"video url","func":"msg.url = global.get('video_camera_url'); \nreturn msg;","outputs":1,"noerr":0,"x":1480,"y":700,"wires":[["b4017fdb.cec9d"]]},{"id":"b4017fdb.cec9d","type":"http request","z":"cd04ff99.5a648","name":"","method":"GET","ret":"bin","url":"","tls":"","x":1650,"y":700,"wires":[["df85c17.f106d4"]]},{"id":"df85c17.f106d4","type":"function","z":"cd04ff99.5a648","name":"snapshot payload","func":"var event_id = msg.event_id;\nvar scale_id = global.get('scale_id');\nvar tbase64   = msg.payload.toString('base64');\nmsg.payload = {\n    'event':{\n        'id':msg.event_id\n    },\n    'device':{\n        'id':scale_id\n        \n    },\n    'snapshot':tbase64,\n    'ext':'jpeg'\n}\n\nmsg.headers = {\n    \"content-type\":\"application/json\"\n}\n\nmsg.url = flow.get('main_host')+flow.get('snapshot_url');\nmsg.main_host = flow.get('main_host');\nmsg.snapshot_url = flow.get('snapshot_url');\n\nreturn msg;","outputs":1,"noerr":0,"x":1870,"y":700,"wires":[["af94622d.2aa5d","b50c7b6e.181488"]]},{"id":"af94622d.2aa5d","type":"http request","z":"cd04ff99.5a648","name":"send a snapshot","method":"POST","ret":"txt","url":"","tls":"","x":2090,"y":700,"wires":[["ac7e881c.794fe8"]]},{"id":"ac7e881c.794fe8","type":"debug","z":"cd04ff99.5a648","name":"","active":false,"console":"false","complete":"true","x":2250,"y":700,"wires":[]},{"id":"b50c7b6e.181488","type":"debug","z":"cd04ff99.5a648","name":"","active":false,"console":"false","complete":"false","x":2040,"y":540,"wires":[]},{"id":"3b81fe46.aa8142","type":"inject","z":"edffc925.6e1988","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":137,"y":622,"wires":[["ce3e7481.992f48"]]},{"id":"ce3e7481.992f48","type":"exec","z":"edffc925.6e1988","command":"ls /dev","addpay":false,"append":"","useSpawn":"","timer":"","name":"","x":270,"y":616.5,"wires":[["17b183c5.05364c"],[],[]]},{"id":"17b183c5.05364c","type":"debug","z":"edffc925.6e1988","name":"","active":false,"console":"false","complete":"false","x":425,"y":606,"wires":[]},{"id":"4bf5cf25.a8b37","type":"comment","z":"edffc925.6e1988","name":"ttyACM1 ttyACM0 ttyUSB0 usb девайси","info":"","x":304,"y":564,"wires":[]},{"id":"6531c873.862378","type":"switch","z":"cd04ff99.5a648","name":"","property":"driver_in","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":730,"y":860,"wires":[["14849c75.6c9414","9829efd3.a0dc2"]]},{"id":"14849c75.6c9414","type":"function","z":"cd04ff99.5a648","name":"driver_in event","func":"msg.event_id = flow.get('event_driver_in');\nmsg.description = 'При зважуванні водій в кабіні. Вага: ' + msg.metadata.weight+\"кг. Номер авто: \"+msg.metadata.truck1+\" \"+msg.metadata.truck2+\" \"+msg.metadata.item_name;\n\nreturn msg;","outputs":1,"noerr":0,"x":860,"y":760,"wires":[["58f2d037.aff6b"]]},{"id":"9829efd3.a0dc2","type":"debug","z":"cd04ff99.5a648","name":"","active":false,"console":"false","complete":"true","x":900,"y":1140,"wires":[]},{"id":"d69472b4.9bfa5","type":"http in","z":"f078b964.d91168","name":"","url":"/getsnapshot_1","method":"get","swaggerDoc":"","x":150,"y":120,"wires":[["eb466987.2a01e8"]]},{"id":"d15e333f.f5b43","type":"function","z":"f078b964.d91168","name":"make payload","func":"var tbase64   = msg.payload.toString('base64');\nmsg.payload = {\n    'snapshot':tbase64,\n    'ext':'jpeg'\n}\nreturn msg;","outputs":1,"noerr":0,"x":740,"y":120,"wires":[["69675cdd.f0d5a4"]]},{"id":"69675cdd.f0d5a4","type":"http response","z":"f078b964.d91168","name":"","x":910,"y":120,"wires":[]},{"id":"d655b6dd.02b4b8","type":"debug","z":"edffc925.6e1988","name":"weight","active":false,"console":"true","complete":"payload","x":282,"y":293,"wires":[]},{"id":"7246739b.7745ec","type":"inject","z":"7d24c700.ff9778","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":308,"y":119,"wires":[["9381627e.80116"]]},{"id":"dece8ef5.db64b","type":"file in","z":"7d24c700.ff9778","name":"full","filename":"","format":"","x":550,"y":118,"wires":[["4d1c78c3.f05878"]]},{"id":"9381627e.80116","type":"function","z":"7d24c700.ff9778","name":"","func":"var max = 1;\nvar min = 101;\n\nvar img = (Math.random() * (max - min) + min).toFixed();\n\nmsg.payload = \"/distr/data/full/\" + img + \".jpg\";\nmsg.filename = msg.payload;\nreturn msg;\n\n","outputs":1,"noerr":0,"x":437.33331298828125,"y":117.33322143554688,"wires":[["dece8ef5.db64b"]]},{"id":"195c74a9.0e20cb","type":"http in","z":"edffc925.6e1988","name":"","url":"/test_get_atom","method":"get","swaggerDoc":"","x":198,"y":898,"wires":[["2769455c.40c47a","3958560f.a1997a"]]},{"id":"2769455c.40c47a","type":"http response","z":"edffc925.6e1988","name":"","x":404,"y":944,"wires":[]},{"id":"3958560f.a1997a","type":"debug","z":"edffc925.6e1988","name":"","active":true,"console":"false","complete":"false","x":507,"y":893,"wires":[]},{"id":"3789a854.39de78","type":"http in","z":"edffc925.6e1988","name":"","url":"/test_post_atom","method":"post","swaggerDoc":"","x":233,"y":999,"wires":[["7e700ee1.c57fa","4659541f.fb533c"]]},{"id":"7e700ee1.c57fa","type":"http response","z":"edffc925.6e1988","name":"","x":429,"y":1045,"wires":[]},{"id":"4659541f.fb533c","type":"debug","z":"edffc925.6e1988","name":"","active":true,"console":"false","complete":"false","x":532,"y":994,"wires":[]},{"id":"a947f323.3423c","type":"debug","z":"edffc925.6e1988","name":"","active":false,"console":"false","complete":"false","x":338,"y":142,"wires":[]},{"id":"4e2d6b43.194a44","type":"function","z":"cd04ff99.5a648","name":"device config","func":"var device_config = JSON.parse(msg.payload);\n\nflow.set('scale_id',device_config.scale_id);\nflow.set('event_move_in_id',device_config.event_move_in_id);\nflow.set('event_move_in_minus_id',device_config.event_move_in_minus_id);\nflow.set('event_move_out_id',device_config.event_move_out_id);\nflow.set('event_max_weight_id',device_config.event_max_weight_id);\nflow.set('event_off_id',device_config.event_off_id);\nflow.set('event_on_id', device_config.event_on_id);\nflow.set('event_max_duration',device_config.event_max_duration);\nflow.set('event_fake_traffic',device_config.event_fake_traffic);\nflow.set('event_driver_in', device_config.event_driver_in);\nflow.set('event_over_load',device_config.event_over_load);\nflow.set('main_host',device_config.main_host);\nflow.set('event_url',device_config.event_url);\nflow.set('state_url',device_config.state_url);\nflow.set('maxWeight',device_config.maxWeight);\nflow.set('minWeight',device_config.minWeight);\nflow.set('maxDuration',device_config.maxDuration);\nflow.set('checkHealthTimeout',device_config.checkHealthTimeout);\nflow.set('event_get_weight_acc',device_config.event_get_weight_acc);\nflow.set('event_min_weight',device_config.event_min_weight);\nflow.set('minTriggerWeight',device_config.minTriggerWeight);\nflow.set('snapshot_url',device_config.snapshot_url);\nflow.set('snapshot_events',device_config.snapshot_events);\nflow.set('driverWeight',device_config.driverWeight);\nflow.set('overLoadWeight', device_config.overLoadWeight);\n\nmsg.payload = {\n\tscale_id: flow.get('scale_id'),\n\tevent_move_in_id: flow.get('event_move_in_id'),\n\tevent_move_in_minus_id: flow.get('event_move_in_minus_id'),\n\tevent_move_out_id: flow.get('event_move_out_id'),\n\tevent_max_weight_id: flow.get('event_max_weight_id'),\n\tevent_off_id: flow.get('event_off_id'),\n\tevent_on_id: flow.get('event_on_id'),\n\tevent_max_duration: flow.get('event_max_duration'),\n\tevent_fake_traffic: flow.get('event_fake_traffic'),\n\tevent_driver_in: flow.get('event_driver_in'),\n\tevent_over_load: flow.get('event_over_load'),\n\tmain_host: flow.get('main_host'),\n\tevent_url: flow.get('event_url'),\n\tstate_url: flow.get('state_url'),\n\tmaxWeight: flow.get('maxWeight'),\n\tminWeight: flow.get('minWeight'),\n\tmaxDuration: flow.get('maxDuration'),\n\tcheckHealthTimeout: flow.get('checkHealthTimeout'),\n\tevent_get_weight_acc: flow.get('event_get_weight_acc'),\n\tevent_min_weight: flow.get('event_min_weight'),\n\tminTriggerWeight: flow.get('minTriggerWeight'),\n\tsnapshot_url: flow.get('snapshot_url'),\n\tsnapshot_events: flow.get('snapshot_events'),\n\tdriverWeight: flow.get('driverWeight'),\n\toverLoadWeight: flow.get('overLoadWeight')\n};\n\nreturn msg;\n","outputs":1,"noerr":0,"x":575,"y":161,"wires":[["796e793c.8fb778"]]},{"id":"796e793c.8fb778","type":"json","z":"cd04ff99.5a648","name":"","x":721,"y":159,"wires":[["e2395fab.12737"]]},{"id":"e2395fab.12737","type":"debug","z":"cd04ff99.5a648","name":"TEST device config","active":false,"console":"false","complete":"payload","x":883,"y":157,"wires":[]},{"id":"13548510.f4879b","type":"json","z":"cd04ff99.5a648","name":"","x":1230,"y":540,"wires":[["85bec8ea.2116f8"]]},{"id":"85bec8ea.2116f8","type":"debug","z":"cd04ff99.5a648","name":"TEST event","active":false,"console":"false","complete":"payload","x":1390,"y":520,"wires":[]},{"id":"8d633037.850a","type":"function","z":"cd04ff99.5a648","name":"parser","func":"var str = {\n    payload: msg.payload,\n    event_id: msg.event_id,\n    metadata: msg.metadata,\n    driverWeight: msg.driverWeight,\n    description: msg.description,\n    url: msg.url,\n    main_host: msg.main_host,\n    event_url: msg.event_url,\n    statusCode: msg.statusCode,\n    responseUrl: msg.responseUrl\n    \n};\nmsg.payload = JSON.stringify(str);\nreturn msg;","outputs":1,"noerr":0,"x":1390,"y":600,"wires":[["1da5622b.d3980e"]]},{"id":"1da5622b.d3980e","type":"debug","z":"cd04ff99.5a648","name":"TEST response event","active":false,"console":"false","complete":"payload","x":1560,"y":600,"wires":[]},{"id":"afd2407e.78e1c","type":"websocket out","z":"cd04ff99.5a648","name":"/ws/weight","server":"5783c757.fc1a68","client":"","x":160,"y":700,"wires":[]},{"id":"daeca6d1.5cce78","type":"debug","z":"cd04ff99.5a648","name":"","active":true,"console":"false","complete":"true","x":1390,"y":560,"wires":[]},{"id":"b084efd.621da1","type":"websocket out","z":"cd04ff99.5a648","name":"/ws/duration","server":"5783c757.fc1a68","client":"","x":470,"y":820,"wires":[]},{"id":"5c52711c.11911","type":"function","z":"cd04ff99.5a648","name":"duration","func":"msg.payload = msg.metadata.duration;","outputs":1,"noerr":0,"x":320,"y":820,"wires":[["b084efd.621da1"]]},{"id":"55a46e06.a7504","type":"inject","z":"edffc925.6e1988","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":195,"y":1497,"wires":[["c0466193.a0ae6"]]},{"id":"c0466193.a0ae6","type":"function","z":"edffc925.6e1988","name":"VP01-m C 1.0.28.1","func":"//msg.payload = String.fromCharCode(2)+String.fromCharCode(65)+String.fromCharCode(66)+String.fromCharCode(0)+String.fromCharCode(4)+String.fromCharCode(3); \nmsg.payload = String.fromCharCode(2)+String.fromCharCode(41)+String.fromCharCode(42)+String.fromCharCode(30)+String.fromCharCode(33)+String.fromCharCode(3); \n//#02#41#42#30#33#03\nBuffer.from(\"02 41 42 30 33 03\", \"hex\")\n/*\nString.fromCharCode(2)+String.fromCharCode(65)+String.fromCharCode(66)+String.fromCharCode(48)+String.fromCharCode(51)+String.fromCharCode(3); \n\n0: 2\n1: 65\n2: 66\n3: 48\n4: 51\n5: 3\n*/\n\nreturn msg","outputs":1,"noerr":0,"x":369,"y":1498,"wires":[["cf5e5cb5.a8d56"]]},{"id":"cf5e5cb5.a8d56","type":"debug","z":"edffc925.6e1988","name":"","active":true,"console":"false","complete":"false","x":555,"y":1498,"wires":[]},{"id":"724434fb.45d88c","type":"function","z":"2fe00946.488356","name":"GET WEIGHT","func":"var payload = msg.payload;\nvar parser = flow.get('parser');\nvar currentWeight = parser(payload);\n\nflow.set('currentWeight',currentWeight);\n\nmsg.payload = currentWeight;\n\nreturn msg;","outputs":1,"noerr":0,"x":332,"y":182.85714721679688,"wires":[["6d4576c3.d75df8"]]},{"id":"94039052.9f498","type":"inject","z":"2fe00946.488356","name":"init","topic":"","payload":"init","payloadType":"str","repeat":"","crontab":"","once":true,"x":160.99999618530273,"y":125.85714530944824,"wires":[["5d49da8d.d979a4"]]},{"id":"8fd126d3.9e11c8","type":"comment","z":"2fe00946.488356","name":"INITIALIZING","info":"","x":180.99999618530273,"y":85.85714530944824,"wires":[]},{"id":"5d49da8d.d979a4","type":"function","z":"2fe00946.488356","name":"Модель весов","func":"flow.set('inputString',\"CMD\");\nflow.set('parser',function(v){\n            \n        //v = v.replace('S','');\n        //v = v.replace('D','');\n        //v = v.replace('kg','');\n        return Number(v);\n        \n        }\n    );\nglobal.set('scale_id_out','10955018-4f68-d692-da64-22531f019000');\nglobal.set('ip','192.168.104.3');\nglobal.set('video_camera_url_1','http://admin:admin333@192.168.104.58/ISAPI/Streaming/channels/101/picture?snapShotImageType=JPEG');\n   \nreturn msg;","outputs":1,"noerr":0,"x":417,"y":130.28571319580078,"wires":[[]]},{"id":"556bfb0.96fe904","type":"link out","z":"2fe00946.488356","name":"s1","links":["f98251a9.7fefa"],"x":574.7142333984375,"y":179.85714721679688,"wires":[]},{"id":"9b19ea4.53fd718","type":"link in","z":"2fe00946.488356","name":"","links":["b4c2eb1c.2b6148"],"x":159,"y":183,"wires":[["724434fb.45d88c"]]},{"id":"6d4576c3.d75df8","type":"debug","z":"2fe00946.488356","name":"","active":false,"console":"false","complete":"false","x":489,"y":243,"wires":[]},{"id":"344672a2.310ace","type":"exec","z":"2f07d3e2.0f102c","command":"cat /proc/cpuinfo","addpay":true,"append":"| grep Serial","useSpawn":"","timer":"5","name":"","x":370,"y":66,"wires":[["9a6c7df7.64355","5f325ac5.6e6874"],[],[]]},{"id":"5fd9240e.54409c","type":"function","z":"2f07d3e2.0f102c","name":"main config","func":"flow.set('prevWeight',null);\nflow.set('transaction',null);\nflow.set('transactionData',[]);\nflow.set('transactionMaxWeight',null);\nflow.set('transactionHasMinWeight',null);\nflow.set('transactionHasMaxWeight',null);\nflow.set('transactionHasMaxDuration',null);\nflow.set('lasttimedata', new Date());\nflow.set('checkHealth',null);\nflow.set('transactionWaybill',null);\n\nreturn msg;\n","outputs":1,"noerr":0,"x":390,"y":266,"wires":[[]]},{"id":"22703e94.bc4b82","type":"inject","z":"2f07d3e2.0f102c","name":"","topic":"","payload":"","payloadType":"str","repeat":"3600","crontab":"","once":true,"x":118,"y":248,"wires":[["c62be96d.e8b788","5fd9240e.54409c"]]},{"id":"7b1b220d.e8f16c","type":"http in","z":"2f07d3e2.0f102c","name":"","url":"/firmware","method":"post","swaggerDoc":"","x":160,"y":186,"wires":[["be782a6.0d7d9d8"]]},{"id":"be782a6.0d7d9d8","type":"file","z":"2f07d3e2.0f102c","name":"deivce_config","filename":"deivce_config.json","appendNewline":true,"createDir":false,"overwriteFile":"true","x":400,"y":186,"wires":[]},{"id":"c62be96d.e8b788","type":"file in","z":"2f07d3e2.0f102c","name":"deivce_config","filename":"deivce_config.json","format":"utf8","x":400,"y":226,"wires":[["e00c50be.be056"]]},{"id":"a738f4d6.42ba98","type":"http in","z":"2f07d3e2.0f102c","name":"","url":"/serial","method":"get","swaggerDoc":"","x":140,"y":66,"wires":[["344672a2.310ace"]]},{"id":"9a6c7df7.64355","type":"http response","z":"2f07d3e2.0f102c","name":"","x":570,"y":46,"wires":[]},{"id":"5f325ac5.6e6874","type":"function","z":"2f07d3e2.0f102c","name":"","func":"msg.payload = msg.payload.split(':')[1].replace('\\n','').replace(' ','');\nreturn msg;","outputs":1,"noerr":0,"x":560,"y":126,"wires":[["3524b1e1.c0c41e"]]},{"id":"3524b1e1.c0c41e","type":"debug","z":"2f07d3e2.0f102c","name":"","active":false,"console":"false","complete":"false","x":700,"y":126,"wires":[]},{"id":"a64e3999.0b8138","type":"inject","z":"2f07d3e2.0f102c","name":"DEMO","topic":"","payload":"","payloadType":"str","repeat":"10800","crontab":"","once":true,"x":120,"y":126,"wires":[["8612ac2b.6ac8e"]]},{"id":"8612ac2b.6ac8e","type":"function","z":"2f07d3e2.0f102c","name":"DEMO Data","func":"var device_config = {\n    'event_move_in_id':'80096D9ABE7F68F3E0533300000A6C0D',\n    'event_move_in_minus_id':'8DB9B239DF5252F0E055000000000001',\n    'event_move_out_id':'80096D9ABE8068F3E0533300000A6C0D',\n    'event_max_weight_id':'85A255F950F9BEF4E0533300000AC45D',\n    'event_on_id': '85A2CC45702A2DD1E0533300000A0C94',\n    'event_off_id':'85A2CC4570292DD1E0533300000A0C94',\n    'event_max_duration':'8642EE858DE89BAAE0533300000AFCC7',\n    'event_fake_traffic':'80096EF60C186574E0533300000ADBA5',\n    'event_get_weight_acc':'800970AC1FDC683CE0533300000AF1B0',\n    'event_min_weight':'875C3EB5C9DD092DE055000000000001',\n    'event_driver_in':'8E68D8D8B2977181E055000000000001',\n    'snapshot_events':['80096D9ABE7F68F3E0533300000A6C0D','85A255F950F9BEF4E0533300000AC45D','8642EE858DE89BAAE0533300000AFCC7','800970AC1FDC683CE0533300000AF1B0'],\n    'main_host':'http://78.46.24.220:8080/ords/demo_ettn',\n    'event_url':'/iot_cli/events/log',\n    'state_url':'/iot_cli/device',\n    'snapshot_url':'/iot_cli/events/snapshot',\n    'maxWeight':60000,\n    'maxDuration':600000,\n    'minWeight':-40,\n    'checkHealthTimeout':3000,\n    'minTriggerWeight':40,\n    'driverWeight':80\n}\nmsg.payload = device_config;\n// flow.set('scale_id','80096CB0EFD83B63E0533300000A4334');\n// flow.set('event_move_in_id','80096D9ABE7F68F3E0533300000A6C0D');\n// flow.set('event_move_out_id','80096D9ABE8068F3E0533300000A6C0D');\n// flow.set('event_max_weight_id','85A255F950F9BEF4E0533300000AC45D');\n// flow.set('event_off_id','85A2CC4570292DD1E0533300000A0C94');\n// flow.set('event_on_id', '85A2CC45702A2DD1E0533300000A0C94');\n// flow.set('event_max_duration','8642EE858DE89BAAE0533300000AFCC7');\n// flow.set('main_host','http://prod.apex.rest/ords/ettn');\n// flow.set('event_url','/iot_cli/events/log');\n// flow.set('state_url','/v1/device');\n// flow.set('maxWeight',40000);\n// flow.set('maxDuration',20000);\n// flow.set('checkHealthTimeout',3000);\nreturn msg;","outputs":1,"noerr":0,"x":279,"y":126,"wires":[["be782a6.0d7d9d8"]]},{"id":"b6a8352e.32b8e8","type":"debug","z":"2f07d3e2.0f102c","name":"","active":false,"console":"false","complete":"payload","x":765,"y":226,"wires":[]},{"id":"3944bc7a.4dae44","type":"function","z":"2f07d3e2.0f102c","name":"device config","func":"var device_config = JSON.parse(msg.payload);\n\nflow.set('scale_id',device_config.scale_id);\nflow.set('event_move_in_id',device_config.event_move_in_id);\nflow.set('event_move_in_minus_id',device_config.event_move_in_minus_id);\nflow.set('event_move_out_id',device_config.event_move_out_id);\nflow.set('event_max_weight_id',device_config.event_max_weight_id);\nflow.set('event_off_id',device_config.event_off_id);\nflow.set('event_on_id', device_config.event_on_id);\nflow.set('event_max_duration',device_config.event_max_duration);\nflow.set('event_fake_traffic',device_config.event_fake_traffic);\nflow.set('event_driver_in', device_config.event_driver_in);\nflow.set('main_host',device_config.main_host);\nflow.set('event_url',device_config.event_url);\nflow.set('state_url',device_config.state_url);\nflow.set('maxWeight',device_config.maxWeight);\nflow.set('minWeight',device_config.minWeight);\nflow.set('maxDuration',device_config.maxDuration);\nflow.set('checkHealthTimeout',device_config.checkHealthTimeout);\nflow.set('event_get_weight_acc',device_config.event_get_weight_acc);\nflow.set('event_min_weight',device_config.event_min_weight);\nflow.set('minTriggerWeight',device_config.minTriggerWeight);\nflow.set('snapshot_url',device_config.snapshot_url);\nflow.set('snapshot_events',device_config.snapshot_events);\nflow.set('driverWeight',device_config.driverWeight)\n\nreturn msg;\n","outputs":1,"noerr":0,"x":590,"y":226,"wires":[["b6a8352e.32b8e8"]]},{"id":"e00c50be.be056","type":"function","z":"2f07d3e2.0f102c","name":"device config","func":"var device_config = JSON.parse(msg.payload);\n\nflow.set('scale_id',device_config.scale_id);\nflow.set('event_move_in_id',device_config.event_move_in_id);\nflow.set('event_move_in_minus_id',device_config.event_move_in_minus_id);\nflow.set('event_move_out_id',device_config.event_move_out_id);\nflow.set('event_max_weight_id',device_config.event_max_weight_id);\nflow.set('event_off_id',device_config.event_off_id);\nflow.set('event_on_id', device_config.event_on_id);\nflow.set('event_max_duration',device_config.event_max_duration);\nflow.set('event_fake_traffic',device_config.event_fake_traffic);\nflow.set('event_driver_in', device_config.event_driver_in);\nflow.set('main_host',device_config.main_host);\nflow.set('event_url',device_config.event_url);\nflow.set('state_url',device_config.state_url);\nflow.set('maxWeight',device_config.maxWeight);\nflow.set('minWeight',device_config.minWeight);\nflow.set('maxDuration',device_config.maxDuration);\nflow.set('checkHealthTimeout',device_config.checkHealthTimeout);\nflow.set('event_get_weight_acc',device_config.event_get_weight_acc);\nflow.set('event_min_weight',device_config.event_min_weight);\nflow.set('minTriggerWeight',device_config.minTriggerWeight);\nflow.set('snapshot_url',device_config.snapshot_url);\nflow.set('snapshot_events',device_config.snapshot_events);\nflow.set('driverWeight',device_config.driverWeight);\n\nmsg.payload = {\n\tscale_id: flow.get('scale_id'),\n\tevent_move_in_id: flow.get('event_move_in_id'),\n\tevent_move_in_minus_id: flow.get('event_move_in_minus_id'),\n\tevent_move_out_id: flow.get('event_move_out_id'),\n\tevent_max_weight_id: flow.get('event_max_weight_id'),\n\tevent_off_id: flow.get('event_off_id'),\n\tevent_on_id: flow.get('event_on_id'),\n\tevent_max_duration: flow.get('event_max_duration'),\n\tevent_fake_traffic: flow.get('event_fake_traffic'),\n\tevent_driver_in: flow.get('event_driver_in'),\n\tmain_host: flow.get('main_host'),\n\tevent_url: flow.get('event_url'),\n\tstate_url: flow.get('state_url'),\n\tmaxWeight: flow.get('maxWeight'),\n\tminWeight: flow.get('minWeight'),\n\tmaxDuration: flow.get('maxDuration'),\n\tcheckHealthTimeout: flow.get('checkHealthTimeout'),\n\tevent_get_weight_acc: flow.get('event_get_weight_acc'),\n\tevent_min_weight: flow.get('event_min_weight'),\n\tminTriggerWeight: flow.get('minTriggerWeight'),\n\tsnapshot_url: flow.get('snapshot_url'),\n\tsnapshot_events: flow.get('snapshot_events'),\n\tdriverWeight: flow.get('driverWeight')\n};\n\nreturn msg;\n","outputs":1,"noerr":0,"x":585,"y":186,"wires":[["38e4adc4.1f7682"]]},{"id":"38e4adc4.1f7682","type":"json","z":"2f07d3e2.0f102c","name":"","x":731,"y":184,"wires":[["d38aa016.f0d78"]]},{"id":"d38aa016.f0d78","type":"debug","z":"2f07d3e2.0f102c","name":"IN device config","active":false,"console":"true","complete":"payload","x":893,"y":182,"wires":[]},{"id":"4dcc254d.f6ee0c","type":"function","z":"2f07d3e2.0f102c","name":"transactionHasMaxWeight","func":"msg.event_id = flow.get('event_max_weight_id');\nmsg.description = 'Перевищена максимально-допустима вага, кг: ' + msg.metadata.weight;\n\n\nreturn msg;","outputs":1,"noerr":0,"x":636.6666259765625,"y":566.6666374206543,"wires":[["7867597a.b0e5a8"]]},{"id":"88bfb82e.6a24c8","type":"switch","z":"2f07d3e2.0f102c","name":"switch max weight","property":"transactionHasMaxWeight","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":396.6666259765625,"y":566.6666374206543,"wires":[["4dcc254d.f6ee0c"]]},{"id":"7867597a.b0e5a8","type":"function","z":"2f07d3e2.0f102c","name":"events payload","func":"var event_id = msg.event_id;\nvar scale_id = global.get('scale_id_out');\nvar snapshot_events = flow.get('snapshot_events');\nvar snapshot = false;\n\nif (snapshot_events.indexOf(event_id)>=0){\n    snapshot = true;\n}\n\nmsg.payload = {\n    'event':{\n        'id':msg.event_id\n    },\n    'devices':[{'id':scale_id}],\n    'data':msg.metadata,\n    'description':msg.description\n}\n\nmsg.headers = {\n    \"content-type\":\"application/json\"\n}\n\nmsg.url = flow.get('main_host')+flow.get('event_url');\nmsg.main_host = flow.get('main_host');\nmsg.event_url = flow.get('event_url');\nmsg.snapshot = snapshot;\nreturn msg;","outputs":1,"noerr":0,"x":986.6666870117188,"y":538.0951347351074,"wires":[["661cbd57.4afd94","922ed96c.551b68"]]},{"id":"27f56faf.33f7a","type":"function","z":"2f07d3e2.0f102c","name":"main module","func":"var prevWeight = flow.get('prevWeight');\nvar transaction = flow.get('transaction');\nvar transactionData = flow.get('transactionData');\nvar transactionMaxWeight = flow.get('transactionMaxWeight');\nvar transactionHasMaxWeight = flow.get('transactionHasMaxWeight');\nvar transactionHasMinWeight = flow.get('transactionHasMinWeight');\nvar transactionHasMaxDuration = flow.get('transactionHasMaxDuration');\nvar waybill = flow.get('transactionWaybill');\nvar weight = msg.payload;\nvar stableSize = 5;\nvar duration = 0;\nvar maxWeight = flow.get('maxWeight');\nvar maxDuration = flow.get('maxDuration');\nvar prevTransaction = transaction;\nvar minWeight = flow.get('minWeight');\nvar minTriggerWeight = flow.get('minTriggerWeight');\nvar is_minus = false;\n//transaction\nif (prevWeight === null){\n    prevWeight = msg.payload;    \n}else{\n    if((prevWeight <= 0) && (weight > 0) && (weight > minTriggerWeight)){\n        //start of transaction\n        transaction = Date.now();\n        msg.on = true;\n        flow.set('transaction',transaction);\n    }else if((prevWeight > 0) && (weight <=0) && (transaction)){\n        //transaction = 0;\n        msg.on = false;\n        transactionData = [];\n        flow.set('transaction',0);\n        flow.set('transactionMaxWeight',null);\n        flow.set('transactionHasMaxWeight',null);\n        flow.set('transactionHasMinWeight',null);\n        flow.set('transactionHasMaxDuration',null);\n        flow.set('transactionWaybill',null);\n        flow.set('transactionMetadata',null);\n    }else if((transaction === null) && (weight>0) && (weight > minTriggerWeight)){\n        transaction = Date.now();\n        flow.set('transaction',transaction);\n    }\n    if((prevWeight < 0) && ((weight-prevWeight) > minTriggerWeight)){\n        //start of transaction\n        is_minus = true;\n        msg.prevWeight = prevWeight;\n    }\n}\n\nif (transaction > 0){\n    transactionData.push(weight);    \n\n    //stable\n    if(transactionData.length > stableSize+1){\n        var stabletmp = true;\n        for (var i = transactionData.length-1; i > transactionData.length-1-stableSize; i--){\n            if (transactionData[i] !== transactionData[i-1]){\n                stabletmp = false;\n                msg.stable = stabletmp;\n                break;\n            }\n            msg.stable = stabletmp;\n        }\n    }else{\n        msg.stable = false;\n    }\n\n    //duration & transactionMaxWeight\n    duration = (Number(Date.now()) - Number(transaction));\n    if( (weight>transactionMaxWeight) || (transactionMaxWeight === null)){\n        transactionMaxWeight = weight;\n        flow.set(\"transactionMaxWeight\",transactionMaxWeight);\n    }\n    \n    if(!transactionHasMaxWeight && weight > maxWeight){\n        msg.transactionHasMaxWeight = true;\n        flow.set('transactionHasMaxWeight',true);\n    }\n    \n    if(!transactionHasMinWeight && weight < minWeight){\n        msg.transactionHasMinWeight = true;\n        flow.set('transactionHasMinWeight',true);\n    }\n    \n    //max duartion\n    if(!transactionHasMaxDuration && duration > maxDuration){\n        msg.transactionHasMaxDuration = true;\n        flow.set('transactionHasMaxDuration',true);\n    }\n}\n\n//result\nmsg.metadata = {\n    'weight':weight,\n    'prevWeight':prevWeight,\n    'prevTransaction':prevTransaction,\n    'transaction':transaction,\n    'on':msg.on,\n    'transactionDataCount':transactionData.length,\n    'stable':msg.stable,\n    'duration':Math.round(duration/1000),\n    'transactionMaxWeight':transactionMaxWeight,\n    'waybill':waybill,\n    'perimetr':true,\n    'weight1':msg.weight1,\n    'weight2':msg.weight2,\n    'weight_center':msg.weight_center,\n    'driverInCar':false\n}\nflow.set('transactionData',transactionData);\nflow.set('prevWeight',weight);\nflow.set('transactionMetadata',msg.metadata);\nflow.set('lasttimedata', new Date());\nmsg.is_minus = is_minus;\n\nreturn msg;","outputs":1,"noerr":0,"x":176.6666259765625,"y":546.6666374206543,"wires":[["1c4ad2d8.60bc1d","88bfb82e.6a24c8","69687719.d7a488","ff38c514.357bd8","7809bbdd.3a7bc4"]]},{"id":"ba1521cb.545c9","type":"function","z":"2f07d3e2.0f102c","name":"get weight from accounting system","func":"var transactionMetadata = flow.get('transactionMetadata');\nvar transactionMaxWeight = flow.get('transactionMaxWeight');\nvar driverWeight = flow.get('driverWeight');\nvar buisness_data = msg.req.query;\n\nmsg.metadata = Object.assign(transactionMetadata,buisness_data);\n\n//check driver in a car\nvar driver_in = false;\nmsg.driverWeight = driverWeight;\nif((transactionMaxWeight - msg.metadata.weight) < driverWeight){\n    driver_in = true;\n}\n\nmsg.event_id = flow.get('event_get_weight_acc');\ntransactionWaybill = flow.get('transactionWaybill');\nif (!transactionWaybill){\n    flow.set('transactionWaybill',msg.req.query.reader);\n}\nmsg.description = ' '+buisness_data.operation_name+'. '+buisness_data.operation_type+'. Зважили в 1С. Поточна вага: ' + msg.metadata.weight+\" Номер авто: \"+buisness_data.truck1+\" \"+buisness_data.truck2+\" \"+buisness_data.item_name;\nmsg.transactionMetadata = transactionMetadata;\nmsg.driver_in = driver_in;\n\nreturn msg;","outputs":1,"noerr":0,"x":476.6666259765625,"y":846.6666374206543,"wires":[["7867597a.b0e5a8","151c0125.455ccf","ffc6af25.a67ff"]]},{"id":"8c858423.3e83a8","type":"http request","z":"2f07d3e2.0f102c","name":"EVENTS","method":"POST","ret":"txt","url":"","tls":"","x":1216.6666259765625,"y":566.6666374206543,"wires":[["eefc56a0.a54ad8","49bc31cd.17af5"]]},{"id":"41c1d2ef.6116fc","type":"switch","z":"2f07d3e2.0f102c","name":"take snapshot","property":"snapshot","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":1273.8095703125,"y":666.6666374206543,"wires":[["8d7c9fdf.b49c3"]]},{"id":"661cbd57.4afd94","type":"json","z":"2f07d3e2.0f102c","name":"","x":1126.6666259765625,"y":465.2380180358887,"wires":[["24785d05.a58d72"]]},{"id":"922ed96c.551b68","type":"debug","z":"2f07d3e2.0f102c","name":"IN event","active":false,"console":"true","complete":"payload","x":1173.6666259765625,"y":426.6666374206543,"wires":[]},{"id":"7e876d15.ec5eb4","type":"function","z":"2f07d3e2.0f102c","name":"move in","func":"msg.event_id = flow.get('event_move_in_id');\nmsg.description = 'Заїзд на ваги. Поточна вага: ' + msg.metadata.weight;\n\nreturn msg;","outputs":1,"noerr":0,"x":586.6666259765625,"y":486.6666374206543,"wires":[["7867597a.b0e5a8"]]},{"id":"860eb4d5.c8df08","type":"function","z":"2f07d3e2.0f102c","name":"off","func":"msg.event_id = flow.get('event_off_id');\nmsg.description = 'Прилад відключено';\nmsg.metadata = {\n    'state':msg.checkHealth\n}\nreturn msg;","outputs":1,"noerr":0,"x":616.6666259765625,"y":726.6666374206543,"wires":[["7867597a.b0e5a8"]]},{"id":"33549f98.871fc","type":"function","z":"2f07d3e2.0f102c","name":"on","func":"msg.event_id = flow.get('event_on_id');\nmsg.description = 'Прилад підключено';\nmsg.metadata = {\n    'state':msg.checkHealth\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":616.6666259765625,"y":686.6666374206543,"wires":[["7867597a.b0e5a8"]]},{"id":"b7a2d606.39ace8","type":"function","z":"2f07d3e2.0f102c","name":"move out","func":"msg.event_id = flow.get('event_move_out_id');\nmsg.description = 'Зїзд з ваг. Поточна вага: ' + msg.metadata.weight;\n\nreturn msg;","outputs":1,"noerr":0,"x":586.6666259765625,"y":526.6666374206543,"wires":[["7867597a.b0e5a8"]]},{"id":"78243dfa.2c4834","type":"function","z":"2f07d3e2.0f102c","name":"transaction has max duration","func":"msg.event_id = flow.get('event_max_duration');\nmsg.description = 'Перевищено максимальний час находження на вагах, сек: ' + msg.metadata.duration;\n\nreturn msg;","outputs":1,"noerr":0,"x":646.6666259765625,"y":606.6666374206543,"wires":[["7867597a.b0e5a8"]]},{"id":"ce235203.7d98f","type":"function","z":"2f07d3e2.0f102c","name":"empty waybill","func":"msg.event_id = flow.get('event_fake_traffic');\nmsg.description = 'Холостий проїзд по вагам. Тривалість проїзду ' + Math.round(msg.metadata.duration/60)+ 'хв.';\n\nreturn msg;","outputs":1,"noerr":0,"x":746.6666259765625,"y":446.6666374206543,"wires":[["7867597a.b0e5a8"]]},{"id":"a348c42a.fc98f8","type":"function","z":"2f07d3e2.0f102c","name":"transactionHasMinWeight","func":"msg.event_id = flow.get('event_min_weight');\nmsg.description = 'Перевищена мінімально-допустима вага, кг: ' + msg.metadata.weight;\n\nreturn msg;","outputs":1,"noerr":0,"x":636.6666259765625,"y":646.6666374206543,"wires":[["7867597a.b0e5a8"]]},{"id":"8e763bc6.acc0a8","type":"function","z":"2f07d3e2.0f102c","name":"move in minus","func":"msg.event_id = flow.get('event_move_in_minus_id');\nmsg.description = 'Заїзд із мінусом. ' + msg.prevWeight +' кг.';\n\nreturn msg;","outputs":1,"noerr":0,"x":596.6666259765625,"y":406.6666374206543,"wires":[["7867597a.b0e5a8"]]},{"id":"f98251a9.7fefa","type":"link in","z":"2f07d3e2.0f102c","name":"s2","links":["556bfb0.96fe904"],"x":41.6666259765625,"y":546.6666374206543,"wires":[["27f56faf.33f7a","384febb8.047164","6dfee979.20b038","d071010b.afe1","be96c806.746638"]]},{"id":"1c4ad2d8.60bc1d","type":"switch","z":"2f07d3e2.0f102c","name":"switch move","property":"on","propertyType":"msg","rules":[{"t":"true"},{"t":"false"}],"checkall":"true","outputs":2,"x":396.6666259765625,"y":526.6666374206543,"wires":[["7e876d15.ec5eb4"],["b7a2d606.39ace8","e9f63d8f.696b8"]]},{"id":"69687719.d7a488","type":"switch","z":"2f07d3e2.0f102c","name":"max duration","property":"transactionHasMaxDuration","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":376.6666259765625,"y":606.6666374206543,"wires":[["78243dfa.2c4834"]]},{"id":"ff38c514.357bd8","type":"switch","z":"2f07d3e2.0f102c","name":"switch min weight","property":"transactionHasMinWeight","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":396.6666259765625,"y":646.6666374206543,"wires":[["a348c42a.fc98f8"]]},{"id":"7809bbdd.3a7bc4","type":"switch","z":"2f07d3e2.0f102c","name":"switch minus in","property":"is_minus","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":396.6666259765625,"y":466.6666374206543,"wires":[["8e763bc6.acc0a8"]]},{"id":"151c0125.455ccf","type":"switch","z":"2f07d3e2.0f102c","name":"","property":"driver_in","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":766.6666259765625,"y":786.6666374206543,"wires":[["2b619319.17edec","3be724aa.c5cecc"]]},{"id":"ffc6af25.a67ff","type":"debug","z":"2f07d3e2.0f102c","name":"","active":false,"console":"false","complete":"true","x":736.6666259765625,"y":873.6666374206543,"wires":[]},{"id":"41708558.134b7c","type":"http in","z":"2f07d3e2.0f102c","name":"","url":"/getWeight_4","method":"get","swaggerDoc":"","x":146.6666259765625,"y":906.6666374206543,"wires":[["bfe7a875.6c2528","ba1521cb.545c9","f3c29cef.c7152"]]},{"id":"eefc56a0.a54ad8","type":"function","z":"2f07d3e2.0f102c","name":"parser","func":"var str = {\n    payload: msg.payload,\n    event_id: msg.event_id,\n    metadata: msg.metadata,\n    driverWeight: msg.driverWeight,\n    description: msg.description,\n    url: msg.url,\n    main_host: msg.main_host,\n    event_url: msg.event_url,\n    statusCode: msg.statusCode,\n    responseUrl: msg.responseUrl\n    \n};\nmsg.payload = JSON.stringify(str);\nreturn msg;","outputs":1,"noerr":0,"x":1381.666748046875,"y":616.6666069030762,"wires":[["2702db46.dd2884"]]},{"id":"49bc31cd.17af5","type":"debug","z":"2f07d3e2.0f102c","name":"","active":false,"console":"false","complete":"true","x":1368.1666259765625,"y":560.4166374206543,"wires":[]},{"id":"2b619319.17edec","type":"function","z":"2f07d3e2.0f102c","name":"driver_in event","func":"msg.event_id = flow.get('event_driver_in');\nmsg.description = 'При зважуванні водій в кабіні. Вага: ' + msg.metadata.weight+\"кг. Номер авто: \"+msg.metadata.truck1+\" \"+msg.metadata.truck2+\" \"+msg.metadata.item_name;\n\nreturn msg;","outputs":1,"noerr":0,"x":998.6825561523438,"y":688.8730583190918,"wires":[[]]},{"id":"8d7c9fdf.b49c3","type":"random","z":"2f07d3e2.0f102c","name":"","low":"1","high":"2","inte":"true","property":"random","x":1460.6666259765625,"y":667.6666374206543,"wires":[["6a9b25e5.919a2c"]]},{"id":"24785d05.a58d72","type":"debug","z":"2f07d3e2.0f102c","name":"IN event","active":false,"console":"true","complete":"payload","x":1267.5238037109375,"y":505.6665954589844,"wires":[]},{"id":"a27c747.3c7a588","type":"switch","z":"2f07d3e2.0f102c","name":"","property":"checkHealth","propertyType":"msg","rules":[{"t":"true"},{"t":"false"}],"checkall":"true","outputs":2,"x":476.6666259765625,"y":746.6666374206543,"wires":[["33549f98.871fc"],["860eb4d5.c8df08"]]},{"id":"e9f63d8f.696b8","type":"switch","z":"2f07d3e2.0f102c","name":"waybill","property":"metadata.waybill","propertyType":"msg","rules":[{"t":"null"}],"checkall":"true","outputs":1,"x":586.6666259765625,"y":446.6666374206543,"wires":[["ce235203.7d98f"]]},{"id":"384febb8.047164","type":"socket-io-out","z":"2f07d3e2.0f102c","name":"socket 4001","event":"83c149ec.6b9648","server":"5c7d224d.8a636c","x":176.6666259765625,"y":626.6666374206543,"wires":[]},{"id":"6dfee979.20b038","type":"debug","z":"2f07d3e2.0f102c","name":"IN weight","active":false,"console":"true","complete":"payload","x":173.6666259765625,"y":481.6666374206543,"wires":[]},{"id":"d071010b.afe1","type":"ui_text","z":"2f07d3e2.0f102c","group":"ce8a2022.9dbe7","order":0,"width":0,"height":0,"name":"","label":"Поточна вага:","format":"{{msg.payload}}","layout":"row-spread","x":183.6666259765625,"y":703.6666374206543,"wires":[]},{"id":"be96c806.746638","type":"ui_chart","z":"2f07d3e2.0f102c","name":"","group":"d03ed285.c2f47","order":0,"width":"6","height":"6","label":"Графік ваги","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","ymin":"0==","ymax":"","removeOlder":"10","removeOlderPoints":"","removeOlderUnit":"60","cutout":0,"x":197.6666259765625,"y":444.6666374206543,"wires":[[],[]]},{"id":"3be724aa.c5cecc","type":"debug","z":"2f07d3e2.0f102c","name":"","active":false,"console":"false","complete":"true","x":905.6666259765625,"y":827.6666374206543,"wires":[]},{"id":"bfe7a875.6c2528","type":"function","z":"2f07d3e2.0f102c","name":"response","func":"msg.payload = flow.get('transactionMetadata');\nmsg.payload.driverInCar = false;\ntransactionWaybill = flow.get('transactionWaybill');\nmsg.payload.transactionWaybill = transactionWaybill;\nif(transactionWaybill && transactionWaybill !== msg.req.query.reader){\n    msg.payload.status = false;    \n}else {\n    msg.payload.status = true;    \n}\nreturn msg;","outputs":1,"noerr":0,"x":389.6666259765625,"y":906.6666374206543,"wires":[["98a05982.56dd18","fd0abaae.cfa6c8"]]},{"id":"2702db46.dd2884","type":"debug","z":"2f07d3e2.0f102c","name":"IN response event","active":false,"console":"true","complete":"payload","x":1544.6666259765625,"y":601.0951957702637,"wires":[]},{"id":"6a9b25e5.919a2c","type":"function","z":"2f07d3e2.0f102c","name":"photo","func":"\n\n\n\nif(msg.random == 1){\n           msg.payload = {\n            snapshot: flow.get(\"p1\")\n            }   \n    }else if(msg.random == 2){\n      msg.payload = {\n            snapshot: flow.get(\"p2\")\n            }    \n    }else{\n      msg.payload = {\n            snapshot: flow.get(\"p3\")\n            }   \n    }\n\n\n\nreturn msg;","outputs":1,"noerr":0,"x":1624.6666259765625,"y":667.6666374206543,"wires":[["b26651af.e69a8"]]},{"id":"32cceeff.77a022","type":"function","z":"2f07d3e2.0f102c","name":"check scale health","func":"var lastcheckHealth = flow.get('checkHealth');\nvar checkHealth = null;\nvar lasttimedata = flow.get('lasttimedata');\n\nvar currenttimedata = new Date();\n\nif ((currenttimedata - lasttimedata) > 3000){\n    checkHealth = false;\n} else {\n    checkHealth = true;\n}\n\nflow.set(\"checkHealth\",checkHealth);\n\nif (lastcheckHealth != checkHealth){\n    msg.checkHealth = checkHealth;\n}else{\n    msg.checkHealth = null;\n}\nmsg.payload = checkHealth;\n\nreturn msg;","outputs":1,"noerr":0,"x":296.6666259765625,"y":786.6666374206543,"wires":[["a27c747.3c7a588"]]},{"id":"98a05982.56dd18","type":"http response","z":"2f07d3e2.0f102c","name":"","x":536.6666259765625,"y":906.6666374206543,"wires":[]},{"id":"fd0abaae.cfa6c8","type":"debug","z":"2f07d3e2.0f102c","name":"","active":false,"console":"false","complete":"false","x":707.6666259765625,"y":941.6666374206543,"wires":[]},{"id":"b26651af.e69a8","type":"function","z":"2f07d3e2.0f102c","name":"snapshot payload","func":"var event_id = msg.event_id;\nvar scale_id = global.get('scale_id_out');\n//var tbase64   = msg.payload.toString('base64');\nvar tbase64   = msg.payload.snapshot;\nmsg.payload = {\n    'event':{\n        'id':msg.event_id\n    },\n    'device':{\n        'id':scale_id\n        \n    },\n    'snapshot':tbase64,\n    'ext':'jpeg'\n}\n\nmsg.headers = {\n    \"content-type\":\"application/json\"\n}\n\nmsg.url = flow.get('main_host')+flow.get('snapshot_url');\nmsg.main_host = flow.get('main_host');\nmsg.snapshot_url = flow.get('snapshot_url');\n\nreturn msg;","outputs":1,"noerr":0,"x":1884.6666259765625,"y":659.6666374206543,"wires":[["6e487dc9.97db44","96ef1780.7d8478"]]},{"id":"38ad78f0.4abb68","type":"inject","z":"2f07d3e2.0f102c","name":"","topic":"","payload":"","payloadType":"date","repeat":"1","crontab":"","once":false,"x":116.6666259765625,"y":786.6666374206543,"wires":[["32cceeff.77a022"]]},{"id":"6e487dc9.97db44","type":"http request","z":"2f07d3e2.0f102c","name":"send a snapshot","method":"POST","ret":"txt","url":"","tls":"145ca816.bc4f08","x":2116.6666259765625,"y":666.6666374206543,"wires":[["6decd32b.299d4c"]]},{"id":"96ef1780.7d8478","type":"debug","z":"2f07d3e2.0f102c","name":"Camera 1","active":true,"console":"true","complete":"payload","x":2080.6666259765625,"y":733.6666374206543,"wires":[]},{"id":"6decd32b.299d4c","type":"json","z":"2f07d3e2.0f102c","name":"","x":2296.6666259765625,"y":655.6666374206543,"wires":[["3822d387.0ab28c"]]},{"id":"3822d387.0ab28c","type":"debug","z":"2f07d3e2.0f102c","name":"event Apex","active":true,"console":"true","complete":"payload","x":2459.6666259765625,"y":665.6666374206543,"wires":[]},{"id":"27be8ee5.b98ab2","type":"http in","z":"2f07d3e2.0f102c","name":"","url":"/getSimpleWeight","method":"get","swaggerDoc":"","x":188.33331298828125,"y":1078.333254814148,"wires":[["46ae438.e9023bc","f3c29cef.c7152"]]},{"id":"46ae438.e9023bc","type":"function","z":"2f07d3e2.0f102c","name":"response","func":"msg.payload = flow.get('transactionMetadata').weight;\nreturn msg;","outputs":1,"noerr":0,"x":521.9999885559082,"y":1083.3332958221436,"wires":[["e00ffb87.d6f178"]]},{"id":"e00ffb87.d6f178","type":"http response","z":"2f07d3e2.0f102c","name":"","x":745.6666793823242,"y":1084.3332958221436,"wires":[]},{"id":"ca0a4a5d.144578","type":"http in","z":"2f07d3e2.0f102c","name":"","url":"/socket","method":"get","swaggerDoc":"","x":141.66665649414062,"y":1214.999885559082,"wires":[["cc2274dd.0daff8"]]},{"id":"31b73038.33728","type":"template","z":"2f07d3e2.0f102c","name":"socket page","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"<html>\n     \n  <body>\n    <h1><p id='weight'></p></h1>\n    \n     <script>\n    setTimeout(function() {\n       ;(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.io=f()}})(function(){var define,module,exports;return function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}({1:[function(_dereq_,module,exports){module.exports=_dereq_(\"./lib/\")},{\"./lib/\":2}],2:[function(_dereq_,module,exports){module.exports=_dereq_(\"./socket\");module.exports.parser=_dereq_(\"engine.io-parser\")},{\"./socket\":3,\"engine.io-parser\":19}],3:[function(_dereq_,module,exports){(function(global){var transports=_dereq_(\"./transports\");var Emitter=_dereq_(\"component-emitter\");var debug=_dereq_(\"debug\")(\"engine.io-client:socket\");var index=_dereq_(\"indexof\");var parser=_dereq_(\"engine.io-parser\");var parseuri=_dereq_(\"parseuri\");var parsejson=_dereq_(\"parsejson\");var parseqs=_dereq_(\"parseqs\");module.exports=Socket;function noop(){}function Socket(uri,opts){if(!(this instanceof Socket))return new Socket(uri,opts);opts=opts||{};if(uri&&\"object\"==typeof uri){opts=uri;uri=null}if(uri){uri=parseuri(uri);opts.hostname=uri.host;opts.secure=uri.protocol==\"https\"||uri.protocol==\"wss\";opts.port=uri.port;if(uri.query)opts.query=uri.query}else if(opts.host){opts.hostname=parseuri(opts.host).host}this.secure=null!=opts.secure?opts.secure:global.location&&\"https:\"==location.protocol;if(opts.hostname&&!opts.port){opts.port=this.secure?\"443\":\"80\"}this.agent=opts.agent||false;this.hostname=opts.hostname||(global.location?location.hostname:\"localhost\");this.port=opts.port||(global.location&&location.port?location.port:this.secure?443:80);this.query=opts.query||{};if(\"string\"==typeof this.query)this.query=parseqs.decode(this.query);this.upgrade=false!==opts.upgrade;this.path=(opts.path||\"/engine.io\").replace(/\\/$/,\"\")+\"/\";this.forceJSONP=!!opts.forceJSONP;this.jsonp=false!==opts.jsonp;this.forceBase64=!!opts.forceBase64;this.enablesXDR=!!opts.enablesXDR;this.timestampParam=opts.timestampParam||\"t\";this.timestampRequests=opts.timestampRequests;this.transports=opts.transports||[\"polling\",\"websocket\"];this.readyState=\"\";this.writeBuffer=[];this.policyPort=opts.policyPort||843;this.rememberUpgrade=opts.rememberUpgrade||false;this.binaryType=null;this.onlyBinaryUpgrades=opts.onlyBinaryUpgrades;this.perMessageDeflate=false!==opts.perMessageDeflate?opts.perMessageDeflate||{}:false;if(true===this.perMessageDeflate)this.perMessageDeflate={};if(this.perMessageDeflate&&null==this.perMessageDeflate.threshold){this.perMessageDeflate.threshold=1024}this.pfx=opts.pfx||null;this.key=opts.key||null;this.passphrase=opts.passphrase||null;this.cert=opts.cert||null;this.ca=opts.ca||null;this.ciphers=opts.ciphers||null;this.rejectUnauthorized=opts.rejectUnauthorized===undefined?null:opts.rejectUnauthorized;var freeGlobal=typeof global==\"object\"&&global;if(freeGlobal.global===freeGlobal){if(opts.extraHeaders&&Object.keys(opts.extraHeaders).length>0){this.extraHeaders=opts.extraHeaders}}this.open()}Socket.priorWebsocketSuccess=false;Emitter(Socket.prototype);Socket.protocol=parser.protocol;Socket.Socket=Socket;Socket.Transport=_dereq_(\"./transport\");Socket.transports=_dereq_(\"./transports\");Socket.parser=_dereq_(\"engine.io-parser\");Socket.prototype.createTransport=function(name){debug('creating transport \"%s\"',name);var query=clone(this.query);query.EIO=parser.protocol;query.transport=name;if(this.id)query.sid=this.id;var transport=new transports[name]({agent:this.agent,hostname:this.hostname,port:this.port,secure:this.secure,path:this.path,query:query,forceJSONP:this.forceJSONP,jsonp:this.jsonp,forceBase64:this.forceBase64,enablesXDR:this.enablesXDR,timestampRequests:this.timestampRequests,timestampParam:this.timestampParam,policyPort:this.policyPort,socket:this,pfx:this.pfx,key:this.key,passphrase:this.passphrase,cert:this.cert,ca:this.ca,ciphers:this.ciphers,rejectUnauthorized:this.rejectUnauthorized,perMessageDeflate:this.perMessageDeflate,extraHeaders:this.extraHeaders});return transport};function clone(obj){var o={};for(var i in obj){if(obj.hasOwnProperty(i)){o[i]=obj[i]}}return o}Socket.prototype.open=function(){var transport;if(this.rememberUpgrade&&Socket.priorWebsocketSuccess&&this.transports.indexOf(\"websocket\")!=-1){transport=\"websocket\"}else if(0===this.transports.length){var self=this;setTimeout(function(){self.emit(\"error\",\"No transports available\")},0);return}else{transport=this.transports[0]}this.readyState=\"opening\";try{transport=this.createTransport(transport)}catch(e){this.transports.shift();this.open();return}transport.open();this.setTransport(transport)};Socket.prototype.setTransport=function(transport){debug(\"setting transport %s\",transport.name);var self=this;if(this.transport){debug(\"clearing existing transport %s\",this.transport.name);this.transport.removeAllListeners()}this.transport=transport;transport.on(\"drain\",function(){self.onDrain()}).on(\"packet\",function(packet){self.onPacket(packet)}).on(\"error\",function(e){self.onError(e)}).on(\"close\",function(){self.onClose(\"transport close\")})};Socket.prototype.probe=function(name){debug('probing transport \"%s\"',name);var transport=this.createTransport(name,{probe:1}),failed=false,self=this;Socket.priorWebsocketSuccess=false;function onTransportOpen(){if(self.onlyBinaryUpgrades){var upgradeLosesBinary=!this.supportsBinary&&self.transport.supportsBinary;failed=failed||upgradeLosesBinary}if(failed)return;debug('probe transport \"%s\" opened',name);transport.send([{type:\"ping\",data:\"probe\"}]);transport.once(\"packet\",function(msg){if(failed)return;if(\"pong\"==msg.type&&\"probe\"==msg.data){debug('probe transport \"%s\" pong',name);self.upgrading=true;self.emit(\"upgrading\",transport);if(!transport)return;Socket.priorWebsocketSuccess=\"websocket\"==transport.name;debug('pausing current transport \"%s\"',self.transport.name);self.transport.pause(function(){if(failed)return;if(\"closed\"==self.readyState)return;debug(\"changing transport and sending upgrade packet\");cleanup();self.setTransport(transport);transport.send([{type:\"upgrade\"}]);self.emit(\"upgrade\",transport);transport=null;self.upgrading=false;self.flush()})}else{debug('probe transport \"%s\" failed',name);var err=new Error(\"probe error\");err.transport=transport.name;self.emit(\"upgradeError\",err)}})}function freezeTransport(){if(failed)return;failed=true;cleanup();transport.close();transport=null}function onerror(err){var error=new Error(\"probe error: \"+err);error.transport=transport.name;freezeTransport();debug('probe transport \"%s\" failed because of error: %s',name,err);self.emit(\"upgradeError\",error)}function onTransportClose(){onerror(\"transport closed\")}function onclose(){onerror(\"socket closed\")}function onupgrade(to){if(transport&&to.name!=transport.name){debug('\"%s\" works - aborting \"%s\"',to.name,transport.name);freezeTransport()}}function cleanup(){transport.removeListener(\"open\",onTransportOpen);transport.removeListener(\"error\",onerror);transport.removeListener(\"close\",onTransportClose);self.removeListener(\"close\",onclose);self.removeListener(\"upgrading\",onupgrade)}transport.once(\"open\",onTransportOpen);transport.once(\"error\",onerror);transport.once(\"close\",onTransportClose);this.once(\"close\",onclose);this.once(\"upgrading\",onupgrade);transport.open()};Socket.prototype.onOpen=function(){debug(\"socket open\");this.readyState=\"open\";Socket.priorWebsocketSuccess=\"websocket\"==this.transport.name;this.emit(\"open\");this.flush();if(\"open\"==this.readyState&&this.upgrade&&this.transport.pause){debug(\"starting upgrade probes\");for(var i=0,l=this.upgrades.length;i<l;i++){this.probe(this.upgrades[i])}}};Socket.prototype.onPacket=function(packet){if(\"opening\"==this.readyState||\"open\"==this.readyState){debug('socket receive: type \"%s\", data \"%s\"',packet.type,packet.data);this.emit(\"packet\",packet);this.emit(\"heartbeat\");switch(packet.type){case\"open\":this.onHandshake(parsejson(packet.data));break;case\"pong\":this.setPing();this.emit(\"pong\");break;case\"error\":var err=new Error(\"server error\");err.code=packet.data;this.onError(err);break;case\"message\":this.emit(\"data\",packet.data);this.emit(\"message\",packet.data);break}}else{debug('packet received with socket readyState \"%s\"',this.readyState)}};Socket.prototype.onHandshake=function(data){this.emit(\"handshake\",data);this.id=data.sid;this.transport.query.sid=data.sid;this.upgrades=this.filterUpgrades(data.upgrades);this.pingInterval=data.pingInterval;this.pingTimeout=data.pingTimeout;this.onOpen();if(\"closed\"==this.readyState)return;this.setPing();this.removeListener(\"heartbeat\",this.onHeartbeat);this.on(\"heartbeat\",this.onHeartbeat)};Socket.prototype.onHeartbeat=function(timeout){clearTimeout(this.pingTimeoutTimer);var self=this;self.pingTimeoutTimer=setTimeout(function(){if(\"closed\"==self.readyState)return;self.onClose(\"ping timeout\")},timeout||self.pingInterval+self.pingTimeout)};Socket.prototype.setPing=function(){var self=this;clearTimeout(self.pingIntervalTimer);self.pingIntervalTimer=setTimeout(function(){debug(\"writing ping packet - expecting pong within %sms\",self.pingTimeout);self.ping();self.onHeartbeat(self.pingTimeout)},self.pingInterval)};Socket.prototype.ping=function(){var self=this;this.sendPacket(\"ping\",function(){self.emit(\"ping\")})};Socket.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen);this.prevBufferLen=0;if(0===this.writeBuffer.length){this.emit(\"drain\")}else{this.flush()}};Socket.prototype.flush=function(){if(\"closed\"!=this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length){debug(\"flushing %d packets in socket\",this.writeBuffer.length);this.transport.send(this.writeBuffer);this.prevBufferLen=this.writeBuffer.length;this.emit(\"flush\")}};Socket.prototype.write=Socket.prototype.send=function(msg,options,fn){this.sendPacket(\"message\",msg,options,fn);return this};Socket.prototype.sendPacket=function(type,data,options,fn){if(\"function\"==typeof data){fn=data;data=undefined}if(\"function\"==typeof options){fn=options;options=null}if(\"closing\"==this.readyState||\"closed\"==this.readyState){return}options=options||{};options.compress=false!==options.compress;var packet={type:type,data:data,options:options};this.emit(\"packetCreate\",packet);this.writeBuffer.push(packet);if(fn)this.once(\"flush\",fn);this.flush()};Socket.prototype.close=function(){if(\"opening\"==this.readyState||\"open\"==this.readyState){this.readyState=\"closing\";var self=this;if(this.writeBuffer.length){this.once(\"drain\",function(){if(this.upgrading){waitForUpgrade()}else{close()}})}else if(this.upgrading){waitForUpgrade()}else{close()}}function close(){self.onClose(\"forced close\");debug(\"socket closing - telling transport to close\");self.transport.close()}function cleanupAndClose(){self.removeListener(\"upgrade\",cleanupAndClose);self.removeListener(\"upgradeError\",cleanupAndClose);close()}function waitForUpgrade(){self.once(\"upgrade\",cleanupAndClose);self.once(\"upgradeError\",cleanupAndClose)}return this};Socket.prototype.onError=function(err){debug(\"socket error %j\",err);Socket.priorWebsocketSuccess=false;this.emit(\"error\",err);this.onClose(\"transport error\",err)};Socket.prototype.onClose=function(reason,desc){if(\"opening\"==this.readyState||\"open\"==this.readyState||\"closing\"==this.readyState){debug('socket close with reason: \"%s\"',reason);var self=this;clearTimeout(this.pingIntervalTimer);clearTimeout(this.pingTimeoutTimer);this.transport.removeAllListeners(\"close\");this.transport.close();this.transport.removeAllListeners();this.readyState=\"closed\";this.id=null;this.emit(\"close\",reason,desc);self.writeBuffer=[];self.prevBufferLen=0}};Socket.prototype.filterUpgrades=function(upgrades){var filteredUpgrades=[];for(var i=0,j=upgrades.length;i<j;i++){if(~index(this.transports,upgrades[i]))filteredUpgrades.push(upgrades[i])}return filteredUpgrades}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{\"./transport\":4,\"./transports\":5,\"component-emitter\":15,debug:17,\"engine.io-parser\":19,indexof:23,parsejson:26,parseqs:27,parseuri:28}],4:[function(_dereq_,module,exports){var parser=_dereq_(\"engine.io-parser\");var Emitter=_dereq_(\"component-emitter\");module.exports=Transport;function Transport(opts){this.path=opts.path;this.hostname=opts.hostname;this.port=opts.port;this.secure=opts.secure;this.query=opts.query;this.timestampParam=opts.timestampParam;this.timestampRequests=opts.timestampRequests;this.readyState=\"\";this.agent=opts.agent||false;this.socket=opts.socket;this.enablesXDR=opts.enablesXDR;this.pfx=opts.pfx;this.key=opts.key;this.passphrase=opts.passphrase;this.cert=opts.cert;this.ca=opts.ca;this.ciphers=opts.ciphers;this.rejectUnauthorized=opts.rejectUnauthorized;this.extraHeaders=opts.extraHeaders}Emitter(Transport.prototype);Transport.prototype.onError=function(msg,desc){var err=new Error(msg);err.type=\"TransportError\";err.description=desc;this.emit(\"error\",err);return this};Transport.prototype.open=function(){if(\"closed\"==this.readyState||\"\"==this.readyState){this.readyState=\"opening\";this.doOpen()}return this};Transport.prototype.close=function(){if(\"opening\"==this.readyState||\"open\"==this.readyState){this.doClose();this.onClose()}return this};Transport.prototype.send=function(packets){if(\"open\"==this.readyState){this.write(packets)}else{throw new Error(\"Transport not open\")}};Transport.prototype.onOpen=function(){this.readyState=\"open\";this.writable=true;this.emit(\"open\")};Transport.prototype.onData=function(data){var packet=parser.decodePacket(data,this.socket.binaryType);this.onPacket(packet)};Transport.prototype.onPacket=function(packet){this.emit(\"packet\",packet)};Transport.prototype.onClose=function(){this.readyState=\"closed\";this.emit(\"close\")}},{\"component-emitter\":15,\"engine.io-parser\":19}],5:[function(_dereq_,module,exports){(function(global){var XMLHttpRequest=_dereq_(\"xmlhttprequest-ssl\");var XHR=_dereq_(\"./polling-xhr\");var JSONP=_dereq_(\"./polling-jsonp\");var websocket=_dereq_(\"./websocket\");exports.polling=polling;exports.websocket=websocket;function polling(opts){var xhr;var xd=false;var xs=false;var jsonp=false!==opts.jsonp;if(global.location){var isSSL=\"https:\"==location.protocol;var port=location.port;if(!port){port=isSSL?443:80}xd=opts.hostname!=location.hostname||port!=opts.port;xs=opts.secure!=isSSL}opts.xdomain=xd;opts.xscheme=xs;xhr=new XMLHttpRequest(opts);if(\"open\"in xhr&&!opts.forceJSONP){return new XHR(opts)}else{if(!jsonp)throw new Error(\"JSONP disabled\");return new JSONP(opts)}}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{\"./polling-jsonp\":6,\"./polling-xhr\":7,\"./websocket\":9,\"xmlhttprequest-ssl\":10}],6:[function(_dereq_,module,exports){(function(global){var Polling=_dereq_(\"./polling\");var inherit=_dereq_(\"component-inherit\");module.exports=JSONPPolling;var rNewline=/\\n/g;var rEscapedNewline=/\\\\n/g;var callbacks;var index=0;function empty(){}function JSONPPolling(opts){Polling.call(this,opts);this.query=this.query||{};if(!callbacks){if(!global.___eio)global.___eio=[];callbacks=global.___eio}this.index=callbacks.length;var self=this;callbacks.push(function(msg){self.onData(msg)});this.query.j=this.index;if(global.document&&global.addEventListener){global.addEventListener(\"beforeunload\",function(){if(self.script)self.script.onerror=empty},false)}}inherit(JSONPPolling,Polling);JSONPPolling.prototype.supportsBinary=false;JSONPPolling.prototype.doClose=function(){if(this.script){this.script.parentNode.removeChild(this.script);this.script=null}if(this.form){this.form.parentNode.removeChild(this.form);this.form=null;this.iframe=null}Polling.prototype.doClose.call(this)};JSONPPolling.prototype.doPoll=function(){var self=this;var script=document.createElement(\"script\");if(this.script){this.script.parentNode.removeChild(this.script);this.script=null}script.async=true;script.src=this.uri();script.onerror=function(e){self.onError(\"jsonp poll error\",e)};var insertAt=document.getElementsByTagName(\"script\")[0];if(insertAt){insertAt.parentNode.insertBefore(script,insertAt)}else{(document.head||document.body).appendChild(script)}this.script=script;var isUAgecko=\"undefined\"!=typeof navigator&&/gecko/i.test(navigator.userAgent);if(isUAgecko){setTimeout(function(){var iframe=document.createElement(\"iframe\");document.body.appendChild(iframe);document.body.removeChild(iframe)},100)}};JSONPPolling.prototype.doWrite=function(data,fn){var self=this;if(!this.form){var form=document.createElement(\"form\");var area=document.createElement(\"textarea\");var id=this.iframeId=\"eio_iframe_\"+this.index;var iframe;form.className=\"socketio\";form.style.position=\"absolute\";form.style.top=\"-1000px\";form.style.left=\"-1000px\";form.target=id;form.method=\"POST\";form.setAttribute(\"accept-charset\",\"utf-8\");area.name=\"d\";form.appendChild(area);document.body.appendChild(form);this.form=form;this.area=area}this.form.action=this.uri();function complete(){initIframe();fn()}function initIframe(){if(self.iframe){try{self.form.removeChild(self.iframe)}catch(e){self.onError(\"jsonp polling iframe removal error\",e)}}try{var html='<iframe src=\"javascript:0\" name=\"'+self.iframeId+'\">';iframe=document.createElement(html)}catch(e){iframe=document.createElement(\"iframe\");iframe.name=self.iframeId;iframe.src=\"javascript:0\"}iframe.id=self.iframeId;self.form.appendChild(iframe);self.iframe=iframe}initIframe();data=data.replace(rEscapedNewline,\"\\\\\\n\");this.area.value=data.replace(rNewline,\"\\\\n\");try{this.form.submit()}catch(e){}if(this.iframe.attachEvent){this.iframe.onreadystatechange=function(){if(self.iframe.readyState==\"complete\"){complete()}}}else{this.iframe.onload=complete}}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{\"./polling\":8,\"component-inherit\":16}],7:[function(_dereq_,module,exports){(function(global){var XMLHttpRequest=_dereq_(\"xmlhttprequest-ssl\");var Polling=_dereq_(\"./polling\");var Emitter=_dereq_(\"component-emitter\");var inherit=_dereq_(\"component-inherit\");var debug=_dereq_(\"debug\")(\"engine.io-client:polling-xhr\");module.exports=XHR;module.exports.Request=Request;function empty(){}function XHR(opts){Polling.call(this,opts);if(global.location){var isSSL=\"https:\"==location.protocol;var port=location.port;if(!port){port=isSSL?443:80}this.xd=opts.hostname!=global.location.hostname||port!=opts.port;this.xs=opts.secure!=isSSL}else{this.extraHeaders=opts.extraHeaders}}inherit(XHR,Polling);XHR.prototype.supportsBinary=true;XHR.prototype.request=function(opts){opts=opts||{};opts.uri=this.uri();opts.xd=this.xd;opts.xs=this.xs;opts.agent=this.agent||false;opts.supportsBinary=this.supportsBinary;opts.enablesXDR=this.enablesXDR;opts.pfx=this.pfx;opts.key=this.key;opts.passphrase=this.passphrase;opts.cert=this.cert;opts.ca=this.ca;opts.ciphers=this.ciphers;opts.rejectUnauthorized=this.rejectUnauthorized;opts.extraHeaders=this.extraHeaders;return new Request(opts)};XHR.prototype.doWrite=function(data,fn){var isBinary=typeof data!==\"string\"&&data!==undefined;var req=this.request({method:\"POST\",data:data,isBinary:isBinary});var self=this;req.on(\"success\",fn);req.on(\"error\",function(err){self.onError(\"xhr post error\",err)});this.sendXhr=req};XHR.prototype.doPoll=function(){debug(\"xhr poll\");var req=this.request();var self=this;req.on(\"data\",function(data){self.onData(data)});req.on(\"error\",function(err){self.onError(\"xhr poll error\",err)});this.pollXhr=req};function Request(opts){this.method=opts.method||\"GET\";this.uri=opts.uri;this.xd=!!opts.xd;this.xs=!!opts.xs;this.async=false!==opts.async;this.data=undefined!=opts.data?opts.data:null;this.agent=opts.agent;this.isBinary=opts.isBinary;this.supportsBinary=opts.supportsBinary;this.enablesXDR=opts.enablesXDR;this.pfx=opts.pfx;this.key=opts.key;this.passphrase=opts.passphrase;this.cert=opts.cert;this.ca=opts.ca;this.ciphers=opts.ciphers;this.rejectUnauthorized=opts.rejectUnauthorized;this.extraHeaders=opts.extraHeaders;this.create()}Emitter(Request.prototype);Request.prototype.create=function(){var opts={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};opts.pfx=this.pfx;opts.key=this.key;opts.passphrase=this.passphrase;opts.cert=this.cert;opts.ca=this.ca;opts.ciphers=this.ciphers;opts.rejectUnauthorized=this.rejectUnauthorized;var xhr=this.xhr=new XMLHttpRequest(opts);var self=this;try{debug(\"xhr open %s: %s\",this.method,this.uri);xhr.open(this.method,this.uri,this.async);try{if(this.extraHeaders){xhr.setDisableHeaderCheck(true);for(var i in this.extraHeaders){if(this.extraHeaders.hasOwnProperty(i)){xhr.setRequestHeader(i,this.extraHeaders[i])}}}}catch(e){}if(this.supportsBinary){xhr.responseType=\"arraybuffer\"}if(\"POST\"==this.method){try{if(this.isBinary){xhr.setRequestHeader(\"Content-type\",\"application/octet-stream\")}else{xhr.setRequestHeader(\"Content-type\",\"text/plain;charset=UTF-8\")}}catch(e){}}if(\"withCredentials\"in xhr){xhr.withCredentials=true}if(this.hasXDR()){xhr.onload=function(){self.onLoad()};xhr.onerror=function(){self.onError(xhr.responseText)}}else{xhr.onreadystatechange=function(){if(4!=xhr.readyState)return;if(200==xhr.status||1223==xhr.status){self.onLoad()}else{setTimeout(function(){self.onError(xhr.status)},0)}}}debug(\"xhr data %s\",this.data);xhr.send(this.data)}catch(e){setTimeout(function(){self.onError(e)},0);return}if(global.document){this.index=Request.requestsCount++;Request.requests[this.index]=this}};Request.prototype.onSuccess=function(){this.emit(\"success\");this.cleanup()};Request.prototype.onData=function(data){this.emit(\"data\",data);this.onSuccess()};Request.prototype.onError=function(err){this.emit(\"error\",err);this.cleanup(true)};Request.prototype.cleanup=function(fromError){if(\"undefined\"==typeof this.xhr||null===this.xhr){return}if(this.hasXDR()){this.xhr.onload=this.xhr.onerror=empty}else{this.xhr.onreadystatechange=empty}if(fromError){try{this.xhr.abort()}catch(e){}}if(global.document){delete Request.requests[this.index]}this.xhr=null};Request.prototype.onLoad=function(){var data;try{var contentType;try{contentType=this.xhr.getResponseHeader(\"Content-Type\").split(\";\")[0]}catch(e){}if(contentType===\"application/octet-stream\"){data=this.xhr.response}else{if(!this.supportsBinary){data=this.xhr.responseText}else{try{data=String.fromCharCode.apply(null,new Uint8Array(this.xhr.response))}catch(e){var ui8Arr=new Uint8Array(this.xhr.response);var dataArray=[];for(var idx=0,length=ui8Arr.length;idx<length;idx++){dataArray.push(ui8Arr[idx])}data=String.fromCharCode.apply(null,dataArray)}}}}catch(e){this.onError(e)}if(null!=data){this.onData(data)}};Request.prototype.hasXDR=function(){return\"undefined\"!==typeof global.XDomainRequest&&!this.xs&&this.enablesXDR};Request.prototype.abort=function(){this.cleanup()};if(global.document){Request.requestsCount=0;Request.requests={};if(global.attachEvent){global.attachEvent(\"onunload\",unloadHandler)}else if(global.addEventListener){global.addEventListener(\"beforeunload\",unloadHandler,false)}}function unloadHandler(){for(var i in Request.requests){if(Request.requests.hasOwnProperty(i)){Request.requests[i].abort()}}}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{\"./polling\":8,\"component-emitter\":15,\"component-inherit\":16,debug:17,\"xmlhttprequest-ssl\":10}],8:[function(_dereq_,module,exports){var Transport=_dereq_(\"../transport\");var parseqs=_dereq_(\"parseqs\");var parser=_dereq_(\"engine.io-parser\");var inherit=_dereq_(\"component-inherit\");var yeast=_dereq_(\"yeast\");var debug=_dereq_(\"debug\")(\"engine.io-client:polling\");module.exports=Polling;var hasXHR2=function(){var XMLHttpRequest=_dereq_(\"xmlhttprequest-ssl\");var xhr=new XMLHttpRequest({xdomain:false});return null!=xhr.responseType}();function Polling(opts){var forceBase64=opts&&opts.forceBase64;if(!hasXHR2||forceBase64){this.supportsBinary=false}Transport.call(this,opts)}inherit(Polling,Transport);Polling.prototype.name=\"polling\";Polling.prototype.doOpen=function(){this.poll()};Polling.prototype.pause=function(onPause){var pending=0;var self=this;this.readyState=\"pausing\";function pause(){debug(\"paused\");self.readyState=\"paused\";onPause()}if(this.polling||!this.writable){var total=0;if(this.polling){debug(\"we are currently polling - waiting to pause\");total++;this.once(\"pollComplete\",function(){debug(\"pre-pause polling complete\");--total||pause()})}if(!this.writable){debug(\"we are currently writing - waiting to pause\");total++;this.once(\"drain\",function(){debug(\"pre-pause writing complete\");--total||pause()})}}else{pause()}};Polling.prototype.poll=function(){debug(\"polling\");this.polling=true;this.doPoll();this.emit(\"poll\")};Polling.prototype.onData=function(data){var self=this;debug(\"polling got data %s\",data);var callback=function(packet,index,total){if(\"opening\"==self.readyState){self.onOpen()}if(\"close\"==packet.type){self.onClose();return false}self.onPacket(packet)};parser.decodePayload(data,this.socket.binaryType,callback);if(\"closed\"!=this.readyState){this.polling=false;this.emit(\"pollComplete\");if(\"open\"==this.readyState){this.poll()}else{debug('ignoring poll - transport state \"%s\"',this.readyState)}}};Polling.prototype.doClose=function(){var self=this;function close(){debug(\"writing close packet\");self.write([{type:\"close\"}])}if(\"open\"==this.readyState){debug(\"transport open - closing\");close()}else{debug(\"transport not open - deferring close\");this.once(\"open\",close)}};Polling.prototype.write=function(packets){var self=this;this.writable=false;var callbackfn=function(){self.writable=true;self.emit(\"drain\")};var self=this;parser.encodePayload(packets,this.supportsBinary,function(data){self.doWrite(data,callbackfn)})};Polling.prototype.uri=function(){var query=this.query||{};var schema=this.secure?\"https\":\"http\";var port=\"\";if(false!==this.timestampRequests){query[this.timestampParam]=yeast()}if(!this.supportsBinary&&!query.sid){query.b64=1}query=parseqs.encode(query);if(this.port&&(\"https\"==schema&&this.port!=443||\"http\"==schema&&this.port!=80)){port=\":\"+this.port}if(query.length){query=\"?\"+query}var ipv6=this.hostname.indexOf(\":\")!==-1;return schema+\"://\"+(ipv6?\"[\"+this.hostname+\"]\":this.hostname)+port+this.path+query}},{\"../transport\":4,\"component-inherit\":16,debug:17,\"engine.io-parser\":19,parseqs:27,\"xmlhttprequest-ssl\":10,yeast:30}],9:[function(_dereq_,module,exports){(function(global){var Transport=_dereq_(\"../transport\");var parser=_dereq_(\"engine.io-parser\");var parseqs=_dereq_(\"parseqs\");var inherit=_dereq_(\"component-inherit\");var yeast=_dereq_(\"yeast\");var debug=_dereq_(\"debug\")(\"engine.io-client:websocket\");var BrowserWebSocket=global.WebSocket||global.MozWebSocket;var WebSocket=BrowserWebSocket;if(!WebSocket&&typeof window===\"undefined\"){try{WebSocket=_dereq_(\"ws\")}catch(e){}}module.exports=WS;function WS(opts){var forceBase64=opts&&opts.forceBase64;if(forceBase64){this.supportsBinary=false}this.perMessageDeflate=opts.perMessageDeflate;Transport.call(this,opts)}inherit(WS,Transport);WS.prototype.name=\"websocket\";WS.prototype.supportsBinary=true;WS.prototype.doOpen=function(){if(!this.check()){return}var self=this;var uri=this.uri();var protocols=void 0;var opts={agent:this.agent,perMessageDeflate:this.perMessageDeflate};opts.pfx=this.pfx;opts.key=this.key;opts.passphrase=this.passphrase;opts.cert=this.cert;opts.ca=this.ca;opts.ciphers=this.ciphers;opts.rejectUnauthorized=this.rejectUnauthorized;if(this.extraHeaders){opts.headers=this.extraHeaders}this.ws=BrowserWebSocket?new WebSocket(uri):new WebSocket(uri,protocols,opts);if(this.ws.binaryType===undefined){this.supportsBinary=false}if(this.ws.supports&&this.ws.supports.binary){this.supportsBinary=true;this.ws.binaryType=\"buffer\"}else{this.ws.binaryType=\"arraybuffer\"}this.addEventListeners()};WS.prototype.addEventListeners=function(){var self=this;this.ws.onopen=function(){self.onOpen()};this.ws.onclose=function(){self.onClose()};this.ws.onmessage=function(ev){self.onData(ev.data)};this.ws.onerror=function(e){self.onError(\"websocket error\",e)}};if(\"undefined\"!=typeof navigator&&/iPad|iPhone|iPod/i.test(navigator.userAgent)){WS.prototype.onData=function(data){var self=this;setTimeout(function(){Transport.prototype.onData.call(self,data)},0)}}WS.prototype.write=function(packets){var self=this;this.writable=false;var total=packets.length;for(var i=0,l=total;i<l;i++){(function(packet){parser.encodePacket(packet,self.supportsBinary,function(data){if(!BrowserWebSocket){var opts={};if(packet.options){opts.compress=packet.options.compress}if(self.perMessageDeflate){var len=\"string\"==typeof data?global.Buffer.byteLength(data):data.length;if(len<self.perMessageDeflate.threshold){opts.compress=false}}}try{if(BrowserWebSocket){self.ws.send(data)}else{self.ws.send(data,opts)}}catch(e){debug(\"websocket closed before onclose event\")}--total||done()})})(packets[i])}function done(){self.emit(\"flush\");setTimeout(function(){self.writable=true;self.emit(\"drain\")},0)}};WS.prototype.onClose=function(){Transport.prototype.onClose.call(this)};WS.prototype.doClose=function(){if(typeof this.ws!==\"undefined\"){this.ws.close()}};WS.prototype.uri=function(){var query=this.query||{};var schema=this.secure?\"wss\":\"ws\";var port=\"\";if(this.port&&(\"wss\"==schema&&this.port!=443||\"ws\"==schema&&this.port!=80)){port=\":\"+this.port}if(this.timestampRequests){query[this.timestampParam]=yeast()}if(!this.supportsBinary){query.b64=1}query=parseqs.encode(query);if(query.length){query=\"?\"+query}var ipv6=this.hostname.indexOf(\":\")!==-1;return schema+\"://\"+(ipv6?\"[\"+this.hostname+\"]\":this.hostname)+port+this.path+query};WS.prototype.check=function(){return!!WebSocket&&!(\"__initialize\"in WebSocket&&this.name===WS.prototype.name)}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{\"../transport\":4,\"component-inherit\":16,debug:17,\"engine.io-parser\":19,parseqs:27,ws:undefined,yeast:30}],10:[function(_dereq_,module,exports){var hasCORS=_dereq_(\"has-cors\");module.exports=function(opts){var xdomain=opts.xdomain;var xscheme=opts.xscheme;var enablesXDR=opts.enablesXDR;try{if(\"undefined\"!=typeof XMLHttpRequest&&(!xdomain||hasCORS)){return new XMLHttpRequest}}catch(e){}try{if(\"undefined\"!=typeof XDomainRequest&&!xscheme&&enablesXDR){return new XDomainRequest}}catch(e){}if(!xdomain){try{return new ActiveXObject(\"Microsoft.XMLHTTP\")}catch(e){}}}},{\"has-cors\":22}],11:[function(_dereq_,module,exports){module.exports=after;function after(count,callback,err_cb){var bail=false;err_cb=err_cb||noop;proxy.count=count;return count===0?callback():proxy;function proxy(err,result){if(proxy.count<=0){throw new Error(\"after called too many times\")}--proxy.count;if(err){bail=true;callback(err);callback=err_cb}else if(proxy.count===0&&!bail){callback(null,result)}}}function noop(){}},{}],12:[function(_dereq_,module,exports){module.exports=function(arraybuffer,start,end){var bytes=arraybuffer.byteLength;start=start||0;end=end||bytes;if(arraybuffer.slice){return arraybuffer.slice(start,end)}if(start<0){start+=bytes}if(end<0){end+=bytes}if(end>bytes){end=bytes}if(start>=bytes||start>=end||bytes===0){return new ArrayBuffer(0)}var abv=new Uint8Array(arraybuffer);var result=new Uint8Array(end-start);for(var i=start,ii=0;i<end;i++,ii++){result[ii]=abv[i]}return result.buffer}},{}],13:[function(_dereq_,module,exports){(function(chars){\"use strict\";exports.encode=function(arraybuffer){var bytes=new Uint8Array(arraybuffer),i,len=bytes.length,base64=\"\";for(i=0;i<len;i+=3){base64+=chars[bytes[i]>>2];\nbase64+=chars[(bytes[i]&3)<<4|bytes[i+1]>>4];base64+=chars[(bytes[i+1]&15)<<2|bytes[i+2]>>6];base64+=chars[bytes[i+2]&63]}if(len%3===2){base64=base64.substring(0,base64.length-1)+\"=\"}else if(len%3===1){base64=base64.substring(0,base64.length-2)+\"==\"}return base64};exports.decode=function(base64){var bufferLength=base64.length*.75,len=base64.length,i,p=0,encoded1,encoded2,encoded3,encoded4;if(base64[base64.length-1]===\"=\"){bufferLength--;if(base64[base64.length-2]===\"=\"){bufferLength--}}var arraybuffer=new ArrayBuffer(bufferLength),bytes=new Uint8Array(arraybuffer);for(i=0;i<len;i+=4){encoded1=chars.indexOf(base64[i]);encoded2=chars.indexOf(base64[i+1]);encoded3=chars.indexOf(base64[i+2]);encoded4=chars.indexOf(base64[i+3]);bytes[p++]=encoded1<<2|encoded2>>4;bytes[p++]=(encoded2&15)<<4|encoded3>>2;bytes[p++]=(encoded3&3)<<6|encoded4&63}return arraybuffer}})(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\")},{}],14:[function(_dereq_,module,exports){(function(global){var BlobBuilder=global.BlobBuilder||global.WebKitBlobBuilder||global.MSBlobBuilder||global.MozBlobBuilder;var blobSupported=function(){try{var a=new Blob([\"hi\"]);return a.size===2}catch(e){return false}}();var blobSupportsArrayBufferView=blobSupported&&function(){try{var b=new Blob([new Uint8Array([1,2])]);return b.size===2}catch(e){return false}}();var blobBuilderSupported=BlobBuilder&&BlobBuilder.prototype.append&&BlobBuilder.prototype.getBlob;function mapArrayBufferViews(ary){for(var i=0;i<ary.length;i++){var chunk=ary[i];if(chunk.buffer instanceof ArrayBuffer){var buf=chunk.buffer;if(chunk.byteLength!==buf.byteLength){var copy=new Uint8Array(chunk.byteLength);copy.set(new Uint8Array(buf,chunk.byteOffset,chunk.byteLength));buf=copy.buffer}ary[i]=buf}}}function BlobBuilderConstructor(ary,options){options=options||{};var bb=new BlobBuilder;mapArrayBufferViews(ary);for(var i=0;i<ary.length;i++){bb.append(ary[i])}return options.type?bb.getBlob(options.type):bb.getBlob()}function BlobConstructor(ary,options){mapArrayBufferViews(ary);return new Blob(ary,options||{})}module.exports=function(){if(blobSupported){return blobSupportsArrayBufferView?global.Blob:BlobConstructor}else if(blobBuilderSupported){return BlobBuilderConstructor}else{return undefined}}()}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{}],15:[function(_dereq_,module,exports){module.exports=Emitter;function Emitter(obj){if(obj)return mixin(obj)}function mixin(obj){for(var key in Emitter.prototype){obj[key]=Emitter.prototype[key]}return obj}Emitter.prototype.on=Emitter.prototype.addEventListener=function(event,fn){this._callbacks=this._callbacks||{};(this._callbacks[event]=this._callbacks[event]||[]).push(fn);return this};Emitter.prototype.once=function(event,fn){var self=this;this._callbacks=this._callbacks||{};function on(){self.off(event,on);fn.apply(this,arguments)}on.fn=fn;this.on(event,on);return this};Emitter.prototype.off=Emitter.prototype.removeListener=Emitter.prototype.removeAllListeners=Emitter.prototype.removeEventListener=function(event,fn){this._callbacks=this._callbacks||{};if(0==arguments.length){this._callbacks={};return this}var callbacks=this._callbacks[event];if(!callbacks)return this;if(1==arguments.length){delete this._callbacks[event];return this}var cb;for(var i=0;i<callbacks.length;i++){cb=callbacks[i];if(cb===fn||cb.fn===fn){callbacks.splice(i,1);break}}return this};Emitter.prototype.emit=function(event){this._callbacks=this._callbacks||{};var args=[].slice.call(arguments,1),callbacks=this._callbacks[event];if(callbacks){callbacks=callbacks.slice(0);for(var i=0,len=callbacks.length;i<len;++i){callbacks[i].apply(this,args)}}return this};Emitter.prototype.listeners=function(event){this._callbacks=this._callbacks||{};return this._callbacks[event]||[]};Emitter.prototype.hasListeners=function(event){return!!this.listeners(event).length}},{}],16:[function(_dereq_,module,exports){module.exports=function(a,b){var fn=function(){};fn.prototype=b.prototype;a.prototype=new fn;a.prototype.constructor=a}},{}],17:[function(_dereq_,module,exports){exports=module.exports=_dereq_(\"./debug\");exports.log=log;exports.formatArgs=formatArgs;exports.save=save;exports.load=load;exports.useColors=useColors;exports.storage=\"undefined\"!=typeof chrome&&\"undefined\"!=typeof chrome.storage?chrome.storage.local:localstorage();exports.colors=[\"lightseagreen\",\"forestgreen\",\"goldenrod\",\"dodgerblue\",\"darkorchid\",\"crimson\"];function useColors(){return\"WebkitAppearance\"in document.documentElement.style||window.console&&(console.firebug||console.exception&&console.table)||navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)&&parseInt(RegExp.$1,10)>=31}exports.formatters.j=function(v){return JSON.stringify(v)};function formatArgs(){var args=arguments;var useColors=this.useColors;args[0]=(useColors?\"%c\":\"\")+this.namespace+(useColors?\" %c\":\" \")+args[0]+(useColors?\"%c \":\" \")+\"+\"+exports.humanize(this.diff);if(!useColors)return args;var c=\"color: \"+this.color;args=[args[0],c,\"color: inherit\"].concat(Array.prototype.slice.call(args,1));var index=0;var lastC=0;args[0].replace(/%[a-z%]/g,function(match){if(\"%%\"===match)return;index++;if(\"%c\"===match){lastC=index}});args.splice(lastC,0,c);return args}function log(){return\"object\"===typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)}function save(namespaces){try{if(null==namespaces){exports.storage.removeItem(\"debug\")}else{exports.storage.debug=namespaces}}catch(e){}}function load(){var r;try{r=exports.storage.debug}catch(e){}return r}exports.enable(load());function localstorage(){try{return window.localStorage}catch(e){}}},{\"./debug\":18}],18:[function(_dereq_,module,exports){exports=module.exports=debug;exports.coerce=coerce;exports.disable=disable;exports.enable=enable;exports.enabled=enabled;exports.humanize=_dereq_(\"ms\");exports.names=[];exports.skips=[];exports.formatters={};var prevColor=0;var prevTime;function selectColor(){return exports.colors[prevColor++%exports.colors.length]}function debug(namespace){function disabled(){}disabled.enabled=false;function enabled(){var self=enabled;var curr=+new Date;var ms=curr-(prevTime||curr);self.diff=ms;self.prev=prevTime;self.curr=curr;prevTime=curr;if(null==self.useColors)self.useColors=exports.useColors();if(null==self.color&&self.useColors)self.color=selectColor();var args=Array.prototype.slice.call(arguments);args[0]=exports.coerce(args[0]);if(\"string\"!==typeof args[0]){args=[\"%o\"].concat(args)}var index=0;args[0]=args[0].replace(/%([a-z%])/g,function(match,format){if(match===\"%%\")return match;index++;var formatter=exports.formatters[format];if(\"function\"===typeof formatter){var val=args[index];match=formatter.call(self,val);args.splice(index,1);index--}return match});if(\"function\"===typeof exports.formatArgs){args=exports.formatArgs.apply(self,args)}var logFn=enabled.log||exports.log||console.log.bind(console);logFn.apply(self,args)}enabled.enabled=true;var fn=exports.enabled(namespace)?enabled:disabled;fn.namespace=namespace;return fn}function enable(namespaces){exports.save(namespaces);var split=(namespaces||\"\").split(/[\\s,]+/);var len=split.length;for(var i=0;i<len;i++){if(!split[i])continue;namespaces=split[i].replace(/\\*/g,\".*?\");if(namespaces[0]===\"-\"){exports.skips.push(new RegExp(\"^\"+namespaces.substr(1)+\"$\"))}else{exports.names.push(new RegExp(\"^\"+namespaces+\"$\"))}}}function disable(){exports.enable(\"\")}function enabled(name){var i,len;for(i=0,len=exports.skips.length;i<len;i++){if(exports.skips[i].test(name)){return false}}for(i=0,len=exports.names.length;i<len;i++){if(exports.names[i].test(name)){return true}}return false}function coerce(val){if(val instanceof Error)return val.stack||val.message;return val}},{ms:25}],19:[function(_dereq_,module,exports){(function(global){var keys=_dereq_(\"./keys\");var hasBinary=_dereq_(\"has-binary\");var sliceBuffer=_dereq_(\"arraybuffer.slice\");var base64encoder=_dereq_(\"base64-arraybuffer\");var after=_dereq_(\"after\");var utf8=_dereq_(\"utf8\");var isAndroid=navigator.userAgent.match(/Android/i);var isPhantomJS=/PhantomJS/i.test(navigator.userAgent);var dontSendBlobs=isAndroid||isPhantomJS;exports.protocol=3;var packets=exports.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6};var packetslist=keys(packets);var err={type:\"error\",data:\"parser error\"};var Blob=_dereq_(\"blob\");exports.encodePacket=function(packet,supportsBinary,utf8encode,callback){if(\"function\"==typeof supportsBinary){callback=supportsBinary;supportsBinary=false}if(\"function\"==typeof utf8encode){callback=utf8encode;utf8encode=null}var data=packet.data===undefined?undefined:packet.data.buffer||packet.data;if(global.ArrayBuffer&&data instanceof ArrayBuffer){return encodeArrayBuffer(packet,supportsBinary,callback)}else if(Blob&&data instanceof global.Blob){return encodeBlob(packet,supportsBinary,callback)}if(data&&data.base64){return encodeBase64Object(packet,callback)}var encoded=packets[packet.type];if(undefined!==packet.data){encoded+=utf8encode?utf8.encode(String(packet.data)):String(packet.data)}return callback(\"\"+encoded)};function encodeBase64Object(packet,callback){var message=\"b\"+exports.packets[packet.type]+packet.data.data;return callback(message)}function encodeArrayBuffer(packet,supportsBinary,callback){if(!supportsBinary){return exports.encodeBase64Packet(packet,callback)}var data=packet.data;var contentArray=new Uint8Array(data);var resultBuffer=new Uint8Array(1+data.byteLength);resultBuffer[0]=packets[packet.type];for(var i=0;i<contentArray.length;i++){resultBuffer[i+1]=contentArray[i]}return callback(resultBuffer.buffer)}function encodeBlobAsArrayBuffer(packet,supportsBinary,callback){if(!supportsBinary){return exports.encodeBase64Packet(packet,callback)}var fr=new FileReader;fr.onload=function(){packet.data=fr.result;exports.encodePacket(packet,supportsBinary,true,callback)};return fr.readAsArrayBuffer(packet.data)}function encodeBlob(packet,supportsBinary,callback){if(!supportsBinary){return exports.encodeBase64Packet(packet,callback)}if(dontSendBlobs){return encodeBlobAsArrayBuffer(packet,supportsBinary,callback)}var length=new Uint8Array(1);length[0]=packets[packet.type];var blob=new Blob([length.buffer,packet.data]);return callback(blob)}exports.encodeBase64Packet=function(packet,callback){var message=\"b\"+exports.packets[packet.type];if(Blob&&packet.data instanceof global.Blob){var fr=new FileReader;fr.onload=function(){var b64=fr.result.split(\",\")[1];callback(message+b64)};return fr.readAsDataURL(packet.data)}var b64data;try{b64data=String.fromCharCode.apply(null,new Uint8Array(packet.data))}catch(e){var typed=new Uint8Array(packet.data);var basic=new Array(typed.length);for(var i=0;i<typed.length;i++){basic[i]=typed[i]}b64data=String.fromCharCode.apply(null,basic)}message+=global.btoa(b64data);return callback(message)};exports.decodePacket=function(data,binaryType,utf8decode){if(typeof data==\"string\"||data===undefined){if(data.charAt(0)==\"b\"){return exports.decodeBase64Packet(data.substr(1),binaryType)}if(utf8decode){try{data=utf8.decode(data)}catch(e){return err}}var type=data.charAt(0);if(Number(type)!=type||!packetslist[type]){return err}if(data.length>1){return{type:packetslist[type],data:data.substring(1)}}else{return{type:packetslist[type]}}}var asArray=new Uint8Array(data);var type=asArray[0];var rest=sliceBuffer(data,1);if(Blob&&binaryType===\"blob\"){rest=new Blob([rest])}return{type:packetslist[type],data:rest}};exports.decodeBase64Packet=function(msg,binaryType){var type=packetslist[msg.charAt(0)];if(!global.ArrayBuffer){return{type:type,data:{base64:true,data:msg.substr(1)}}}var data=base64encoder.decode(msg.substr(1));if(binaryType===\"blob\"&&Blob){data=new Blob([data])}return{type:type,data:data}};exports.encodePayload=function(packets,supportsBinary,callback){if(typeof supportsBinary==\"function\"){callback=supportsBinary;supportsBinary=null}var isBinary=hasBinary(packets);if(supportsBinary&&isBinary){if(Blob&&!dontSendBlobs){return exports.encodePayloadAsBlob(packets,callback)}return exports.encodePayloadAsArrayBuffer(packets,callback)}if(!packets.length){return callback(\"0:\")}function setLengthHeader(message){return message.length+\":\"+message}function encodeOne(packet,doneCallback){exports.encodePacket(packet,!isBinary?false:supportsBinary,true,function(message){doneCallback(null,setLengthHeader(message))})}map(packets,encodeOne,function(err,results){return callback(results.join(\"\"))})};function map(ary,each,done){var result=new Array(ary.length);var next=after(ary.length,done);var eachWithIndex=function(i,el,cb){each(el,function(error,msg){result[i]=msg;cb(error,result)})};for(var i=0;i<ary.length;i++){eachWithIndex(i,ary[i],next)}}exports.decodePayload=function(data,binaryType,callback){if(typeof data!=\"string\"){return exports.decodePayloadAsBinary(data,binaryType,callback)}if(typeof binaryType===\"function\"){callback=binaryType;binaryType=null}var packet;if(data==\"\"){return callback(err,0,1)}var length=\"\",n,msg;for(var i=0,l=data.length;i<l;i++){var chr=data.charAt(i);if(\":\"!=chr){length+=chr}else{if(\"\"==length||length!=(n=Number(length))){return callback(err,0,1)}msg=data.substr(i+1,n);if(length!=msg.length){return callback(err,0,1)}if(msg.length){packet=exports.decodePacket(msg,binaryType,true);if(err.type==packet.type&&err.data==packet.data){return callback(err,0,1)}var ret=callback(packet,i+n,l);if(false===ret)return}i+=n;length=\"\"}}if(length!=\"\"){return callback(err,0,1)}};exports.encodePayloadAsArrayBuffer=function(packets,callback){if(!packets.length){return callback(new ArrayBuffer(0))}function encodeOne(packet,doneCallback){exports.encodePacket(packet,true,true,function(data){return doneCallback(null,data)})}map(packets,encodeOne,function(err,encodedPackets){var totalLength=encodedPackets.reduce(function(acc,p){var len;if(typeof p===\"string\"){len=p.length}else{len=p.byteLength}return acc+len.toString().length+len+2},0);var resultArray=new Uint8Array(totalLength);var bufferIndex=0;encodedPackets.forEach(function(p){var isString=typeof p===\"string\";var ab=p;if(isString){var view=new Uint8Array(p.length);for(var i=0;i<p.length;i++){view[i]=p.charCodeAt(i)}ab=view.buffer}if(isString){resultArray[bufferIndex++]=0}else{resultArray[bufferIndex++]=1}var lenStr=ab.byteLength.toString();for(var i=0;i<lenStr.length;i++){resultArray[bufferIndex++]=parseInt(lenStr[i])}resultArray[bufferIndex++]=255;var view=new Uint8Array(ab);for(var i=0;i<view.length;i++){resultArray[bufferIndex++]=view[i]}});return callback(resultArray.buffer)})};exports.encodePayloadAsBlob=function(packets,callback){function encodeOne(packet,doneCallback){exports.encodePacket(packet,true,true,function(encoded){var binaryIdentifier=new Uint8Array(1);binaryIdentifier[0]=1;if(typeof encoded===\"string\"){var view=new Uint8Array(encoded.length);for(var i=0;i<encoded.length;i++){view[i]=encoded.charCodeAt(i)}encoded=view.buffer;binaryIdentifier[0]=0}var len=encoded instanceof ArrayBuffer?encoded.byteLength:encoded.size;var lenStr=len.toString();var lengthAry=new Uint8Array(lenStr.length+1);for(var i=0;i<lenStr.length;i++){lengthAry[i]=parseInt(lenStr[i])}lengthAry[lenStr.length]=255;if(Blob){var blob=new Blob([binaryIdentifier.buffer,lengthAry.buffer,encoded]);doneCallback(null,blob)}})}map(packets,encodeOne,function(err,results){return callback(new Blob(results))})};exports.decodePayloadAsBinary=function(data,binaryType,callback){if(typeof binaryType===\"function\"){callback=binaryType;binaryType=null}var bufferTail=data;var buffers=[];var numberTooLong=false;while(bufferTail.byteLength>0){var tailArray=new Uint8Array(bufferTail);var isString=tailArray[0]===0;var msgLength=\"\";for(var i=1;;i++){if(tailArray[i]==255)break;if(msgLength.length>310){numberTooLong=true;break}msgLength+=tailArray[i]}if(numberTooLong)return callback(err,0,1);bufferTail=sliceBuffer(bufferTail,2+msgLength.length);msgLength=parseInt(msgLength);var msg=sliceBuffer(bufferTail,0,msgLength);if(isString){try{msg=String.fromCharCode.apply(null,new Uint8Array(msg))}catch(e){var typed=new Uint8Array(msg);msg=\"\";for(var i=0;i<typed.length;i++){msg+=String.fromCharCode(typed[i])}}}buffers.push(msg);bufferTail=sliceBuffer(bufferTail,msgLength)}var total=buffers.length;buffers.forEach(function(buffer,i){callback(exports.decodePacket(buffer,binaryType,true),i,total)})}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{\"./keys\":20,after:11,\"arraybuffer.slice\":12,\"base64-arraybuffer\":13,blob:14,\"has-binary\":21,utf8:29}],20:[function(_dereq_,module,exports){module.exports=Object.keys||function keys(obj){var arr=[];var has=Object.prototype.hasOwnProperty;for(var i in obj){if(has.call(obj,i)){arr.push(i)}}return arr}},{}],21:[function(_dereq_,module,exports){(function(global){var isArray=_dereq_(\"isarray\");module.exports=hasBinary;function hasBinary(data){function _hasBinary(obj){if(!obj)return false;if(global.Buffer&&global.Buffer.isBuffer(obj)||global.ArrayBuffer&&obj instanceof ArrayBuffer||global.Blob&&obj instanceof Blob||global.File&&obj instanceof File){return true}if(isArray(obj)){for(var i=0;i<obj.length;i++){if(_hasBinary(obj[i])){return true}}}else if(obj&&\"object\"==typeof obj){if(obj.toJSON){obj=obj.toJSON()}for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)&&_hasBinary(obj[key])){return true}}}return false}return _hasBinary(data)}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{isarray:24}],22:[function(_dereq_,module,exports){try{module.exports=typeof XMLHttpRequest!==\"undefined\"&&\"withCredentials\"in new XMLHttpRequest}catch(err){module.exports=false}},{}],23:[function(_dereq_,module,exports){var indexOf=[].indexOf;module.exports=function(arr,obj){if(indexOf)return arr.indexOf(obj);for(var i=0;i<arr.length;++i){if(arr[i]===obj)return i}return-1}},{}],24:[function(_dereq_,module,exports){module.exports=Array.isArray||function(arr){return Object.prototype.toString.call(arr)==\"[object Array]\"}},{}],25:[function(_dereq_,module,exports){var s=1e3;var m=s*60;var h=m*60;var d=h*24;var y=d*365.25;module.exports=function(val,options){options=options||{};if(\"string\"==typeof val)return parse(val);return options.long?long(val):short(val)};function parse(str){str=\"\"+str;if(str.length>1e4)return;var match=/^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);if(!match)return;var n=parseFloat(match[1]);var type=(match[2]||\"ms\").toLowerCase();switch(type){case\"years\":case\"year\":case\"yrs\":case\"yr\":case\"y\":return n*y;case\"days\":case\"day\":case\"d\":return n*d;case\"hours\":case\"hour\":case\"hrs\":case\"hr\":case\"h\":return n*h;case\"minutes\":case\"minute\":case\"mins\":case\"min\":case\"m\":return n*m;case\"seconds\":case\"second\":case\"secs\":case\"sec\":case\"s\":return n*s;case\"milliseconds\":case\"millisecond\":case\"msecs\":case\"msec\":case\"ms\":return n}}function short(ms){if(ms>=d)return Math.round(ms/d)+\"d\";if(ms>=h)return Math.round(ms/h)+\"h\";if(ms>=m)return Math.round(ms/m)+\"m\";if(ms>=s)return Math.round(ms/s)+\"s\";return ms+\"ms\"}function long(ms){return plural(ms,d,\"day\")||plural(ms,h,\"hour\")||plural(ms,m,\"minute\")||plural(ms,s,\"second\")||ms+\" ms\"}function plural(ms,n,name){if(ms<n)return;if(ms<n*1.5)return Math.floor(ms/n)+\" \"+name;return Math.ceil(ms/n)+\" \"+name+\"s\"}},{}],26:[function(_dereq_,module,exports){(function(global){var rvalidchars=/^[\\],:{}\\s]*$/;var rvalidescape=/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g;var rvalidtokens=/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g;var rvalidbraces=/(?:^|:|,)(?:\\s*\\[)+/g;var rtrimLeft=/^\\s+/;var rtrimRight=/\\s+$/;module.exports=function parsejson(data){if(\"string\"!=typeof data||!data){return null}data=data.replace(rtrimLeft,\"\").replace(rtrimRight,\"\");if(global.JSON&&JSON.parse){return JSON.parse(data)}if(rvalidchars.test(data.replace(rvalidescape,\"@\").replace(rvalidtokens,\"]\").replace(rvalidbraces,\"\"))){return new Function(\"return \"+data)()}}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{}],27:[function(_dereq_,module,exports){exports.encode=function(obj){var str=\"\";for(var i in obj){if(obj.hasOwnProperty(i)){if(str.length)str+=\"&\";str+=encodeURIComponent(i)+\"=\"+encodeURIComponent(obj[i])}}return str};exports.decode=function(qs){var qry={};var pairs=qs.split(\"&\");for(var i=0,l=pairs.length;i<l;i++){var pair=pairs[i].split(\"=\");qry[decodeURIComponent(pair[0])]=decodeURIComponent(pair[1])}return qry}},{}],28:[function(_dereq_,module,exports){var re=/^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;var parts=[\"source\",\"protocol\",\"authority\",\"userInfo\",\"user\",\"password\",\"host\",\"port\",\"relative\",\"path\",\"directory\",\"file\",\"query\",\"anchor\"];module.exports=function parseuri(str){var src=str,b=str.indexOf(\"[\"),e=str.indexOf(\"]\");if(b!=-1&&e!=-1){str=str.substring(0,b)+str.substring(b,e).replace(/:/g,\";\")+str.substring(e,str.length)}var m=re.exec(str||\"\"),uri={},i=14;while(i--){uri[parts[i]]=m[i]||\"\"}if(b!=-1&&e!=-1){uri.source=src;uri.host=uri.host.substring(1,uri.host.length-1).replace(/;/g,\":\");uri.authority=uri.authority.replace(\"[\",\"\").replace(\"]\",\"\").replace(/;/g,\":\");uri.ipv6uri=true}return uri}},{}],29:[function(_dereq_,module,exports){(function(global){(function(root){var freeExports=typeof exports==\"object\"&&exports;var freeModule=typeof module==\"object\"&&module&&module.exports==freeExports&&module;var freeGlobal=typeof global==\"object\"&&global;if(freeGlobal.global===freeGlobal||freeGlobal.window===freeGlobal){root=freeGlobal}var stringFromCharCode=String.fromCharCode;function ucs2decode(string){var output=[];var counter=0;var length=string.length;var value;var extra;while(counter<length){value=string.charCodeAt(counter++);if(value>=55296&&value<=56319&&counter<length){extra=string.charCodeAt(counter++);if((extra&64512)==56320){output.push(((value&1023)<<10)+(extra&1023)+65536)}else{output.push(value);counter--}}else{output.push(value)}}return output}function ucs2encode(array){var length=array.length;var index=-1;var value;var output=\"\";while(++index<length){value=array[index];if(value>65535){value-=65536;output+=stringFromCharCode(value>>>10&1023|55296);value=56320|value&1023}output+=stringFromCharCode(value)}return output}function checkScalarValue(codePoint){if(codePoint>=55296&&codePoint<=57343){throw Error(\"Lone surrogate U+\"+codePoint.toString(16).toUpperCase()+\" is not a scalar value\")}}function createByte(codePoint,shift){return stringFromCharCode(codePoint>>shift&63|128)}function encodeCodePoint(codePoint){if((codePoint&4294967168)==0){return stringFromCharCode(codePoint)}var symbol=\"\";if((codePoint&4294965248)==0){symbol=stringFromCharCode(codePoint>>6&31|192)}else if((codePoint&4294901760)==0){checkScalarValue(codePoint);symbol=stringFromCharCode(codePoint>>12&15|224);symbol+=createByte(codePoint,6)}else if((codePoint&4292870144)==0){symbol=stringFromCharCode(codePoint>>18&7|240);symbol+=createByte(codePoint,12);symbol+=createByte(codePoint,6)}symbol+=stringFromCharCode(codePoint&63|128);return symbol}function utf8encode(string){var codePoints=ucs2decode(string);var length=codePoints.length;var index=-1;var codePoint;var byteString=\"\";while(++index<length){codePoint=codePoints[index];byteString+=encodeCodePoint(codePoint)}return byteString}function readContinuationByte(){if(byteIndex>=byteCount){throw Error(\"Invalid byte index\")}var continuationByte=byteArray[byteIndex]&255;byteIndex++;if((continuationByte&192)==128){return continuationByte&63}throw Error(\"Invalid continuation byte\")}function decodeSymbol(){var byte1;var byte2;var byte3;var byte4;var codePoint;if(byteIndex>byteCount){throw Error(\"Invalid byte index\")}if(byteIndex==byteCount){return false}byte1=byteArray[byteIndex]&255;byteIndex++;if((byte1&128)==0){return byte1}if((byte1&224)==192){var byte2=readContinuationByte();codePoint=(byte1&31)<<6|byte2;if(codePoint>=128){return codePoint}else{throw Error(\"Invalid continuation byte\")}}if((byte1&240)==224){byte2=readContinuationByte();byte3=readContinuationByte();codePoint=(byte1&15)<<12|byte2<<6|byte3;if(codePoint>=2048){checkScalarValue(codePoint);return codePoint}else{throw Error(\"Invalid continuation byte\")}}if((byte1&248)==240){byte2=readContinuationByte();byte3=readContinuationByte();byte4=readContinuationByte();codePoint=(byte1&15)<<18|byte2<<12|byte3<<6|byte4;if(codePoint>=65536&&codePoint<=1114111){return codePoint}}throw Error(\"Invalid UTF-8 detected\")}var byteArray;var byteCount;var byteIndex;function utf8decode(byteString){byteArray=ucs2decode(byteString);byteCount=byteArray.length;byteIndex=0;var codePoints=[];var tmp;while((tmp=decodeSymbol())!==false){codePoints.push(tmp)}return ucs2encode(codePoints)}var utf8={version:\"2.0.0\",encode:utf8encode,decode:utf8decode};if(typeof define==\"function\"&&typeof define.amd==\"object\"&&define.amd){define(function(){return utf8})}else if(freeExports&&!freeExports.nodeType){if(freeModule){freeModule.exports=utf8}else{var object={};var hasOwnProperty=object.hasOwnProperty;for(var key in utf8){hasOwnProperty.call(utf8,key)&&(freeExports[key]=utf8[key])}}}else{root.utf8=utf8}})(this)}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{}],30:[function(_dereq_,module,exports){\"use strict\";var alphabet=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_\".split(\"\"),length=64,map={},seed=0,i=0,prev;function encode(num){var encoded=\"\";do{encoded=alphabet[num%length]+encoded;num=Math.floor(num/length)}while(num>0);return encoded}function decode(str){var decoded=0;for(i=0;i<str.length;i++){decoded=decoded*length+map[str.charAt(i)]}return decoded}function yeast(){var now=encode(+new Date);if(now!==prev)return seed=0,prev=now;return now+\".\"+encode(seed++)}for(;i<length;i++)map[alphabet[i]]=i;yeast.encode=encode;yeast.decode=decode;module.exports=yeast},{}],31:[function(_dereq_,module,exports){var url=_dereq_(\"./url\");var parser=_dereq_(\"socket.io-parser\");var Manager=_dereq_(\"./manager\");var debug=_dereq_(\"debug\")(\"socket.io-client\");module.exports=exports=lookup;var cache=exports.managers={};function lookup(uri,opts){if(typeof uri==\"object\"){opts=uri;uri=undefined}opts=opts||{};var parsed=url(uri);var source=parsed.source;var id=parsed.id;var path=parsed.path;var sameNamespace=cache[id]&&path in cache[id].nsps;var newConnection=opts.forceNew||opts[\"force new connection\"]||false===opts.multiplex||sameNamespace;var io;if(newConnection){debug(\"ignoring socket cache for %s\",source);io=Manager(source,opts)}else{if(!cache[id]){debug(\"new io instance for %s\",source);cache[id]=Manager(source,opts)}io=cache[id]}return io.socket(parsed.path)}exports.protocol=parser.protocol;exports.connect=lookup;exports.Manager=_dereq_(\"./manager\");exports.Socket=_dereq_(\"./socket\")},{\"./manager\":32,\"./socket\":34,\"./url\":35,debug:39,\"socket.io-parser\":47}],32:[function(_dereq_,module,exports){var eio=_dereq_(\"engine.io-client\");var Socket=_dereq_(\"./socket\");var Emitter=_dereq_(\"component-emitter\");var parser=_dereq_(\"socket.io-parser\");var on=_dereq_(\"./on\");var bind=_dereq_(\"component-bind\");var debug=_dereq_(\"debug\")(\"socket.io-client:manager\");var indexOf=_dereq_(\"indexof\");var Backoff=_dereq_(\"backo2\");var has=Object.prototype.hasOwnProperty;module.exports=Manager;function Manager(uri,opts){if(!(this instanceof Manager))return new Manager(uri,opts);if(uri&&\"object\"==typeof uri){opts=uri;uri=undefined}opts=opts||{};opts.path=opts.path||\"/socket.io\";this.nsps={};this.subs=[];this.opts=opts;this.reconnection(opts.reconnection!==false);this.reconnectionAttempts(opts.reconnectionAttempts||Infinity);this.reconnectionDelay(opts.reconnectionDelay||1e3);this.reconnectionDelayMax(opts.reconnectionDelayMax||5e3);this.randomizationFactor(opts.randomizationFactor||.5);this.backoff=new Backoff({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()});this.timeout(null==opts.timeout?2e4:opts.timeout);this.readyState=\"closed\";this.uri=uri;this.connecting=[];this.lastPing=null;this.encoding=false;this.packetBuffer=[];this.encoder=new parser.Encoder;this.decoder=new parser.Decoder;this.autoConnect=opts.autoConnect!==false;if(this.autoConnect)this.open()}Manager.prototype.emitAll=function(){this.emit.apply(this,arguments);for(var nsp in this.nsps){if(has.call(this.nsps,nsp)){this.nsps[nsp].emit.apply(this.nsps[nsp],arguments)}}};Manager.prototype.updateSocketIds=function(){for(var nsp in this.nsps){if(has.call(this.nsps,nsp)){this.nsps[nsp].id=this.engine.id}}};Emitter(Manager.prototype);Manager.prototype.reconnection=function(v){if(!arguments.length)return this._reconnection;this._reconnection=!!v;return this};Manager.prototype.reconnectionAttempts=function(v){if(!arguments.length)return this._reconnectionAttempts;this._reconnectionAttempts=v;return this};Manager.prototype.reconnectionDelay=function(v){if(!arguments.length)return this._reconnectionDelay;this._reconnectionDelay=v;this.backoff&&this.backoff.setMin(v);return this};Manager.prototype.randomizationFactor=function(v){if(!arguments.length)return this._randomizationFactor;this._randomizationFactor=v;this.backoff&&this.backoff.setJitter(v);return this};Manager.prototype.reconnectionDelayMax=function(v){if(!arguments.length)return this._reconnectionDelayMax;this._reconnectionDelayMax=v;this.backoff&&this.backoff.setMax(v);return this};Manager.prototype.timeout=function(v){if(!arguments.length)return this._timeout;this._timeout=v;return this};Manager.prototype.maybeReconnectOnOpen=function(){if(!this.reconnecting&&this._reconnection&&this.backoff.attempts===0){this.reconnect()}};Manager.prototype.open=Manager.prototype.connect=function(fn){debug(\"readyState %s\",this.readyState);if(~this.readyState.indexOf(\"open\"))return this;debug(\"opening %s\",this.uri);this.engine=eio(this.uri,this.opts);var socket=this.engine;var self=this;this.readyState=\"opening\";this.skipReconnect=false;var openSub=on(socket,\"open\",function(){self.onopen();fn&&fn()});var errorSub=on(socket,\"error\",function(data){debug(\"connect_error\");self.cleanup();self.readyState=\"closed\";self.emitAll(\"connect_error\",data);if(fn){var err=new Error(\"Connection error\");err.data=data;fn(err)}else{self.maybeReconnectOnOpen()}});if(false!==this._timeout){var timeout=this._timeout;debug(\"connect attempt will timeout after %d\",timeout);var timer=setTimeout(function(){debug(\"connect attempt timed out after %d\",timeout);openSub.destroy();socket.close();socket.emit(\"error\",\"timeout\");self.emitAll(\"connect_timeout\",timeout)},timeout);this.subs.push({destroy:function(){clearTimeout(timer)}})}this.subs.push(openSub);this.subs.push(errorSub);return this};Manager.prototype.onopen=function(){debug(\"open\");this.cleanup();this.readyState=\"open\";this.emit(\"open\");var socket=this.engine;this.subs.push(on(socket,\"data\",bind(this,\"ondata\")));this.subs.push(on(socket,\"ping\",bind(this,\"onping\")));this.subs.push(on(socket,\"pong\",bind(this,\"onpong\")));this.subs.push(on(socket,\"error\",bind(this,\"onerror\")));this.subs.push(on(socket,\"close\",bind(this,\"onclose\")));this.subs.push(on(this.decoder,\"decoded\",bind(this,\"ondecoded\")))};Manager.prototype.onping=function(){this.lastPing=new Date;this.emitAll(\"ping\")};Manager.prototype.onpong=function(){this.emitAll(\"pong\",new Date-this.lastPing)};Manager.prototype.ondata=function(data){this.decoder.add(data)};Manager.prototype.ondecoded=function(packet){this.emit(\"packet\",packet)};Manager.prototype.onerror=function(err){debug(\"error\",err);this.emitAll(\"error\",err)};Manager.prototype.socket=function(nsp){var socket=this.nsps[nsp];if(!socket){socket=new Socket(this,nsp);this.nsps[nsp]=socket;var self=this;socket.on(\"connecting\",onConnecting);\nsocket.on(\"connect\",function(){socket.id=self.engine.id});if(this.autoConnect){onConnecting()}}function onConnecting(){if(!~indexOf(self.connecting,socket)){self.connecting.push(socket)}}return socket};Manager.prototype.destroy=function(socket){var index=indexOf(this.connecting,socket);if(~index)this.connecting.splice(index,1);if(this.connecting.length)return;this.close()};Manager.prototype.packet=function(packet){debug(\"writing packet %j\",packet);var self=this;if(!self.encoding){self.encoding=true;this.encoder.encode(packet,function(encodedPackets){for(var i=0;i<encodedPackets.length;i++){self.engine.write(encodedPackets[i],packet.options)}self.encoding=false;self.processPacketQueue()})}else{self.packetBuffer.push(packet)}};Manager.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var pack=this.packetBuffer.shift();this.packet(pack)}};Manager.prototype.cleanup=function(){debug(\"cleanup\");var sub;while(sub=this.subs.shift())sub.destroy();this.packetBuffer=[];this.encoding=false;this.lastPing=null;this.decoder.destroy()};Manager.prototype.close=Manager.prototype.disconnect=function(){debug(\"disconnect\");this.skipReconnect=true;this.reconnecting=false;if(\"opening\"==this.readyState){this.cleanup()}this.backoff.reset();this.readyState=\"closed\";if(this.engine)this.engine.close()};Manager.prototype.onclose=function(reason){debug(\"onclose\");this.cleanup();this.backoff.reset();this.readyState=\"closed\";this.emit(\"close\",reason);if(this._reconnection&&!this.skipReconnect){this.reconnect()}};Manager.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var self=this;if(this.backoff.attempts>=this._reconnectionAttempts){debug(\"reconnect failed\");this.backoff.reset();this.emitAll(\"reconnect_failed\");this.reconnecting=false}else{var delay=this.backoff.duration();debug(\"will wait %dms before reconnect attempt\",delay);this.reconnecting=true;var timer=setTimeout(function(){if(self.skipReconnect)return;debug(\"attempting reconnect\");self.emitAll(\"reconnect_attempt\",self.backoff.attempts);self.emitAll(\"reconnecting\",self.backoff.attempts);if(self.skipReconnect)return;self.open(function(err){if(err){debug(\"reconnect attempt error\");self.reconnecting=false;self.reconnect();self.emitAll(\"reconnect_error\",err.data)}else{debug(\"reconnect success\");self.onreconnect()}})},delay);this.subs.push({destroy:function(){clearTimeout(timer)}})}};Manager.prototype.onreconnect=function(){var attempt=this.backoff.attempts;this.reconnecting=false;this.backoff.reset();this.updateSocketIds();this.emitAll(\"reconnect\",attempt)}},{\"./on\":33,\"./socket\":34,backo2:36,\"component-bind\":37,\"component-emitter\":38,debug:39,\"engine.io-client\":1,indexof:42,\"socket.io-parser\":47}],33:[function(_dereq_,module,exports){module.exports=on;function on(obj,ev,fn){obj.on(ev,fn);return{destroy:function(){obj.removeListener(ev,fn)}}}},{}],34:[function(_dereq_,module,exports){var parser=_dereq_(\"socket.io-parser\");var Emitter=_dereq_(\"component-emitter\");var toArray=_dereq_(\"to-array\");var on=_dereq_(\"./on\");var bind=_dereq_(\"component-bind\");var debug=_dereq_(\"debug\")(\"socket.io-client:socket\");var hasBin=_dereq_(\"has-binary\");module.exports=exports=Socket;var events={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1};var emit=Emitter.prototype.emit;function Socket(io,nsp){this.io=io;this.nsp=nsp;this.json=this;this.ids=0;this.acks={};this.receiveBuffer=[];this.sendBuffer=[];this.connected=false;this.disconnected=true;if(this.io.autoConnect)this.open()}Emitter(Socket.prototype);Socket.prototype.subEvents=function(){if(this.subs)return;var io=this.io;this.subs=[on(io,\"open\",bind(this,\"onopen\")),on(io,\"packet\",bind(this,\"onpacket\")),on(io,\"close\",bind(this,\"onclose\"))]};Socket.prototype.open=Socket.prototype.connect=function(){if(this.connected)return this;this.subEvents();this.io.open();if(\"open\"==this.io.readyState)this.onopen();this.emit(\"connecting\");return this};Socket.prototype.send=function(){var args=toArray(arguments);args.unshift(\"message\");this.emit.apply(this,args);return this};Socket.prototype.emit=function(ev){if(events.hasOwnProperty(ev)){emit.apply(this,arguments);return this}var args=toArray(arguments);var parserType=parser.EVENT;if(hasBin(args)){parserType=parser.BINARY_EVENT}var packet={type:parserType,data:args};packet.options={};packet.options.compress=!this.flags||false!==this.flags.compress;if(\"function\"==typeof args[args.length-1]){debug(\"emitting packet with ack id %d\",this.ids);this.acks[this.ids]=args.pop();packet.id=this.ids++}if(this.connected){this.packet(packet)}else{this.sendBuffer.push(packet)}delete this.flags;return this};Socket.prototype.packet=function(packet){packet.nsp=this.nsp;this.io.packet(packet)};Socket.prototype.onopen=function(){debug(\"transport is open - connecting\");if(\"/\"!=this.nsp){this.packet({type:parser.CONNECT})}};Socket.prototype.onclose=function(reason){debug(\"close (%s)\",reason);this.connected=false;this.disconnected=true;delete this.id;this.emit(\"disconnect\",reason)};Socket.prototype.onpacket=function(packet){if(packet.nsp!=this.nsp)return;switch(packet.type){case parser.CONNECT:this.onconnect();break;case parser.EVENT:this.onevent(packet);break;case parser.BINARY_EVENT:this.onevent(packet);break;case parser.ACK:this.onack(packet);break;case parser.BINARY_ACK:this.onack(packet);break;case parser.DISCONNECT:this.ondisconnect();break;case parser.ERROR:this.emit(\"error\",packet.data);break}};Socket.prototype.onevent=function(packet){var args=packet.data||[];debug(\"emitting event %j\",args);if(null!=packet.id){debug(\"attaching ack callback to event\");args.push(this.ack(packet.id))}if(this.connected){emit.apply(this,args)}else{this.receiveBuffer.push(args)}};Socket.prototype.ack=function(id){var self=this;var sent=false;return function(){if(sent)return;sent=true;var args=toArray(arguments);debug(\"sending ack %j\",args);var type=hasBin(args)?parser.BINARY_ACK:parser.ACK;self.packet({type:type,id:id,data:args})}};Socket.prototype.onack=function(packet){var ack=this.acks[packet.id];if(\"function\"==typeof ack){debug(\"calling ack %s with %j\",packet.id,packet.data);ack.apply(this,packet.data);delete this.acks[packet.id]}else{debug(\"bad ack %s\",packet.id)}};Socket.prototype.onconnect=function(){this.connected=true;this.disconnected=false;this.emit(\"connect\");this.emitBuffered()};Socket.prototype.emitBuffered=function(){var i;for(i=0;i<this.receiveBuffer.length;i++){emit.apply(this,this.receiveBuffer[i])}this.receiveBuffer=[];for(i=0;i<this.sendBuffer.length;i++){this.packet(this.sendBuffer[i])}this.sendBuffer=[]};Socket.prototype.ondisconnect=function(){debug(\"server disconnect (%s)\",this.nsp);this.destroy();this.onclose(\"io server disconnect\")};Socket.prototype.destroy=function(){if(this.subs){for(var i=0;i<this.subs.length;i++){this.subs[i].destroy()}this.subs=null}this.io.destroy(this)};Socket.prototype.close=Socket.prototype.disconnect=function(){if(this.connected){debug(\"performing disconnect (%s)\",this.nsp);this.packet({type:parser.DISCONNECT})}this.destroy();if(this.connected){this.onclose(\"io client disconnect\")}return this};Socket.prototype.compress=function(compress){this.flags=this.flags||{};this.flags.compress=compress;return this}},{\"./on\":33,\"component-bind\":37,\"component-emitter\":38,debug:39,\"has-binary\":41,\"socket.io-parser\":47,\"to-array\":51}],35:[function(_dereq_,module,exports){(function(global){var parseuri=_dereq_(\"parseuri\");var debug=_dereq_(\"debug\")(\"socket.io-client:url\");module.exports=url;function url(uri,loc){var obj=uri;var loc=loc||global.location;if(null==uri)uri=loc.protocol+\"//\"+loc.host;if(\"string\"==typeof uri){if(\"/\"==uri.charAt(0)){if(\"/\"==uri.charAt(1)){uri=loc.protocol+uri}else{uri=loc.host+uri}}if(!/^(https?|wss?):\\/\\//.test(uri)){debug(\"protocol-less url %s\",uri);if(\"undefined\"!=typeof loc){uri=loc.protocol+\"//\"+uri}else{uri=\"https://\"+uri}}debug(\"parse %s\",uri);obj=parseuri(uri)}if(!obj.port){if(/^(http|ws)$/.test(obj.protocol)){obj.port=\"80\"}else if(/^(http|ws)s$/.test(obj.protocol)){obj.port=\"443\"}}obj.path=obj.path||\"/\";var ipv6=obj.host.indexOf(\":\")!==-1;var host=ipv6?\"[\"+obj.host+\"]\":obj.host;obj.id=obj.protocol+\"://\"+host+\":\"+obj.port;obj.href=obj.protocol+\"://\"+host+(loc&&loc.port==obj.port?\"\":\":\"+obj.port);return obj}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{debug:39,parseuri:45}],36:[function(_dereq_,module,exports){module.exports=Backoff;function Backoff(opts){opts=opts||{};this.ms=opts.min||100;this.max=opts.max||1e4;this.factor=opts.factor||2;this.jitter=opts.jitter>0&&opts.jitter<=1?opts.jitter:0;this.attempts=0}Backoff.prototype.duration=function(){var ms=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var rand=Math.random();var deviation=Math.floor(rand*this.jitter*ms);ms=(Math.floor(rand*10)&1)==0?ms-deviation:ms+deviation}return Math.min(ms,this.max)|0};Backoff.prototype.reset=function(){this.attempts=0};Backoff.prototype.setMin=function(min){this.ms=min};Backoff.prototype.setMax=function(max){this.max=max};Backoff.prototype.setJitter=function(jitter){this.jitter=jitter}},{}],37:[function(_dereq_,module,exports){var slice=[].slice;module.exports=function(obj,fn){if(\"string\"==typeof fn)fn=obj[fn];if(\"function\"!=typeof fn)throw new Error(\"bind() requires a function\");var args=slice.call(arguments,2);return function(){return fn.apply(obj,args.concat(slice.call(arguments)))}}},{}],38:[function(_dereq_,module,exports){module.exports=Emitter;function Emitter(obj){if(obj)return mixin(obj)}function mixin(obj){for(var key in Emitter.prototype){obj[key]=Emitter.prototype[key]}return obj}Emitter.prototype.on=Emitter.prototype.addEventListener=function(event,fn){this._callbacks=this._callbacks||{};(this._callbacks[\"$\"+event]=this._callbacks[\"$\"+event]||[]).push(fn);return this};Emitter.prototype.once=function(event,fn){function on(){this.off(event,on);fn.apply(this,arguments)}on.fn=fn;this.on(event,on);return this};Emitter.prototype.off=Emitter.prototype.removeListener=Emitter.prototype.removeAllListeners=Emitter.prototype.removeEventListener=function(event,fn){this._callbacks=this._callbacks||{};if(0==arguments.length){this._callbacks={};return this}var callbacks=this._callbacks[\"$\"+event];if(!callbacks)return this;if(1==arguments.length){delete this._callbacks[\"$\"+event];return this}var cb;for(var i=0;i<callbacks.length;i++){cb=callbacks[i];if(cb===fn||cb.fn===fn){callbacks.splice(i,1);break}}return this};Emitter.prototype.emit=function(event){this._callbacks=this._callbacks||{};var args=[].slice.call(arguments,1),callbacks=this._callbacks[\"$\"+event];if(callbacks){callbacks=callbacks.slice(0);for(var i=0,len=callbacks.length;i<len;++i){callbacks[i].apply(this,args)}}return this};Emitter.prototype.listeners=function(event){this._callbacks=this._callbacks||{};return this._callbacks[\"$\"+event]||[]};Emitter.prototype.hasListeners=function(event){return!!this.listeners(event).length}},{}],39:[function(_dereq_,module,exports){arguments[4][17][0].apply(exports,arguments)},{\"./debug\":40,dup:17}],40:[function(_dereq_,module,exports){arguments[4][18][0].apply(exports,arguments)},{dup:18,ms:44}],41:[function(_dereq_,module,exports){(function(global){var isArray=_dereq_(\"isarray\");module.exports=hasBinary;function hasBinary(data){function _hasBinary(obj){if(!obj)return false;if(global.Buffer&&global.Buffer.isBuffer&&global.Buffer.isBuffer(obj)||global.ArrayBuffer&&obj instanceof ArrayBuffer||global.Blob&&obj instanceof Blob||global.File&&obj instanceof File){return true}if(isArray(obj)){for(var i=0;i<obj.length;i++){if(_hasBinary(obj[i])){return true}}}else if(obj&&\"object\"==typeof obj){if(obj.toJSON&&\"function\"==typeof obj.toJSON){obj=obj.toJSON()}for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)&&_hasBinary(obj[key])){return true}}}return false}return _hasBinary(data)}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{isarray:43}],42:[function(_dereq_,module,exports){arguments[4][23][0].apply(exports,arguments)},{dup:23}],43:[function(_dereq_,module,exports){arguments[4][24][0].apply(exports,arguments)},{dup:24}],44:[function(_dereq_,module,exports){arguments[4][25][0].apply(exports,arguments)},{dup:25}],45:[function(_dereq_,module,exports){arguments[4][28][0].apply(exports,arguments)},{dup:28}],46:[function(_dereq_,module,exports){(function(global){var isArray=_dereq_(\"isarray\");var isBuf=_dereq_(\"./is-buffer\");exports.deconstructPacket=function(packet){var buffers=[];var packetData=packet.data;function _deconstructPacket(data){if(!data)return data;if(isBuf(data)){var placeholder={_placeholder:true,num:buffers.length};buffers.push(data);return placeholder}else if(isArray(data)){var newData=new Array(data.length);for(var i=0;i<data.length;i++){newData[i]=_deconstructPacket(data[i])}return newData}else if(\"object\"==typeof data&&!(data instanceof Date)){var newData={};for(var key in data){newData[key]=_deconstructPacket(data[key])}return newData}return data}var pack=packet;pack.data=_deconstructPacket(packetData);pack.attachments=buffers.length;return{packet:pack,buffers:buffers}};exports.reconstructPacket=function(packet,buffers){var curPlaceHolder=0;function _reconstructPacket(data){if(data&&data._placeholder){var buf=buffers[data.num];return buf}else if(isArray(data)){for(var i=0;i<data.length;i++){data[i]=_reconstructPacket(data[i])}return data}else if(data&&\"object\"==typeof data){for(var key in data){data[key]=_reconstructPacket(data[key])}return data}return data}packet.data=_reconstructPacket(packet.data);packet.attachments=undefined;return packet};exports.removeBlobs=function(data,callback){function _removeBlobs(obj,curKey,containingObject){if(!obj)return obj;if(global.Blob&&obj instanceof Blob||global.File&&obj instanceof File){pendingBlobs++;var fileReader=new FileReader;fileReader.onload=function(){if(containingObject){containingObject[curKey]=this.result}else{bloblessData=this.result}if(!--pendingBlobs){callback(bloblessData)}};fileReader.readAsArrayBuffer(obj)}else if(isArray(obj)){for(var i=0;i<obj.length;i++){_removeBlobs(obj[i],i,obj)}}else if(obj&&\"object\"==typeof obj&&!isBuf(obj)){for(var key in obj){_removeBlobs(obj[key],key,obj)}}}var pendingBlobs=0;var bloblessData=data;_removeBlobs(bloblessData);if(!pendingBlobs){callback(bloblessData)}}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{\"./is-buffer\":48,isarray:43}],47:[function(_dereq_,module,exports){var debug=_dereq_(\"debug\")(\"socket.io-parser\");var json=_dereq_(\"json3\");var isArray=_dereq_(\"isarray\");var Emitter=_dereq_(\"component-emitter\");var binary=_dereq_(\"./binary\");var isBuf=_dereq_(\"./is-buffer\");exports.protocol=4;exports.types=[\"CONNECT\",\"DISCONNECT\",\"EVENT\",\"BINARY_EVENT\",\"ACK\",\"BINARY_ACK\",\"ERROR\"];exports.CONNECT=0;exports.DISCONNECT=1;exports.EVENT=2;exports.ACK=3;exports.ERROR=4;exports.BINARY_EVENT=5;exports.BINARY_ACK=6;exports.Encoder=Encoder;exports.Decoder=Decoder;function Encoder(){}Encoder.prototype.encode=function(obj,callback){debug(\"encoding packet %j\",obj);if(exports.BINARY_EVENT==obj.type||exports.BINARY_ACK==obj.type){encodeAsBinary(obj,callback)}else{var encoding=encodeAsString(obj);callback([encoding])}};function encodeAsString(obj){var str=\"\";var nsp=false;str+=obj.type;if(exports.BINARY_EVENT==obj.type||exports.BINARY_ACK==obj.type){str+=obj.attachments;str+=\"-\"}if(obj.nsp&&\"/\"!=obj.nsp){nsp=true;str+=obj.nsp}if(null!=obj.id){if(nsp){str+=\",\";nsp=false}str+=obj.id}if(null!=obj.data){if(nsp)str+=\",\";str+=json.stringify(obj.data)}debug(\"encoded %j as %s\",obj,str);return str}function encodeAsBinary(obj,callback){function writeEncoding(bloblessData){var deconstruction=binary.deconstructPacket(bloblessData);var pack=encodeAsString(deconstruction.packet);var buffers=deconstruction.buffers;buffers.unshift(pack);callback(buffers)}binary.removeBlobs(obj,writeEncoding)}function Decoder(){this.reconstructor=null}Emitter(Decoder.prototype);Decoder.prototype.add=function(obj){var packet;if(\"string\"==typeof obj){packet=decodeString(obj);if(exports.BINARY_EVENT==packet.type||exports.BINARY_ACK==packet.type){this.reconstructor=new BinaryReconstructor(packet);if(this.reconstructor.reconPack.attachments===0){this.emit(\"decoded\",packet)}}else{this.emit(\"decoded\",packet)}}else if(isBuf(obj)||obj.base64){if(!this.reconstructor){throw new Error(\"got binary data when not reconstructing a packet\")}else{packet=this.reconstructor.takeBinaryData(obj);if(packet){this.reconstructor=null;this.emit(\"decoded\",packet)}}}else{throw new Error(\"Unknown type: \"+obj)}};function decodeString(str){var p={};var i=0;p.type=Number(str.charAt(0));if(null==exports.types[p.type])return error();if(exports.BINARY_EVENT==p.type||exports.BINARY_ACK==p.type){var buf=\"\";while(str.charAt(++i)!=\"-\"){buf+=str.charAt(i);if(i==str.length)break}if(buf!=Number(buf)||str.charAt(i)!=\"-\"){throw new Error(\"Illegal attachments\")}p.attachments=Number(buf)}if(\"/\"==str.charAt(i+1)){p.nsp=\"\";while(++i){var c=str.charAt(i);if(\",\"==c)break;p.nsp+=c;if(i==str.length)break}}else{p.nsp=\"/\"}var next=str.charAt(i+1);if(\"\"!==next&&Number(next)==next){p.id=\"\";while(++i){var c=str.charAt(i);if(null==c||Number(c)!=c){--i;break}p.id+=str.charAt(i);if(i==str.length)break}p.id=Number(p.id)}if(str.charAt(++i)){try{p.data=json.parse(str.substr(i))}catch(e){return error()}}debug(\"decoded %s as %j\",str,p);return p}Decoder.prototype.destroy=function(){if(this.reconstructor){this.reconstructor.finishedReconstruction()}};function BinaryReconstructor(packet){this.reconPack=packet;this.buffers=[]}BinaryReconstructor.prototype.takeBinaryData=function(binData){this.buffers.push(binData);if(this.buffers.length==this.reconPack.attachments){var packet=binary.reconstructPacket(this.reconPack,this.buffers);this.finishedReconstruction();return packet}return null};BinaryReconstructor.prototype.finishedReconstruction=function(){this.reconPack=null;this.buffers=[]};function error(data){return{type:exports.ERROR,data:\"parser error\"}}},{\"./binary\":46,\"./is-buffer\":48,\"component-emitter\":49,debug:39,isarray:43,json3:50}],48:[function(_dereq_,module,exports){(function(global){module.exports=isBuf;function isBuf(obj){return global.Buffer&&global.Buffer.isBuffer(obj)||global.ArrayBuffer&&obj instanceof ArrayBuffer}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{}],49:[function(_dereq_,module,exports){arguments[4][15][0].apply(exports,arguments)},{dup:15}],50:[function(_dereq_,module,exports){(function(global){(function(){var isLoader=typeof define===\"function\"&&define.amd;var objectTypes={\"function\":true,object:true};var freeExports=objectTypes[typeof exports]&&exports&&!exports.nodeType&&exports;var root=objectTypes[typeof window]&&window||this,freeGlobal=freeExports&&objectTypes[typeof module]&&module&&!module.nodeType&&typeof global==\"object\"&&global;if(freeGlobal&&(freeGlobal[\"global\"]===freeGlobal||freeGlobal[\"window\"]===freeGlobal||freeGlobal[\"self\"]===freeGlobal)){root=freeGlobal}function runInContext(context,exports){context||(context=root[\"Object\"]());exports||(exports=root[\"Object\"]());var Number=context[\"Number\"]||root[\"Number\"],String=context[\"String\"]||root[\"String\"],Object=context[\"Object\"]||root[\"Object\"],Date=context[\"Date\"]||root[\"Date\"],SyntaxError=context[\"SyntaxError\"]||root[\"SyntaxError\"],TypeError=context[\"TypeError\"]||root[\"TypeError\"],Math=context[\"Math\"]||root[\"Math\"],nativeJSON=context[\"JSON\"]||root[\"JSON\"];if(typeof nativeJSON==\"object\"&&nativeJSON){exports.stringify=nativeJSON.stringify;exports.parse=nativeJSON.parse}var objectProto=Object.prototype,getClass=objectProto.toString,isProperty,forEach,undef;var isExtended=new Date(-0xc782b5b800cec);try{isExtended=isExtended.getUTCFullYear()==-109252&&isExtended.getUTCMonth()===0&&isExtended.getUTCDate()===1&&isExtended.getUTCHours()==10&&isExtended.getUTCMinutes()==37&&isExtended.getUTCSeconds()==6&&isExtended.getUTCMilliseconds()==708}catch(exception){}function has(name){if(has[name]!==undef){return has[name]}var isSupported;if(name==\"bug-string-char-index\"){isSupported=\"a\"[0]!=\"a\"}else if(name==\"json\"){isSupported=has(\"json-stringify\")&&has(\"json-parse\")}else{var value,serialized='{\"a\":[1,true,false,null,\"\\\\u0000\\\\b\\\\n\\\\f\\\\r\\\\t\"]}';if(name==\"json-stringify\"){var stringify=exports.stringify,stringifySupported=typeof stringify==\"function\"&&isExtended;if(stringifySupported){(value=function(){return 1}).toJSON=value;try{stringifySupported=stringify(0)===\"0\"&&stringify(new Number)===\"0\"&&stringify(new String)=='\"\"'&&stringify(getClass)===undef&&stringify(undef)===undef&&stringify()===undef&&stringify(value)===\"1\"&&stringify([value])==\"[1]\"&&stringify([undef])==\"[null]\"&&stringify(null)==\"null\"&&stringify([undef,getClass,null])==\"[null,null,null]\"&&stringify({a:[value,true,false,null,\"\\x00\\b\\n\\f\\r\t\"]})==serialized&&stringify(null,value)===\"1\"&&stringify([1,2],null,1)==\"[\\n 1,\\n 2\\n]\"&&stringify(new Date(-864e13))=='\"-271821-04-20T00:00:00.000Z\"'&&stringify(new Date(864e13))=='\"+275760-09-13T00:00:00.000Z\"'&&stringify(new Date(-621987552e5))=='\"-000001-01-01T00:00:00.000Z\"'&&stringify(new Date(-1))=='\"1969-12-31T23:59:59.999Z\"'}catch(exception){stringifySupported=false}}isSupported=stringifySupported}if(name==\"json-parse\"){var parse=exports.parse;if(typeof parse==\"function\"){try{if(parse(\"0\")===0&&!parse(false)){value=parse(serialized);var parseSupported=value[\"a\"].length==5&&value[\"a\"][0]===1;if(parseSupported){try{parseSupported=!parse('\"\t\"')}catch(exception){}if(parseSupported){try{parseSupported=parse(\"01\")!==1}catch(exception){}}if(parseSupported){try{parseSupported=parse(\"1.\")!==1}catch(exception){}}}}}catch(exception){parseSupported=false}}isSupported=parseSupported}}return has[name]=!!isSupported}if(!has(\"json\")){var functionClass=\"[object Function]\",dateClass=\"[object Date]\",numberClass=\"[object Number]\",stringClass=\"[object String]\",arrayClass=\"[object Array]\",booleanClass=\"[object Boolean]\";var charIndexBuggy=has(\"bug-string-char-index\");if(!isExtended){var floor=Math.floor;var Months=[0,31,59,90,120,151,181,212,243,273,304,334];var getDay=function(year,month){return Months[month]+365*(year-1970)+floor((year-1969+(month=+(month>1)))/4)-floor((year-1901+month)/100)+floor((year-1601+month)/400)}}if(!(isProperty=objectProto.hasOwnProperty)){isProperty=function(property){var members={},constructor;if((members.__proto__=null,members.__proto__={toString:1},members).toString!=getClass){isProperty=function(property){var original=this.__proto__,result=property in(this.__proto__=null,this);this.__proto__=original;return result}}else{constructor=members.constructor;isProperty=function(property){var parent=(this.constructor||constructor).prototype;return property in this&&!(property in parent&&this[property]===parent[property])}}members=null;return isProperty.call(this,property)}}forEach=function(object,callback){var size=0,Properties,members,property;(Properties=function(){this.valueOf=0}).prototype.valueOf=0;members=new Properties;for(property in members){if(isProperty.call(members,property)){size++}}Properties=members=null;if(!size){members=[\"valueOf\",\"toString\",\"toLocaleString\",\"propertyIsEnumerable\",\"isPrototypeOf\",\"hasOwnProperty\",\"constructor\"];forEach=function(object,callback){var isFunction=getClass.call(object)==functionClass,property,length;var hasProperty=!isFunction&&typeof object.constructor!=\"function\"&&objectTypes[typeof object.hasOwnProperty]&&object.hasOwnProperty||isProperty;for(property in object){if(!(isFunction&&property==\"prototype\")&&hasProperty.call(object,property)){callback(property)}}for(length=members.length;property=members[--length];hasProperty.call(object,property)&&callback(property));}}else if(size==2){forEach=function(object,callback){var members={},isFunction=getClass.call(object)==functionClass,property;for(property in object){if(!(isFunction&&property==\"prototype\")&&!isProperty.call(members,property)&&(members[property]=1)&&isProperty.call(object,property)){callback(property)}}}}else{forEach=function(object,callback){var isFunction=getClass.call(object)==functionClass,property,isConstructor;for(property in object){if(!(isFunction&&property==\"prototype\")&&isProperty.call(object,property)&&!(isConstructor=property===\"constructor\")){callback(property)}}if(isConstructor||isProperty.call(object,property=\"constructor\")){callback(property)}}}return forEach(object,callback)};if(!has(\"json-stringify\")){var Escapes={92:\"\\\\\\\\\",34:'\\\\\"',8:\"\\\\b\",12:\"\\\\f\",10:\"\\\\n\",13:\"\\\\r\",9:\"\\\\t\"};var leadingZeroes=\"000000\";var toPaddedString=function(width,value){return(leadingZeroes+(value||0)).slice(-width)};var unicodePrefix=\"\\\\u00\";var quote=function(value){var result='\"',index=0,length=value.length,useCharIndex=!charIndexBuggy||length>10;var symbols=useCharIndex&&(charIndexBuggy?value.split(\"\"):value);for(;index<length;index++){var charCode=value.charCodeAt(index);switch(charCode){case 8:case 9:case 10:case 12:case 13:case 34:case 92:result+=Escapes[charCode];break;default:if(charCode<32){result+=unicodePrefix+toPaddedString(2,charCode.toString(16));break}result+=useCharIndex?symbols[index]:value.charAt(index)}}return result+'\"'};var serialize=function(property,object,callback,properties,whitespace,indentation,stack){var value,className,year,month,date,time,hours,minutes,seconds,milliseconds,results,element,index,length,prefix,result;try{value=object[property]}catch(exception){}if(typeof value==\"object\"&&value){className=getClass.call(value);if(className==dateClass&&!isProperty.call(value,\"toJSON\")){if(value>-1/0&&value<1/0){if(getDay){date=floor(value/864e5);for(year=floor(date/365.2425)+1970-1;getDay(year+1,0)<=date;year++);for(month=floor((date-getDay(year,0))/30.42);getDay(year,month+1)<=date;month++);date=1+date-getDay(year,month);time=(value%864e5+864e5)%864e5;hours=floor(time/36e5)%24;minutes=floor(time/6e4)%60;seconds=floor(time/1e3)%60;milliseconds=time%1e3}else{year=value.getUTCFullYear();month=value.getUTCMonth();date=value.getUTCDate();hours=value.getUTCHours();minutes=value.getUTCMinutes();seconds=value.getUTCSeconds();milliseconds=value.getUTCMilliseconds()}value=(year<=0||year>=1e4?(year<0?\"-\":\"+\")+toPaddedString(6,year<0?-year:year):toPaddedString(4,year))+\"-\"+toPaddedString(2,month+1)+\"-\"+toPaddedString(2,date)+\"T\"+toPaddedString(2,hours)+\":\"+toPaddedString(2,minutes)+\":\"+toPaddedString(2,seconds)+\".\"+toPaddedString(3,milliseconds)+\"Z\"}else{value=null}}else if(typeof value.toJSON==\"function\"&&(className!=numberClass&&className!=stringClass&&className!=arrayClass||isProperty.call(value,\"toJSON\"))){value=value.toJSON(property)}}if(callback){value=callback.call(object,property,value)}if(value===null){return\"null\"}className=getClass.call(value);if(className==booleanClass){return\"\"+value}else if(className==numberClass){return value>-1/0&&value<1/0?\"\"+value:\"null\"}else if(className==stringClass){return quote(\"\"+value)}if(typeof value==\"object\"){for(length=stack.length;length--;){if(stack[length]===value){throw TypeError()}}stack.push(value);results=[];prefix=indentation;indentation+=whitespace;if(className==arrayClass){for(index=0,length=value.length;index<length;index++){element=serialize(index,value,callback,properties,whitespace,indentation,stack);results.push(element===undef?\"null\":element)}result=results.length?whitespace?\"[\\n\"+indentation+results.join(\",\\n\"+indentation)+\"\\n\"+prefix+\"]\":\"[\"+results.join(\",\")+\"]\":\"[]\"}else{forEach(properties||value,function(property){var element=serialize(property,value,callback,properties,whitespace,indentation,stack);if(element!==undef){results.push(quote(property)+\":\"+(whitespace?\" \":\"\")+element)}});result=results.length?whitespace?\"{\\n\"+indentation+results.join(\",\\n\"+indentation)+\"\\n\"+prefix+\"}\":\"{\"+results.join(\",\")+\"}\":\"{}\"}stack.pop();return result}};exports.stringify=function(source,filter,width){var whitespace,callback,properties,className;if(objectTypes[typeof filter]&&filter){if((className=getClass.call(filter))==functionClass){callback=filter}else if(className==arrayClass){properties={};for(var index=0,length=filter.length,value;index<length;value=filter[index++],(className=getClass.call(value),className==stringClass||className==numberClass)&&(properties[value]=1));}}if(width){if((className=getClass.call(width))==numberClass){if((width-=width%1)>0){for(whitespace=\"\",width>10&&(width=10);whitespace.length<width;whitespace+=\" \");}}else if(className==stringClass){whitespace=width.length<=10?width:width.slice(0,10)}}return serialize(\"\",(value={},value[\"\"]=source,value),callback,properties,whitespace,\"\",[])}}if(!has(\"json-parse\")){var fromCharCode=String.fromCharCode;var Unescapes={92:\"\\\\\",34:'\"',47:\"/\",98:\"\\b\",116:\"\t\",110:\"\\n\",102:\"\\f\",114:\"\\r\"};var Index,Source;var abort=function(){Index=Source=null;throw SyntaxError()};var lex=function(){var source=Source,length=source.length,value,begin,position,isSigned,charCode;while(Index<length){charCode=source.charCodeAt(Index);switch(charCode){case 9:case 10:case 13:case 32:Index++;break;case 123:case 125:case 91:case 93:case 58:case 44:value=charIndexBuggy?source.charAt(Index):source[Index];Index++;return value;case 34:for(value=\"@\",Index++;Index<length;){charCode=source.charCodeAt(Index);if(charCode<32){abort()}else if(charCode==92){charCode=source.charCodeAt(++Index);switch(charCode){case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:value+=Unescapes[charCode];Index++;break;case 117:begin=++Index;for(position=Index+4;Index<position;Index++){charCode=source.charCodeAt(Index);if(!(charCode>=48&&charCode<=57||charCode>=97&&charCode<=102||charCode>=65&&charCode<=70)){abort()}}value+=fromCharCode(\"0x\"+source.slice(begin,Index));break;default:abort()}}else{if(charCode==34){break}charCode=source.charCodeAt(Index);begin=Index;while(charCode>=32&&charCode!=92&&charCode!=34){charCode=source.charCodeAt(++Index)}value+=source.slice(begin,Index)}}if(source.charCodeAt(Index)==34){Index++;return value}abort();default:begin=Index;if(charCode==45){isSigned=true;charCode=source.charCodeAt(++Index)}if(charCode>=48&&charCode<=57){if(charCode==48&&(charCode=source.charCodeAt(Index+1),charCode>=48&&charCode<=57)){abort()}isSigned=false;for(;Index<length&&(charCode=source.charCodeAt(Index),charCode>=48&&charCode<=57);Index++);if(source.charCodeAt(Index)==46){position=++Index;for(;position<length&&(charCode=source.charCodeAt(position),charCode>=48&&charCode<=57);position++);if(position==Index){abort()}Index=position}charCode=source.charCodeAt(Index);if(charCode==101||charCode==69){charCode=source.charCodeAt(++Index);if(charCode==43||charCode==45){Index++}for(position=Index;position<length&&(charCode=source.charCodeAt(position),charCode>=48&&charCode<=57);position++);if(position==Index){abort()}Index=position}return+source.slice(begin,Index)}if(isSigned){abort()}if(source.slice(Index,Index+4)==\"true\"){Index+=4;return true}else if(source.slice(Index,Index+5)==\"false\"){Index+=5;return false}else if(source.slice(Index,Index+4)==\"null\"){Index+=4;return null}abort()}}return\"$\"};var get=function(value){var results,hasMembers;if(value==\"$\"){abort()}if(typeof value==\"string\"){if((charIndexBuggy?value.charAt(0):value[0])==\"@\"){return value.slice(1)}if(value==\"[\"){results=[];for(;;hasMembers||(hasMembers=true)){value=lex();if(value==\"]\"){break}if(hasMembers){if(value==\",\"){value=lex();if(value==\"]\"){abort()}}else{abort()}}if(value==\",\"){abort()}results.push(get(value))}return results}else if(value==\"{\"){results={};for(;;hasMembers||(hasMembers=true)){value=lex();if(value==\"}\"){break}if(hasMembers){if(value==\",\"){value=lex();if(value==\"}\"){abort()}}else{abort()}}if(value==\",\"||typeof value!=\"string\"||(charIndexBuggy?value.charAt(0):value[0])!=\"@\"||lex()!=\":\"){abort()}results[value.slice(1)]=get(lex())\n}return results}abort()}return value};var update=function(source,property,callback){var element=walk(source,property,callback);if(element===undef){delete source[property]}else{source[property]=element}};var walk=function(source,property,callback){var value=source[property],length;if(typeof value==\"object\"&&value){if(getClass.call(value)==arrayClass){for(length=value.length;length--;){update(value,length,callback)}}else{forEach(value,function(property){update(value,property,callback)})}}return callback.call(source,property,value)};exports.parse=function(source,callback){var result,value;Index=0;Source=\"\"+source;result=get(lex());if(lex()!=\"$\"){abort()}Index=Source=null;return callback&&getClass.call(callback)==functionClass?walk((value={},value[\"\"]=result,value),\"\",callback):result}}}exports[\"runInContext\"]=runInContext;return exports}if(freeExports&&!isLoader){runInContext(root,freeExports)}else{var nativeJSON=root.JSON,previousJSON=root[\"JSON3\"],isRestored=false;var JSON3=runInContext(root,root[\"JSON3\"]={noConflict:function(){if(!isRestored){isRestored=true;root.JSON=nativeJSON;root[\"JSON3\"]=previousJSON;nativeJSON=previousJSON=null}return JSON3}});root.JSON={parse:JSON3.parse,stringify:JSON3.stringify}}if(isLoader){define(function(){return JSON3})}}).call(this)}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{}],51:[function(_dereq_,module,exports){module.exports=toArray;function toArray(list,index){var array=[];index=index||0;for(var i=index||0;i<list.length;i++){array[i-index]=list[i]}return array}},{}]},{},[31])(31)});\n\n    \n      ;var weight = document.getElementById('weight');\n      var socket = io('http://{{ip}}:4001');\n      socket.on('getWeight', function(msg) {\n        weight.innerHTML = msg;\n    \n      }); \n    }, 1000);\n    </script>\n\n  </body>\n</html>\n","x":624.9999847412109,"y":1228.333251953125,"wires":[["93f9fcd0.f5fcd"]]},{"id":"93f9fcd0.f5fcd","type":"http response","z":"2f07d3e2.0f102c","name":"","x":824.9999847412109,"y":1228.333251953125,"wires":[]},{"id":"cc2274dd.0daff8","type":"function","z":"2f07d3e2.0f102c","name":"set ip","func":"msg.ip = global.get('ip');\nreturn msg;","outputs":1,"noerr":0,"x":424.99998474121094,"y":1228.333251953125,"wires":[["31b73038.33728"]]},{"id":"82950fbb.1abbc","type":"http in","z":"2f07d3e2.0f102c","name":"","url":"/getsnapshot_4","method":"get","swaggerDoc":"","x":178.33332061767578,"y":1143.3332166671753,"wires":[["71016364.7edb2c","276411e0.28e5be"]]},{"id":"ba097be9.c24668","type":"http response","z":"2f07d3e2.0f102c","name":"","x":909.8889007568359,"y":1503.222173690796,"wires":[]},{"id":"3b59c408.4ffe9c","type":"function","z":"2f07d3e2.0f102c","name":"photo","func":"flow.set(\"p1\",\"\");\nflow.set(\"p2\",\"\");\nflow.set(\"p3\",\"\" );\n\n\nmsg.payload = {\n    p1: flow.get(\"p1\"),\n    p2: flow.get(\"p2\"),\n    p3: flow.get(\"p3\")\n}\nreturn msg;","outputs":1,"noerr":0,"x":427.5833206176758,"y":303.33334827423096,"wires":[["45f4d08e.3f283"]]},{"id":"8ea89e20.621a","type":"function","z":"7f6ea0f.1a6ab6","name":"GET WEIGHT","func":"var payload = msg.payload;\nvar parser = flow.get('parser');\nvar currentWeight = parser(payload);\n\nflow.set('currentWeight',currentWeight);\n\nmsg.payload = currentWeight;\n\nreturn msg;","outputs":1,"noerr":0,"x":299,"y":158,"wires":[["563d8bb6.e3dc94","765312ec.26485c"]]},{"id":"1022f498.b788db","type":"inject","z":"7f6ea0f.1a6ab6","name":"init","topic":"","payload":"init","payloadType":"str","repeat":"","crontab":"","once":true,"x":127.99999618530273,"y":100.99999809265137,"wires":[["9d38753a.6730b8"]]},{"id":"1018b52d.31263b","type":"comment","z":"7f6ea0f.1a6ab6","name":"INITIALIZING","info":"","x":147.99999618530273,"y":60.99999809265137,"wires":[]},{"id":"9d38753a.6730b8","type":"function","z":"7f6ea0f.1a6ab6","name":"Модель весов","func":"flow.set('inputString',\"CMD\");\nflow.set('parser',function(v){\n            \n        //v = v.replace('S','');\n        //v = v.replace('D','');\n        //v = v.replace('kg','');\n        return Number(v);\n        \n        }\n    );\nglobal.set('scale_id_in','88348A32BD3D149FE055000000000001');\nglobal.set('ip','192.168.104.3');\nglobal.set('video_camera_url_1','http://admin:admin333@192.168.104.58/ISAPI/Streaming/channels/101/picture?snapShotImageType=JPEG');\n   \nreturn msg;","outputs":1,"noerr":0,"x":338,"y":100.4285659790039,"wires":[[]]},{"id":"563d8bb6.e3dc94","type":"link out","z":"7f6ea0f.1a6ab6","name":"s3","links":["701e1707.3bb5c8","2c53da3f.f1a3f6","a3056dbd.15f8b"],"x":541.7142333984375,"y":155,"wires":[]},{"id":"55a0d53d.f4fb6c","type":"link in","z":"7f6ea0f.1a6ab6","name":"","links":["b4c2eb1c.2b6148"],"x":126,"y":158.14285278320312,"wires":[["8ea89e20.621a"]]},{"id":"765312ec.26485c","type":"debug","z":"7f6ea0f.1a6ab6","name":"","active":false,"console":"false","complete":"false","x":456,"y":218.14285278320312,"wires":[]},{"id":"8fab7b59.21af58","type":"file","z":"e761e99f.3a2628","name":"deivce_config","filename":"deivce_config.json","appendNewline":true,"createDir":false,"overwriteFile":"true","x":426,"y":184,"wires":[]},{"id":"b3941e6.776fce","type":"exec","z":"e761e99f.3a2628","command":"cat /proc/cpuinfo","addpay":true,"append":"| grep Serial","useSpawn":"","timer":"5","name":"","x":396,"y":64,"wires":[["febad496.421a28","e9e33d9.a8129c"],[],[]]},{"id":"c83a5499.881e78","type":"function","z":"e761e99f.3a2628","name":"main config","func":"flow.set('prevWeight',null);\nflow.set('transaction',null);\nflow.set('transactionData',[]);\nflow.set('transactionMaxWeight',null);\nflow.set('transactionHasMinWeight',null);\nflow.set('transactionHasMaxWeight',null);\nflow.set('transactionHasMaxDuration',null);\nflow.set('lasttimedata', new Date());\nflow.set('checkHealth',null);\nflow.set('transactionWaybill',null);\nflow.set('transactionAccWeight', null);\nflow.set('transactionHasOverLoad', null);\nreturn msg;\n","outputs":1,"noerr":0,"x":416,"y":264,"wires":[[]]},{"id":"728a7563.9f78dc","type":"inject","z":"e761e99f.3a2628","name":"","topic":"","payload":"","payloadType":"str","repeat":"","crontab":"","once":true,"x":144,"y":246,"wires":[["a9e52aa5.97bf18","c83a5499.881e78"]]},{"id":"89cff067.7549c","type":"http in","z":"e761e99f.3a2628","name":"","url":"/firmware_4","method":"post","swaggerDoc":"","x":186,"y":184,"wires":[["8fab7b59.21af58"]]},{"id":"a9e52aa5.97bf18","type":"file in","z":"e761e99f.3a2628","name":"deivce_config","filename":"deivce_config.json","format":"utf8","x":426,"y":224,"wires":[["906a0fb3.aa5bc"]]},{"id":"1c7fce79.8d8932","type":"http in","z":"e761e99f.3a2628","name":"","url":"/serial_4","method":"get","swaggerDoc":"","x":176,"y":64,"wires":[["b3941e6.776fce"]]},{"id":"febad496.421a28","type":"http response","z":"e761e99f.3a2628","name":"","x":531.0000076293945,"y":26.500000953674316,"wires":[]},{"id":"e9e33d9.a8129c","type":"function","z":"e761e99f.3a2628","name":"","func":"msg.payload = msg.payload.split(':')[1].replace('\\n','').replace(' ','');\nreturn msg;","outputs":1,"noerr":0,"x":586,"y":124,"wires":[["f4be7c09.41082"]]},{"id":"f4be7c09.41082","type":"debug","z":"e761e99f.3a2628","name":"","active":true,"console":"false","complete":"false","x":726,"y":124,"wires":[]},{"id":"4ced396e.4d29e8","type":"inject","z":"e761e99f.3a2628","name":"DEMO","topic":"","payload":"","payloadType":"str","repeat":"10800","crontab":"","once":true,"x":146,"y":124,"wires":[["21028133.822e4e"]]},{"id":"21028133.822e4e","type":"function","z":"e761e99f.3a2628","name":"DEMO Data","func":"var device_config = {\n    'event_move_in_id':'80096D9ABE7F68F3E0533300000A6C0D',\n    'event_move_in_minus_id':'8DB9B239DF5252F0E055000000000001',\n    'event_move_out_id':'80096D9ABE8068F3E0533300000A6C0D',\n    'event_max_weight_id':'85A255F950F9BEF4E0533300000AC45D',\n    'event_on_id': '85A2CC45702A2DD1E0533300000A0C94',\n    'event_off_id':'85A2CC4570292DD1E0533300000A0C94',\n    'event_max_duration':'8642EE858DE89BAAE0533300000AFCC7',\n    'event_fake_traffic':'80096EF60C186574E0533300000ADBA5',\n    'event_get_weight_acc':'800970AC1FDC683CE0533300000AF1B0',\n    'event_min_weight':'875C3EB5C9DD092DE055000000000001',\n    'event_driver_in':'8E68D8D8B2977181E055000000000001',\n    'event_over_load':'B3EB5F800EFD2620E0530101007F8A05',\n    'snapshot_events':['80096D9ABE7F68F3E0533300000A6C0D','85A255F950F9BEF4E0533300000AC45D','8642EE858DE89BAAE0533300000AFCC7','800970AC1FDC683CE0533300000AF1B0', \"8E68D8D8B2977181E055000000000001\",\"B3EB5F800EFD2620E0530101007F8A05\"],\n    'main_host':'http://78.46.24.220:8080/ords/demo_ettn',\n    'event_url':'/iot_cli/events/log',\n    'state_url':'/iot_cli/device',\n    'snapshot_url':'/iot_cli/events/snapshot',\n    'maxWeight':60000,\n    'maxDuration':600000,\n    'minWeight':-40,\n    'checkHealthTimeout':3000,\n    'minTriggerWeight':40,\n    'driverWeight':80,\n    'overLoadWeight': 200\n}\nmsg.payload = device_config;\n// flow.set('scale_id','80096CB0EFD83B63E0533300000A4334');\n// flow.set('event_move_in_id','80096D9ABE7F68F3E0533300000A6C0D');\n// flow.set('event_move_out_id','80096D9ABE8068F3E0533300000A6C0D');\n// flow.set('event_max_weight_id','85A255F950F9BEF4E0533300000AC45D');\n// flow.set('event_off_id','85A2CC4570292DD1E0533300000A0C94');\n// flow.set('event_on_id', '85A2CC45702A2DD1E0533300000A0C94');\n// flow.set('event_max_duration','8642EE858DE89BAAE0533300000AFCC7');\n// flow.set('main_host','http://prod.apex.rest/ords/ettn');\n// flow.set('event_url','/iot_cli/events/log');\n// flow.set('state_url','/v1/device');\n// flow.set('maxWeight',40000);\n// flow.set('maxDuration',20000);\n// flow.set('checkHealthTimeout',3000);\nreturn msg;","outputs":1,"noerr":0,"x":305,"y":124,"wires":[["8fab7b59.21af58"]]},{"id":"906a0fb3.aa5bc","type":"function","z":"e761e99f.3a2628","name":"device config","func":"var device_config = JSON.parse(msg.payload);\n\nflow.set('scale_id',device_config.scale_id);\nflow.set('event_move_in_id',device_config.event_move_in_id);\nflow.set('event_move_in_minus_id',device_config.event_move_in_minus_id);\nflow.set('event_move_out_id',device_config.event_move_out_id);\nflow.set('event_max_weight_id',device_config.event_max_weight_id);\nflow.set('event_off_id',device_config.event_off_id);\nflow.set('event_on_id', device_config.event_on_id);\nflow.set('event_max_duration',device_config.event_max_duration);\nflow.set('event_fake_traffic',device_config.event_fake_traffic);\nflow.set('event_driver_in', device_config.event_driver_in);\nflow.set('event_over_load',device_config.event_over_load);\nflow.set('main_host',device_config.main_host);\nflow.set('event_url',device_config.event_url);\nflow.set('state_url',device_config.state_url);\nflow.set('maxWeight',device_config.maxWeight);\nflow.set('minWeight',device_config.minWeight);\nflow.set('maxDuration',device_config.maxDuration);\nflow.set('checkHealthTimeout',device_config.checkHealthTimeout);\nflow.set('event_get_weight_acc',device_config.event_get_weight_acc);\nflow.set('event_min_weight',device_config.event_min_weight);\nflow.set('minTriggerWeight',device_config.minTriggerWeight);\nflow.set('snapshot_url',device_config.snapshot_url);\nflow.set('snapshot_events',device_config.snapshot_events);\nflow.set('driverWeight',device_config.driverWeight);\nflow.set('overLoadWeight', device_config.overLoadWeight);\n\nmsg.payload = {\n\tscale_id: flow.get('scale_id'),\n\tevent_move_in_id: flow.get('event_move_in_id'),\n\tevent_move_in_minus_id: flow.get('event_move_in_minus_id'),\n\tevent_move_out_id: flow.get('event_move_out_id'),\n\tevent_max_weight_id: flow.get('event_max_weight_id'),\n\tevent_off_id: flow.get('event_off_id'),\n\tevent_on_id: flow.get('event_on_id'),\n\tevent_max_duration: flow.get('event_max_duration'),\n\tevent_fake_traffic: flow.get('event_fake_traffic'),\n\tevent_driver_in: flow.get('event_driver_in'),\n\tevent_over_load: flow.get('event_over_load'),\n\tmain_host: flow.get('main_host'),\n\tevent_url: flow.get('event_url'),\n\tstate_url: flow.get('state_url'),\n\tmaxWeight: flow.get('maxWeight'),\n\tminWeight: flow.get('minWeight'),\n\tmaxDuration: flow.get('maxDuration'),\n\tcheckHealthTimeout: flow.get('checkHealthTimeout'),\n\tevent_get_weight_acc: flow.get('event_get_weight_acc'),\n\tevent_min_weight: flow.get('event_min_weight'),\n\tminTriggerWeight: flow.get('minTriggerWeight'),\n\tsnapshot_url: flow.get('snapshot_url'),\n\tsnapshot_events: flow.get('snapshot_events'),\n\tdriverWeight: flow.get('driverWeight'),\n\toverLoadWeight: flow.get('overLoadWeight')\n};\n\nreturn msg;\n","outputs":1,"noerr":0,"x":611,"y":184,"wires":[["fe2467c0.6872a8"]]},{"id":"fe2467c0.6872a8","type":"json","z":"e761e99f.3a2628","name":"","x":757,"y":182,"wires":[["696ea00e.d8902"]]},{"id":"696ea00e.d8902","type":"debug","z":"e761e99f.3a2628","name":"IN device config","active":false,"console":"true","complete":"payload","x":919,"y":180,"wires":[]},{"id":"fc2cb0d6.d04c9","type":"function","z":"e761e99f.3a2628","name":"transactionHasMaxWeight","func":"msg.event_id = flow.get('event_max_weight_id');\nmsg.description = 'Перевищена максимально-допустима вага, кг: ' + msg.metadata.weight;\n\n\nreturn msg;","outputs":1,"noerr":0,"x":690,"y":640,"wires":[["604bec27.37aad4"]]},{"id":"8f2c9e35.4e5c4","type":"switch","z":"e761e99f.3a2628","name":"switch max weight","property":"transactionHasMaxWeight","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":450,"y":640,"wires":[["fc2cb0d6.d04c9"]]},{"id":"604bec27.37aad4","type":"function","z":"e761e99f.3a2628","name":"events payload","func":"var event_id = msg.event_id;\nvar scale_id = global.get('scale_id_in');\nvar snapshot_events = flow.get('snapshot_events');\nvar snapshot = false;\n\nif (snapshot_events.indexOf(event_id)>=0){\n    snapshot = true;\n}\n\nmsg.payload = {\n    'event':{\n        'id':msg.event_id\n    },\n    'devices':[{'id':scale_id}],\n    'data':msg.metadata,\n    'description':msg.description\n}\n\nmsg.headers = {\n    \"content-type\":\"application/json\"\n}\n\nmsg.url = flow.get('main_host')+flow.get('event_url');\nmsg.main_host = flow.get('main_host');\nmsg.event_url = flow.get('event_url');\nmsg.snapshot = snapshot;\nreturn msg;","outputs":1,"noerr":0,"x":1026.0000610351562,"y":609.4285163879395,"wires":[["72f991c3.47e47","d9ad82b9.143ad","a7e3d419.c74218","f722a5a7.31f5b8","b56c76bc.348f28"]]},{"id":"4030295f.6e2998","type":"function","z":"e761e99f.3a2628","name":"main module","func":"var prevWeight = flow.get('prevWeight');\nvar transaction = flow.get('transaction');\nvar transactionData = flow.get('transactionData');\nvar transactionMaxWeight = flow.get('transactionMaxWeight');\nvar transactionHasMaxWeight = flow.get('transactionHasMaxWeight');\nvar transactionHasMinWeight = flow.get('transactionHasMinWeight');\nvar transactionHasMaxDuration = flow.get('transactionHasMaxDuration');\nvar waybill = flow.get('transactionWaybill');\nvar weight = msg.payload;\nvar stableSize = 5;\nvar duration = 0;\nvar maxWeight = flow.get('maxWeight');\nvar maxDuration = flow.get('maxDuration');\nvar prevTransaction = transaction;\nvar minWeight = flow.get('minWeight');\nvar minTriggerWeight = flow.get('minTriggerWeight');\nvar is_minus = false;\nvar transactionAccWeight = flow.get('transactionAccWeight');//облікова вага\nvar overLoadWeight = flow.get('overLoadWeight');\n\n//transaction\nif (prevWeight === null){\n    prevWeight = msg.payload;    \n}else{\n    if((prevWeight <= 0) && (weight > 0) && (weight > minTriggerWeight)){\n        //start of transaction\n        transaction = Date.now();\n        msg.on = true;\n        flow.set('transaction',transaction);\n    }else if((prevWeight > 0) && (weight <=0) && (transaction)){\n        //transaction = 0;\n        msg.on = false;\n        transactionData = [];\n        flow.set('transaction',0);\n        flow.set('transactionMaxWeight',null);\n        flow.set('transactionHasMaxWeight',null);\n        flow.set('transactionHasMinWeight',null);\n        flow.set('transactionHasMaxDuration',null);\n        flow.set('transactionHasOverLoad',null);//облікова вага\n        flow.set('transactionWaybill',null);\n        flow.set('transactionMetadata',null);\n        flow.set('transactionAccWeight', null);//облікова вага\n    }else if((transaction === null) && (weight>0) && (weight > minTriggerWeight)){\n        transaction = Date.now();\n        flow.set('transaction',transaction);\n    }\n    if((prevWeight < 0) && ((weight-prevWeight) > minTriggerWeight)){\n        //start of transaction\n        is_minus = true;\n        msg.prevWeight = prevWeight;\n    }\n}\n\nif (transaction > 0){\n    transactionData.push(weight);    \n\n    //stable\n    if(transactionData.length > stableSize+1){\n        var stabletmp = true;\n        for (var i = transactionData.length-1; i > transactionData.length-1-stableSize; i--){\n            if (transactionData[i] !== transactionData[i-1]){\n                stabletmp = false;\n                msg.stable = stabletmp;\n                break;\n            }\n            msg.stable = stabletmp;\n        }\n    }else{\n        msg.stable = false;\n    }\n\n    //duration & transactionMaxWeight\n    duration = (Number(Date.now()) - Number(transaction));\n    if( (weight>transactionMaxWeight) || (transactionMaxWeight === null)){\n        transactionMaxWeight = weight;\n        flow.set(\"transactionMaxWeight\",transactionMaxWeight);\n    }\n    \n    if(!transactionHasMaxWeight && weight > maxWeight){\n        msg.transactionHasMaxWeight = true;\n        flow.set('transactionHasMaxWeight',true);\n    }\n    \n    if(!transactionHasMinWeight && weight < minWeight){\n        msg.transactionHasMinWeight = true;\n        flow.set('transactionHasMinWeight',true);\n    }\n    \n    //max duartion\n    if(!transactionHasMaxDuration && duration > maxDuration){\n        msg.transactionHasMaxDuration = true;\n        flow.set('transactionHasMaxDuration',true);\n    }\n}\n\n//result\nmsg.metadata = {\n    'weight':weight,\n    'prevWeight':prevWeight,\n    'prevTransaction':prevTransaction,\n    'transaction':transaction,\n    'on':msg.on,\n    'transactionDataCount':transactionData.length,\n    'stable':msg.stable,\n    'duration':Math.round(duration/1000),\n    'transactionMaxWeight':transactionMaxWeight,\n    'transactionAccWeight':transactionAccWeight,\n    'waybill':waybill,\n    'perimetr':true,\n    'weight1':msg.weight1,\n    'weight2':msg.weight2,\n    'weight_center':msg.weight_center,\n    'driverInCar':false\n}\nflow.set('transactionData',transactionData);\nflow.set('prevWeight',weight);\nflow.set('transactionMetadata',msg.metadata);\nflow.set('lasttimedata', new Date());\nmsg.is_minus = is_minus;\n\nif(transactionAccWeight){\n   flow.set('transactionHasOverLoad',true);\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":251,"y":618.9999885559082,"wires":[["2d17667f.615faa","8f2c9e35.4e5c4","5899cb1.fbfce34","f49385b8.2642e8","6856d733.311638"]]},{"id":"6486128a.97099c","type":"function","z":"e761e99f.3a2628","name":"get weight from accounting system","func":"var transactionMetadata = flow.get('transactionMetadata');\nvar transactionMaxWeight = flow.get('transactionMaxWeight');\nvar driverWeight = flow.get('driverWeight');\nvar buisness_data = msg.req.query;\n\nmsg.metadata = Object.assign(transactionMetadata,buisness_data);\n\n//check driver in a car\nvar driver_in = false;\nmsg.driverWeight = driverWeight;\nif((transactionMaxWeight - msg.metadata.weight) < driverWeight){\n    driver_in = true;\n}\n\nmsg.event_id = flow.get('event_get_weight_acc');\ntransactionWaybill = flow.get('transactionWaybill');\nif (!transactionWaybill){\n    flow.set('transactionWaybill',msg.req.query.reader);\n}\nmsg.description = ' '+buisness_data.operation_name+'. '+buisness_data.operation_type+'. Зважили в 1С. Поточна вага: ' + msg.metadata.weight+\" Номер авто: \"+buisness_data.truck1+\" \"+buisness_data.truck2+\" \"+buisness_data.item_name + \", ТТН: \" + buisness_data.waybill;\nmsg.transactionMetadata = transactionMetadata;\nmsg.driver_in = driver_in;\n\nflow.set('transactionAccWeight',  msg.metadata.weight);//облікова вага\n\nreturn msg;","outputs":1,"noerr":0,"x":520,"y":980,"wires":[["ce56721.341239","9a7cf1fe.046a7","604bec27.37aad4"]]},{"id":"f722a5a7.31f5b8","type":"http request","z":"e761e99f.3a2628","name":"EVENTS","method":"POST","ret":"txt","url":"","tls":"","x":1293.333381652832,"y":635.5555458068848,"wires":[["ccb9ef84.f3446","7d9e344b.fc859c"]]},{"id":"72f991c3.47e47","type":"switch","z":"e761e99f.3a2628","name":"take snapshot","property":"snapshot","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":1327.1429443359375,"y":740,"wires":[["961a9dd9.74e8c"]]},{"id":"d9ad82b9.143ad","type":"json","z":"e761e99f.3a2628","name":"","x":1180,"y":538.5713806152344,"wires":[["c1badfca.bec99"]]},{"id":"a7e3d419.c74218","type":"debug","z":"e761e99f.3a2628","name":"IN event","active":false,"console":"true","complete":"true","x":1194,"y":493.9999885559082,"wires":[]},{"id":"68279e2d.6bc76","type":"function","z":"e761e99f.3a2628","name":"move in","func":"msg.event_id = flow.get('event_move_in_id');\nmsg.description = 'Заїзд на ваги. Поточна вага: ' + msg.metadata.weight;\n\nreturn msg;","outputs":1,"noerr":0,"x":640,"y":560,"wires":[["604bec27.37aad4"]]},{"id":"c1d7081c.647498","type":"function","z":"e761e99f.3a2628","name":"off","func":"msg.event_id = flow.get('event_off_id');\nmsg.description = 'Прилад відключено';\nmsg.metadata = {\n    'state':msg.checkHealth\n}\nreturn msg;","outputs":1,"noerr":0,"x":670,"y":800,"wires":[["604bec27.37aad4"]]},{"id":"616d0f91.da2dc","type":"function","z":"e761e99f.3a2628","name":"on","func":"msg.event_id = flow.get('event_on_id');\nmsg.description = 'Прилад підключено';\nmsg.metadata = {\n    'state':msg.checkHealth\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":670,"y":760,"wires":[["604bec27.37aad4"]]},{"id":"ec1e2c99.5cd87","type":"function","z":"e761e99f.3a2628","name":"move out","func":"msg.event_id = flow.get('event_move_out_id');\nmsg.description = 'Зїзд з ваг. Поточна вага: ' + msg.metadata.weight;\n\nreturn msg;","outputs":1,"noerr":0,"x":640,"y":600,"wires":[["604bec27.37aad4"]]},{"id":"c53f3490.d362f8","type":"function","z":"e761e99f.3a2628","name":"transaction has max duration","func":"msg.event_id = flow.get('event_max_duration');\nmsg.description = 'Перевищено максимальний час находження на вагах, сек: ' + msg.metadata.duration;\n\nreturn msg;","outputs":1,"noerr":0,"x":700,"y":680,"wires":[["604bec27.37aad4"]]},{"id":"12a06a77.f02d46","type":"function","z":"e761e99f.3a2628","name":"empty waybill","func":"msg.event_id = flow.get('event_fake_traffic');\nmsg.description = 'Холостий проїзд по вагам. Тривалість проїзду ' + Math.round(msg.metadata.duration/60)+ 'хв.';\n\nreturn msg;","outputs":1,"noerr":0,"x":800,"y":520,"wires":[["604bec27.37aad4","5f455aca.d5c284"]]},{"id":"9105c48d.a4dd78","type":"function","z":"e761e99f.3a2628","name":"transactionHasMinWeight","func":"msg.event_id = flow.get('event_min_weight');\nmsg.description = 'Перевищена мінімально-допустима вага, кг: ' + msg.metadata.weight;\n\nreturn msg;","outputs":1,"noerr":0,"x":690,"y":720,"wires":[["604bec27.37aad4"]]},{"id":"624e43c4.750b4c","type":"function","z":"e761e99f.3a2628","name":"move in minus","func":"msg.event_id = flow.get('event_move_in_minus_id');\nmsg.description = 'Заїзд із мінусом. ' + msg.prevWeight +' кг.';\n\nreturn msg;","outputs":1,"noerr":0,"x":650,"y":480,"wires":[["604bec27.37aad4"]]},{"id":"701e1707.3bb5c8","type":"link in","z":"e761e99f.3a2628","name":"s4","links":["563d8bb6.e3dc94"],"x":95,"y":620,"wires":[["3b686f9c.08192","b4e25989.cc2268","e76a46d1.d90408","7809a257.8b203c","b45e1d71.2fdb9","4030295f.6e2998"]]},{"id":"2d17667f.615faa","type":"switch","z":"e761e99f.3a2628","name":"switch move","property":"on","propertyType":"msg","rules":[{"t":"true"},{"t":"false"}],"checkall":"true","outputs":2,"x":450,"y":600,"wires":[["68279e2d.6bc76"],["ec1e2c99.5cd87","4b4a8c6f.9b2124","5f455aca.d5c284","613a4601.061dc8"]]},{"id":"5899cb1.fbfce34","type":"switch","z":"e761e99f.3a2628","name":"max duration","property":"transactionHasMaxDuration","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":430,"y":680,"wires":[["c53f3490.d362f8"]]},{"id":"f49385b8.2642e8","type":"switch","z":"e761e99f.3a2628","name":"switch min weight","property":"transactionHasMinWeight","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":450,"y":720,"wires":[["9105c48d.a4dd78"]]},{"id":"6856d733.311638","type":"switch","z":"e761e99f.3a2628","name":"switch minus in","property":"is_minus","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":450,"y":540,"wires":[["624e43c4.750b4c"]]},{"id":"ce56721.341239","type":"switch","z":"e761e99f.3a2628","name":"","property":"driver_in","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":820,"y":860,"wires":[["5964bbd1.2d0c64","e0ce36ff.7a6d68"]]},{"id":"9a7cf1fe.046a7","type":"debug","z":"e761e99f.3a2628","name":"","active":true,"console":"false","complete":"true","x":786,"y":920.9999885559082,"wires":[]},{"id":"949ae604.71dc78","type":"http in","z":"e761e99f.3a2628","name":"","url":"/getWeight_4","method":"get","swaggerDoc":"","x":180,"y":980,"wires":[["6c6b6be9.ecfac4","6486128a.97099c","9178f0c.5c1111","fce49c69.bc01d"]]},{"id":"ccb9ef84.f3446","type":"function","z":"e761e99f.3a2628","name":"parser","func":"var str = {\n    payload: msg.payload,\n    event_id: msg.event_id,\n    metadata: msg.metadata,\n    driverWeight: msg.driverWeight,\n    description: msg.description,\n    url: msg.url,\n    main_host: msg.main_host,\n    event_url: msg.event_url,\n    statusCode: msg.statusCode,\n    responseUrl: msg.responseUrl\n    \n};\nmsg.payload = JSON.stringify(str);\nreturn msg;","outputs":1,"noerr":0,"x":1435.0001220703125,"y":689.9999694824219,"wires":[["df84d776.107d78"]]},{"id":"7d9e344b.fc859c","type":"debug","z":"e761e99f.3a2628","name":"","active":false,"console":"false","complete":"true","x":1451.5,"y":626.7499885559082,"wires":[]},{"id":"5964bbd1.2d0c64","type":"function","z":"e761e99f.3a2628","name":"driver_in event","func":"msg.event_id = flow.get('event_driver_in');\nmsg.description = 'При зважуванні водій в кабіні. Вага: ' + msg.metadata.weight+\"кг. Номер авто: \"+msg.metadata.truck1+\" \"+msg.metadata.truck2+\" \"+msg.metadata.item_name;\n\nreturn msg;","outputs":1,"noerr":0,"x":1052.0159301757812,"y":762.2064208984375,"wires":[["604bec27.37aad4"]]},{"id":"c1badfca.bec99","type":"debug","z":"e761e99f.3a2628","name":"IN event","active":false,"console":"true","complete":"payload","x":1292.857177734375,"y":573.9999694824219,"wires":[]},{"id":"bd83584a.fd5cb8","type":"switch","z":"e761e99f.3a2628","name":"","property":"checkHealth","propertyType":"msg","rules":[{"t":"true"},{"t":"false"}],"checkall":"true","outputs":2,"x":530,"y":820,"wires":[["616d0f91.da2dc"],["c1d7081c.647498"]]},{"id":"4b4a8c6f.9b2124","type":"switch","z":"e761e99f.3a2628","name":"waybill","property":"metadata.waybill","propertyType":"msg","rules":[{"t":"null"}],"checkall":"true","outputs":1,"x":640,"y":520,"wires":[["12a06a77.f02d46","5f455aca.d5c284"]]},{"id":"3b686f9c.08192","type":"socket-io-out","z":"e761e99f.3a2628","name":"socket 4001","event":"83c149ec.6b9648","server":"5c7d224d.8a636c","x":230,"y":700,"wires":[]},{"id":"b4e25989.cc2268","type":"debug","z":"e761e99f.3a2628","name":"IN weight","active":false,"console":"true","complete":"payload","x":227,"y":555,"wires":[]},{"id":"e76a46d1.d90408","type":"ui_text","z":"e761e99f.3a2628","group":"ce8a2022.9dbe7","order":0,"width":0,"height":0,"name":"","label":"Поточна вага:","format":"{{msg.payload}}","layout":"row-spread","x":237,"y":777,"wires":[]},{"id":"7809a257.8b203c","type":"ui_chart","z":"e761e99f.3a2628","name":"","group":"d03ed285.c2f47","order":0,"width":"6","height":"6","label":"Графік ваги","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","ymin":"0==","ymax":"","removeOlder":"10","removeOlderPoints":"","removeOlderUnit":"60","cutout":0,"x":251,"y":518,"wires":[[],[]]},{"id":"e0ce36ff.7a6d68","type":"debug","z":"e761e99f.3a2628","name":"","active":false,"console":"false","complete":"true","x":959,"y":901,"wires":[]},{"id":"6c6b6be9.ecfac4","type":"function","z":"e761e99f.3a2628","name":"response","func":"msg.payload = flow.get('transactionMetadata');\nmsg.payload.driverInCar = false;\ntransactionWaybill = flow.get('transactionWaybill');\nmsg.payload.transactionWaybill = transactionWaybill;\nif(transactionWaybill && transactionWaybill !== msg.req.query.reader){\n    msg.payload.status = false;    \n}else {\n    msg.payload.status = true;    \n}\nreturn msg;","outputs":1,"noerr":0,"x":445,"y":1033.9999885559082,"wires":[["d30678c5.b22498","a7721a6a.fb52d8"]]},{"id":"9178f0c.5c1111","type":"debug","z":"e761e99f.3a2628","name":"","active":false,"console":"false","complete":"true","x":270,"y":900,"wires":[]},{"id":"df84d776.107d78","type":"debug","z":"e761e99f.3a2628","name":"IN response event","active":false,"console":"true","complete":"payload","x":1598,"y":674.4285583496094,"wires":[]},{"id":"83807caa.a31ed","type":"function","z":"e761e99f.3a2628","name":"photo","func":"\n\n\n\nif(msg.random == 1){\n           msg.payload = {\n            snapshot: flow.get(\"p1\")\n            }   \n    }else if(msg.random == 2){\n      msg.payload = {\n            snapshot: flow.get(\"p2\")\n            }    \n    }else{\n      msg.payload = {\n            snapshot: flow.get(\"p3\")\n            }   \n    }\n\n\n\n\nreturn msg;","outputs":1,"noerr":0,"x":1678,"y":741,"wires":[["ee730334.20441"]]},{"id":"8607bbb4.8074d8","type":"function","z":"e761e99f.3a2628","name":"check scale health","func":"var lastcheckHealth = flow.get('checkHealth');\nvar checkHealth = null;\nvar lasttimedata = flow.get('lasttimedata');\n\nvar currenttimedata = new Date();\n\nif ((currenttimedata - lasttimedata) > 3000){\n    checkHealth = false;\n} else {\n    checkHealth = true;\n}\n\nflow.set(\"checkHealth\",checkHealth);\n\nif (lastcheckHealth != checkHealth){\n    msg.checkHealth = checkHealth;\n}else{\n    msg.checkHealth = null;\n}\nmsg.payload = checkHealth;\n\nreturn msg;","outputs":1,"noerr":0,"x":350,"y":860,"wires":[["bd83584a.fd5cb8"]]},{"id":"d30678c5.b22498","type":"http response","z":"e761e99f.3a2628","name":"","x":602,"y":1011.9999885559082,"wires":[]},{"id":"a7721a6a.fb52d8","type":"debug","z":"e761e99f.3a2628","name":"","active":false,"console":"false","complete":"false","x":750,"y":1033.9999885559082,"wires":[]},{"id":"ee730334.20441","type":"function","z":"e761e99f.3a2628","name":"snapshot payload","func":"var event_id = msg.event_id;\nvar scale_id = global.get('scale_id_in');\n//var tbase64   = msg.payload.toString('base64');\nvar tbase64   = msg.payload.snapshot;\nmsg.payload = {\n    'event':{\n        'id':msg.event_id\n    },\n    'device':{\n        'id':scale_id\n        \n    },\n    'snapshot':tbase64,\n    'ext':'jpeg'\n}\n\nmsg.headers = {\n    \"content-type\":\"application/json\"\n}\n\nmsg.url = flow.get('main_host')+flow.get('snapshot_url');\nmsg.main_host = flow.get('main_host');\nmsg.snapshot_url = flow.get('snapshot_url');\n\nreturn msg;","outputs":1,"noerr":0,"x":1938,"y":733,"wires":[["5d2988ea.3fda78","95ad641e.8bcbd8"]]},{"id":"c7941d1d.62add","type":"inject","z":"e761e99f.3a2628","name":"","topic":"","payload":"","payloadType":"date","repeat":"4","crontab":"","once":false,"x":170,"y":860,"wires":[["8607bbb4.8074d8"]]},{"id":"5d2988ea.3fda78","type":"http request","z":"e761e99f.3a2628","name":"send a snapshot","method":"POST","ret":"txt","url":"","tls":"145ca816.bc4f08","x":2172.9998779296875,"y":636.9999885559082,"wires":[["83b67e96.e2358","8832c901.4ac268"]]},{"id":"95ad641e.8bcbd8","type":"debug","z":"e761e99f.3a2628","name":"Camera 1","active":false,"console":"true","complete":"payload","x":2157,"y":739.9999885559082,"wires":[]},{"id":"83b67e96.e2358","type":"json","z":"e761e99f.3a2628","name":"","x":2350,"y":729,"wires":[["db35fd9a.82a27"]]},{"id":"db35fd9a.82a27","type":"debug","z":"e761e99f.3a2628","name":"event Apex","active":false,"console":"true","complete":"payload","x":2540.9998779296875,"y":725.9999885559082,"wires":[]},{"id":"442c943a.1a49ec","type":"http in","z":"e761e99f.3a2628","name":"","url":"/getSimpleWeight_4","method":"get","swaggerDoc":"","x":230,"y":1280,"wires":[["ae33ec62.a760c"]]},{"id":"ae33ec62.a760c","type":"function","z":"e761e99f.3a2628","name":"response","func":"msg.payload = flow.get('transactionMetadata').weight;\nreturn msg;","outputs":1,"noerr":0,"x":476.1666946411133,"y":1277.500012397766,"wires":[["fcd71e2d.934f8"]]},{"id":"fcd71e2d.934f8","type":"http response","z":"e761e99f.3a2628","name":"","x":618.5833854675293,"y":1283.5000133514404,"wires":[]},{"id":"e5e2616e.27927","type":"http in","z":"e761e99f.3a2628","name":"","url":"/socket_4","method":"get","swaggerDoc":"","x":176.33333778381348,"y":1711.1666231155396,"wires":[["b40c8911.c74b88"]]},{"id":"6b7c6ee5.26bd9","type":"template","z":"e761e99f.3a2628","name":"socket page","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"<html>\n     \n  <body>\n    <h1><p id='weight'></p></h1>\n    \n     <script>\n    setTimeout(function() {\n       ;(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.io=f()}})(function(){var define,module,exports;return function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}({1:[function(_dereq_,module,exports){module.exports=_dereq_(\"./lib/\")},{\"./lib/\":2}],2:[function(_dereq_,module,exports){module.exports=_dereq_(\"./socket\");module.exports.parser=_dereq_(\"engine.io-parser\")},{\"./socket\":3,\"engine.io-parser\":19}],3:[function(_dereq_,module,exports){(function(global){var transports=_dereq_(\"./transports\");var Emitter=_dereq_(\"component-emitter\");var debug=_dereq_(\"debug\")(\"engine.io-client:socket\");var index=_dereq_(\"indexof\");var parser=_dereq_(\"engine.io-parser\");var parseuri=_dereq_(\"parseuri\");var parsejson=_dereq_(\"parsejson\");var parseqs=_dereq_(\"parseqs\");module.exports=Socket;function noop(){}function Socket(uri,opts){if(!(this instanceof Socket))return new Socket(uri,opts);opts=opts||{};if(uri&&\"object\"==typeof uri){opts=uri;uri=null}if(uri){uri=parseuri(uri);opts.hostname=uri.host;opts.secure=uri.protocol==\"https\"||uri.protocol==\"wss\";opts.port=uri.port;if(uri.query)opts.query=uri.query}else if(opts.host){opts.hostname=parseuri(opts.host).host}this.secure=null!=opts.secure?opts.secure:global.location&&\"https:\"==location.protocol;if(opts.hostname&&!opts.port){opts.port=this.secure?\"443\":\"80\"}this.agent=opts.agent||false;this.hostname=opts.hostname||(global.location?location.hostname:\"localhost\");this.port=opts.port||(global.location&&location.port?location.port:this.secure?443:80);this.query=opts.query||{};if(\"string\"==typeof this.query)this.query=parseqs.decode(this.query);this.upgrade=false!==opts.upgrade;this.path=(opts.path||\"/engine.io\").replace(/\\/$/,\"\")+\"/\";this.forceJSONP=!!opts.forceJSONP;this.jsonp=false!==opts.jsonp;this.forceBase64=!!opts.forceBase64;this.enablesXDR=!!opts.enablesXDR;this.timestampParam=opts.timestampParam||\"t\";this.timestampRequests=opts.timestampRequests;this.transports=opts.transports||[\"polling\",\"websocket\"];this.readyState=\"\";this.writeBuffer=[];this.policyPort=opts.policyPort||843;this.rememberUpgrade=opts.rememberUpgrade||false;this.binaryType=null;this.onlyBinaryUpgrades=opts.onlyBinaryUpgrades;this.perMessageDeflate=false!==opts.perMessageDeflate?opts.perMessageDeflate||{}:false;if(true===this.perMessageDeflate)this.perMessageDeflate={};if(this.perMessageDeflate&&null==this.perMessageDeflate.threshold){this.perMessageDeflate.threshold=1024}this.pfx=opts.pfx||null;this.key=opts.key||null;this.passphrase=opts.passphrase||null;this.cert=opts.cert||null;this.ca=opts.ca||null;this.ciphers=opts.ciphers||null;this.rejectUnauthorized=opts.rejectUnauthorized===undefined?null:opts.rejectUnauthorized;var freeGlobal=typeof global==\"object\"&&global;if(freeGlobal.global===freeGlobal){if(opts.extraHeaders&&Object.keys(opts.extraHeaders).length>0){this.extraHeaders=opts.extraHeaders}}this.open()}Socket.priorWebsocketSuccess=false;Emitter(Socket.prototype);Socket.protocol=parser.protocol;Socket.Socket=Socket;Socket.Transport=_dereq_(\"./transport\");Socket.transports=_dereq_(\"./transports\");Socket.parser=_dereq_(\"engine.io-parser\");Socket.prototype.createTransport=function(name){debug('creating transport \"%s\"',name);var query=clone(this.query);query.EIO=parser.protocol;query.transport=name;if(this.id)query.sid=this.id;var transport=new transports[name]({agent:this.agent,hostname:this.hostname,port:this.port,secure:this.secure,path:this.path,query:query,forceJSONP:this.forceJSONP,jsonp:this.jsonp,forceBase64:this.forceBase64,enablesXDR:this.enablesXDR,timestampRequests:this.timestampRequests,timestampParam:this.timestampParam,policyPort:this.policyPort,socket:this,pfx:this.pfx,key:this.key,passphrase:this.passphrase,cert:this.cert,ca:this.ca,ciphers:this.ciphers,rejectUnauthorized:this.rejectUnauthorized,perMessageDeflate:this.perMessageDeflate,extraHeaders:this.extraHeaders});return transport};function clone(obj){var o={};for(var i in obj){if(obj.hasOwnProperty(i)){o[i]=obj[i]}}return o}Socket.prototype.open=function(){var transport;if(this.rememberUpgrade&&Socket.priorWebsocketSuccess&&this.transports.indexOf(\"websocket\")!=-1){transport=\"websocket\"}else if(0===this.transports.length){var self=this;setTimeout(function(){self.emit(\"error\",\"No transports available\")},0);return}else{transport=this.transports[0]}this.readyState=\"opening\";try{transport=this.createTransport(transport)}catch(e){this.transports.shift();this.open();return}transport.open();this.setTransport(transport)};Socket.prototype.setTransport=function(transport){debug(\"setting transport %s\",transport.name);var self=this;if(this.transport){debug(\"clearing existing transport %s\",this.transport.name);this.transport.removeAllListeners()}this.transport=transport;transport.on(\"drain\",function(){self.onDrain()}).on(\"packet\",function(packet){self.onPacket(packet)}).on(\"error\",function(e){self.onError(e)}).on(\"close\",function(){self.onClose(\"transport close\")})};Socket.prototype.probe=function(name){debug('probing transport \"%s\"',name);var transport=this.createTransport(name,{probe:1}),failed=false,self=this;Socket.priorWebsocketSuccess=false;function onTransportOpen(){if(self.onlyBinaryUpgrades){var upgradeLosesBinary=!this.supportsBinary&&self.transport.supportsBinary;failed=failed||upgradeLosesBinary}if(failed)return;debug('probe transport \"%s\" opened',name);transport.send([{type:\"ping\",data:\"probe\"}]);transport.once(\"packet\",function(msg){if(failed)return;if(\"pong\"==msg.type&&\"probe\"==msg.data){debug('probe transport \"%s\" pong',name);self.upgrading=true;self.emit(\"upgrading\",transport);if(!transport)return;Socket.priorWebsocketSuccess=\"websocket\"==transport.name;debug('pausing current transport \"%s\"',self.transport.name);self.transport.pause(function(){if(failed)return;if(\"closed\"==self.readyState)return;debug(\"changing transport and sending upgrade packet\");cleanup();self.setTransport(transport);transport.send([{type:\"upgrade\"}]);self.emit(\"upgrade\",transport);transport=null;self.upgrading=false;self.flush()})}else{debug('probe transport \"%s\" failed',name);var err=new Error(\"probe error\");err.transport=transport.name;self.emit(\"upgradeError\",err)}})}function freezeTransport(){if(failed)return;failed=true;cleanup();transport.close();transport=null}function onerror(err){var error=new Error(\"probe error: \"+err);error.transport=transport.name;freezeTransport();debug('probe transport \"%s\" failed because of error: %s',name,err);self.emit(\"upgradeError\",error)}function onTransportClose(){onerror(\"transport closed\")}function onclose(){onerror(\"socket closed\")}function onupgrade(to){if(transport&&to.name!=transport.name){debug('\"%s\" works - aborting \"%s\"',to.name,transport.name);freezeTransport()}}function cleanup(){transport.removeListener(\"open\",onTransportOpen);transport.removeListener(\"error\",onerror);transport.removeListener(\"close\",onTransportClose);self.removeListener(\"close\",onclose);self.removeListener(\"upgrading\",onupgrade)}transport.once(\"open\",onTransportOpen);transport.once(\"error\",onerror);transport.once(\"close\",onTransportClose);this.once(\"close\",onclose);this.once(\"upgrading\",onupgrade);transport.open()};Socket.prototype.onOpen=function(){debug(\"socket open\");this.readyState=\"open\";Socket.priorWebsocketSuccess=\"websocket\"==this.transport.name;this.emit(\"open\");this.flush();if(\"open\"==this.readyState&&this.upgrade&&this.transport.pause){debug(\"starting upgrade probes\");for(var i=0,l=this.upgrades.length;i<l;i++){this.probe(this.upgrades[i])}}};Socket.prototype.onPacket=function(packet){if(\"opening\"==this.readyState||\"open\"==this.readyState){debug('socket receive: type \"%s\", data \"%s\"',packet.type,packet.data);this.emit(\"packet\",packet);this.emit(\"heartbeat\");switch(packet.type){case\"open\":this.onHandshake(parsejson(packet.data));break;case\"pong\":this.setPing();this.emit(\"pong\");break;case\"error\":var err=new Error(\"server error\");err.code=packet.data;this.onError(err);break;case\"message\":this.emit(\"data\",packet.data);this.emit(\"message\",packet.data);break}}else{debug('packet received with socket readyState \"%s\"',this.readyState)}};Socket.prototype.onHandshake=function(data){this.emit(\"handshake\",data);this.id=data.sid;this.transport.query.sid=data.sid;this.upgrades=this.filterUpgrades(data.upgrades);this.pingInterval=data.pingInterval;this.pingTimeout=data.pingTimeout;this.onOpen();if(\"closed\"==this.readyState)return;this.setPing();this.removeListener(\"heartbeat\",this.onHeartbeat);this.on(\"heartbeat\",this.onHeartbeat)};Socket.prototype.onHeartbeat=function(timeout){clearTimeout(this.pingTimeoutTimer);var self=this;self.pingTimeoutTimer=setTimeout(function(){if(\"closed\"==self.readyState)return;self.onClose(\"ping timeout\")},timeout||self.pingInterval+self.pingTimeout)};Socket.prototype.setPing=function(){var self=this;clearTimeout(self.pingIntervalTimer);self.pingIntervalTimer=setTimeout(function(){debug(\"writing ping packet - expecting pong within %sms\",self.pingTimeout);self.ping();self.onHeartbeat(self.pingTimeout)},self.pingInterval)};Socket.prototype.ping=function(){var self=this;this.sendPacket(\"ping\",function(){self.emit(\"ping\")})};Socket.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen);this.prevBufferLen=0;if(0===this.writeBuffer.length){this.emit(\"drain\")}else{this.flush()}};Socket.prototype.flush=function(){if(\"closed\"!=this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length){debug(\"flushing %d packets in socket\",this.writeBuffer.length);this.transport.send(this.writeBuffer);this.prevBufferLen=this.writeBuffer.length;this.emit(\"flush\")}};Socket.prototype.write=Socket.prototype.send=function(msg,options,fn){this.sendPacket(\"message\",msg,options,fn);return this};Socket.prototype.sendPacket=function(type,data,options,fn){if(\"function\"==typeof data){fn=data;data=undefined}if(\"function\"==typeof options){fn=options;options=null}if(\"closing\"==this.readyState||\"closed\"==this.readyState){return}options=options||{};options.compress=false!==options.compress;var packet={type:type,data:data,options:options};this.emit(\"packetCreate\",packet);this.writeBuffer.push(packet);if(fn)this.once(\"flush\",fn);this.flush()};Socket.prototype.close=function(){if(\"opening\"==this.readyState||\"open\"==this.readyState){this.readyState=\"closing\";var self=this;if(this.writeBuffer.length){this.once(\"drain\",function(){if(this.upgrading){waitForUpgrade()}else{close()}})}else if(this.upgrading){waitForUpgrade()}else{close()}}function close(){self.onClose(\"forced close\");debug(\"socket closing - telling transport to close\");self.transport.close()}function cleanupAndClose(){self.removeListener(\"upgrade\",cleanupAndClose);self.removeListener(\"upgradeError\",cleanupAndClose);close()}function waitForUpgrade(){self.once(\"upgrade\",cleanupAndClose);self.once(\"upgradeError\",cleanupAndClose)}return this};Socket.prototype.onError=function(err){debug(\"socket error %j\",err);Socket.priorWebsocketSuccess=false;this.emit(\"error\",err);this.onClose(\"transport error\",err)};Socket.prototype.onClose=function(reason,desc){if(\"opening\"==this.readyState||\"open\"==this.readyState||\"closing\"==this.readyState){debug('socket close with reason: \"%s\"',reason);var self=this;clearTimeout(this.pingIntervalTimer);clearTimeout(this.pingTimeoutTimer);this.transport.removeAllListeners(\"close\");this.transport.close();this.transport.removeAllListeners();this.readyState=\"closed\";this.id=null;this.emit(\"close\",reason,desc);self.writeBuffer=[];self.prevBufferLen=0}};Socket.prototype.filterUpgrades=function(upgrades){var filteredUpgrades=[];for(var i=0,j=upgrades.length;i<j;i++){if(~index(this.transports,upgrades[i]))filteredUpgrades.push(upgrades[i])}return filteredUpgrades}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{\"./transport\":4,\"./transports\":5,\"component-emitter\":15,debug:17,\"engine.io-parser\":19,indexof:23,parsejson:26,parseqs:27,parseuri:28}],4:[function(_dereq_,module,exports){var parser=_dereq_(\"engine.io-parser\");var Emitter=_dereq_(\"component-emitter\");module.exports=Transport;function Transport(opts){this.path=opts.path;this.hostname=opts.hostname;this.port=opts.port;this.secure=opts.secure;this.query=opts.query;this.timestampParam=opts.timestampParam;this.timestampRequests=opts.timestampRequests;this.readyState=\"\";this.agent=opts.agent||false;this.socket=opts.socket;this.enablesXDR=opts.enablesXDR;this.pfx=opts.pfx;this.key=opts.key;this.passphrase=opts.passphrase;this.cert=opts.cert;this.ca=opts.ca;this.ciphers=opts.ciphers;this.rejectUnauthorized=opts.rejectUnauthorized;this.extraHeaders=opts.extraHeaders}Emitter(Transport.prototype);Transport.prototype.onError=function(msg,desc){var err=new Error(msg);err.type=\"TransportError\";err.description=desc;this.emit(\"error\",err);return this};Transport.prototype.open=function(){if(\"closed\"==this.readyState||\"\"==this.readyState){this.readyState=\"opening\";this.doOpen()}return this};Transport.prototype.close=function(){if(\"opening\"==this.readyState||\"open\"==this.readyState){this.doClose();this.onClose()}return this};Transport.prototype.send=function(packets){if(\"open\"==this.readyState){this.write(packets)}else{throw new Error(\"Transport not open\")}};Transport.prototype.onOpen=function(){this.readyState=\"open\";this.writable=true;this.emit(\"open\")};Transport.prototype.onData=function(data){var packet=parser.decodePacket(data,this.socket.binaryType);this.onPacket(packet)};Transport.prototype.onPacket=function(packet){this.emit(\"packet\",packet)};Transport.prototype.onClose=function(){this.readyState=\"closed\";this.emit(\"close\")}},{\"component-emitter\":15,\"engine.io-parser\":19}],5:[function(_dereq_,module,exports){(function(global){var XMLHttpRequest=_dereq_(\"xmlhttprequest-ssl\");var XHR=_dereq_(\"./polling-xhr\");var JSONP=_dereq_(\"./polling-jsonp\");var websocket=_dereq_(\"./websocket\");exports.polling=polling;exports.websocket=websocket;function polling(opts){var xhr;var xd=false;var xs=false;var jsonp=false!==opts.jsonp;if(global.location){var isSSL=\"https:\"==location.protocol;var port=location.port;if(!port){port=isSSL?443:80}xd=opts.hostname!=location.hostname||port!=opts.port;xs=opts.secure!=isSSL}opts.xdomain=xd;opts.xscheme=xs;xhr=new XMLHttpRequest(opts);if(\"open\"in xhr&&!opts.forceJSONP){return new XHR(opts)}else{if(!jsonp)throw new Error(\"JSONP disabled\");return new JSONP(opts)}}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{\"./polling-jsonp\":6,\"./polling-xhr\":7,\"./websocket\":9,\"xmlhttprequest-ssl\":10}],6:[function(_dereq_,module,exports){(function(global){var Polling=_dereq_(\"./polling\");var inherit=_dereq_(\"component-inherit\");module.exports=JSONPPolling;var rNewline=/\\n/g;var rEscapedNewline=/\\\\n/g;var callbacks;var index=0;function empty(){}function JSONPPolling(opts){Polling.call(this,opts);this.query=this.query||{};if(!callbacks){if(!global.___eio)global.___eio=[];callbacks=global.___eio}this.index=callbacks.length;var self=this;callbacks.push(function(msg){self.onData(msg)});this.query.j=this.index;if(global.document&&global.addEventListener){global.addEventListener(\"beforeunload\",function(){if(self.script)self.script.onerror=empty},false)}}inherit(JSONPPolling,Polling);JSONPPolling.prototype.supportsBinary=false;JSONPPolling.prototype.doClose=function(){if(this.script){this.script.parentNode.removeChild(this.script);this.script=null}if(this.form){this.form.parentNode.removeChild(this.form);this.form=null;this.iframe=null}Polling.prototype.doClose.call(this)};JSONPPolling.prototype.doPoll=function(){var self=this;var script=document.createElement(\"script\");if(this.script){this.script.parentNode.removeChild(this.script);this.script=null}script.async=true;script.src=this.uri();script.onerror=function(e){self.onError(\"jsonp poll error\",e)};var insertAt=document.getElementsByTagName(\"script\")[0];if(insertAt){insertAt.parentNode.insertBefore(script,insertAt)}else{(document.head||document.body).appendChild(script)}this.script=script;var isUAgecko=\"undefined\"!=typeof navigator&&/gecko/i.test(navigator.userAgent);if(isUAgecko){setTimeout(function(){var iframe=document.createElement(\"iframe\");document.body.appendChild(iframe);document.body.removeChild(iframe)},100)}};JSONPPolling.prototype.doWrite=function(data,fn){var self=this;if(!this.form){var form=document.createElement(\"form\");var area=document.createElement(\"textarea\");var id=this.iframeId=\"eio_iframe_\"+this.index;var iframe;form.className=\"socketio\";form.style.position=\"absolute\";form.style.top=\"-1000px\";form.style.left=\"-1000px\";form.target=id;form.method=\"POST\";form.setAttribute(\"accept-charset\",\"utf-8\");area.name=\"d\";form.appendChild(area);document.body.appendChild(form);this.form=form;this.area=area}this.form.action=this.uri();function complete(){initIframe();fn()}function initIframe(){if(self.iframe){try{self.form.removeChild(self.iframe)}catch(e){self.onError(\"jsonp polling iframe removal error\",e)}}try{var html='<iframe src=\"javascript:0\" name=\"'+self.iframeId+'\">';iframe=document.createElement(html)}catch(e){iframe=document.createElement(\"iframe\");iframe.name=self.iframeId;iframe.src=\"javascript:0\"}iframe.id=self.iframeId;self.form.appendChild(iframe);self.iframe=iframe}initIframe();data=data.replace(rEscapedNewline,\"\\\\\\n\");this.area.value=data.replace(rNewline,\"\\\\n\");try{this.form.submit()}catch(e){}if(this.iframe.attachEvent){this.iframe.onreadystatechange=function(){if(self.iframe.readyState==\"complete\"){complete()}}}else{this.iframe.onload=complete}}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{\"./polling\":8,\"component-inherit\":16}],7:[function(_dereq_,module,exports){(function(global){var XMLHttpRequest=_dereq_(\"xmlhttprequest-ssl\");var Polling=_dereq_(\"./polling\");var Emitter=_dereq_(\"component-emitter\");var inherit=_dereq_(\"component-inherit\");var debug=_dereq_(\"debug\")(\"engine.io-client:polling-xhr\");module.exports=XHR;module.exports.Request=Request;function empty(){}function XHR(opts){Polling.call(this,opts);if(global.location){var isSSL=\"https:\"==location.protocol;var port=location.port;if(!port){port=isSSL?443:80}this.xd=opts.hostname!=global.location.hostname||port!=opts.port;this.xs=opts.secure!=isSSL}else{this.extraHeaders=opts.extraHeaders}}inherit(XHR,Polling);XHR.prototype.supportsBinary=true;XHR.prototype.request=function(opts){opts=opts||{};opts.uri=this.uri();opts.xd=this.xd;opts.xs=this.xs;opts.agent=this.agent||false;opts.supportsBinary=this.supportsBinary;opts.enablesXDR=this.enablesXDR;opts.pfx=this.pfx;opts.key=this.key;opts.passphrase=this.passphrase;opts.cert=this.cert;opts.ca=this.ca;opts.ciphers=this.ciphers;opts.rejectUnauthorized=this.rejectUnauthorized;opts.extraHeaders=this.extraHeaders;return new Request(opts)};XHR.prototype.doWrite=function(data,fn){var isBinary=typeof data!==\"string\"&&data!==undefined;var req=this.request({method:\"POST\",data:data,isBinary:isBinary});var self=this;req.on(\"success\",fn);req.on(\"error\",function(err){self.onError(\"xhr post error\",err)});this.sendXhr=req};XHR.prototype.doPoll=function(){debug(\"xhr poll\");var req=this.request();var self=this;req.on(\"data\",function(data){self.onData(data)});req.on(\"error\",function(err){self.onError(\"xhr poll error\",err)});this.pollXhr=req};function Request(opts){this.method=opts.method||\"GET\";this.uri=opts.uri;this.xd=!!opts.xd;this.xs=!!opts.xs;this.async=false!==opts.async;this.data=undefined!=opts.data?opts.data:null;this.agent=opts.agent;this.isBinary=opts.isBinary;this.supportsBinary=opts.supportsBinary;this.enablesXDR=opts.enablesXDR;this.pfx=opts.pfx;this.key=opts.key;this.passphrase=opts.passphrase;this.cert=opts.cert;this.ca=opts.ca;this.ciphers=opts.ciphers;this.rejectUnauthorized=opts.rejectUnauthorized;this.extraHeaders=opts.extraHeaders;this.create()}Emitter(Request.prototype);Request.prototype.create=function(){var opts={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};opts.pfx=this.pfx;opts.key=this.key;opts.passphrase=this.passphrase;opts.cert=this.cert;opts.ca=this.ca;opts.ciphers=this.ciphers;opts.rejectUnauthorized=this.rejectUnauthorized;var xhr=this.xhr=new XMLHttpRequest(opts);var self=this;try{debug(\"xhr open %s: %s\",this.method,this.uri);xhr.open(this.method,this.uri,this.async);try{if(this.extraHeaders){xhr.setDisableHeaderCheck(true);for(var i in this.extraHeaders){if(this.extraHeaders.hasOwnProperty(i)){xhr.setRequestHeader(i,this.extraHeaders[i])}}}}catch(e){}if(this.supportsBinary){xhr.responseType=\"arraybuffer\"}if(\"POST\"==this.method){try{if(this.isBinary){xhr.setRequestHeader(\"Content-type\",\"application/octet-stream\")}else{xhr.setRequestHeader(\"Content-type\",\"text/plain;charset=UTF-8\")}}catch(e){}}if(\"withCredentials\"in xhr){xhr.withCredentials=true}if(this.hasXDR()){xhr.onload=function(){self.onLoad()};xhr.onerror=function(){self.onError(xhr.responseText)}}else{xhr.onreadystatechange=function(){if(4!=xhr.readyState)return;if(200==xhr.status||1223==xhr.status){self.onLoad()}else{setTimeout(function(){self.onError(xhr.status)},0)}}}debug(\"xhr data %s\",this.data);xhr.send(this.data)}catch(e){setTimeout(function(){self.onError(e)},0);return}if(global.document){this.index=Request.requestsCount++;Request.requests[this.index]=this}};Request.prototype.onSuccess=function(){this.emit(\"success\");this.cleanup()};Request.prototype.onData=function(data){this.emit(\"data\",data);this.onSuccess()};Request.prototype.onError=function(err){this.emit(\"error\",err);this.cleanup(true)};Request.prototype.cleanup=function(fromError){if(\"undefined\"==typeof this.xhr||null===this.xhr){return}if(this.hasXDR()){this.xhr.onload=this.xhr.onerror=empty}else{this.xhr.onreadystatechange=empty}if(fromError){try{this.xhr.abort()}catch(e){}}if(global.document){delete Request.requests[this.index]}this.xhr=null};Request.prototype.onLoad=function(){var data;try{var contentType;try{contentType=this.xhr.getResponseHeader(\"Content-Type\").split(\";\")[0]}catch(e){}if(contentType===\"application/octet-stream\"){data=this.xhr.response}else{if(!this.supportsBinary){data=this.xhr.responseText}else{try{data=String.fromCharCode.apply(null,new Uint8Array(this.xhr.response))}catch(e){var ui8Arr=new Uint8Array(this.xhr.response);var dataArray=[];for(var idx=0,length=ui8Arr.length;idx<length;idx++){dataArray.push(ui8Arr[idx])}data=String.fromCharCode.apply(null,dataArray)}}}}catch(e){this.onError(e)}if(null!=data){this.onData(data)}};Request.prototype.hasXDR=function(){return\"undefined\"!==typeof global.XDomainRequest&&!this.xs&&this.enablesXDR};Request.prototype.abort=function(){this.cleanup()};if(global.document){Request.requestsCount=0;Request.requests={};if(global.attachEvent){global.attachEvent(\"onunload\",unloadHandler)}else if(global.addEventListener){global.addEventListener(\"beforeunload\",unloadHandler,false)}}function unloadHandler(){for(var i in Request.requests){if(Request.requests.hasOwnProperty(i)){Request.requests[i].abort()}}}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{\"./polling\":8,\"component-emitter\":15,\"component-inherit\":16,debug:17,\"xmlhttprequest-ssl\":10}],8:[function(_dereq_,module,exports){var Transport=_dereq_(\"../transport\");var parseqs=_dereq_(\"parseqs\");var parser=_dereq_(\"engine.io-parser\");var inherit=_dereq_(\"component-inherit\");var yeast=_dereq_(\"yeast\");var debug=_dereq_(\"debug\")(\"engine.io-client:polling\");module.exports=Polling;var hasXHR2=function(){var XMLHttpRequest=_dereq_(\"xmlhttprequest-ssl\");var xhr=new XMLHttpRequest({xdomain:false});return null!=xhr.responseType}();function Polling(opts){var forceBase64=opts&&opts.forceBase64;if(!hasXHR2||forceBase64){this.supportsBinary=false}Transport.call(this,opts)}inherit(Polling,Transport);Polling.prototype.name=\"polling\";Polling.prototype.doOpen=function(){this.poll()};Polling.prototype.pause=function(onPause){var pending=0;var self=this;this.readyState=\"pausing\";function pause(){debug(\"paused\");self.readyState=\"paused\";onPause()}if(this.polling||!this.writable){var total=0;if(this.polling){debug(\"we are currently polling - waiting to pause\");total++;this.once(\"pollComplete\",function(){debug(\"pre-pause polling complete\");--total||pause()})}if(!this.writable){debug(\"we are currently writing - waiting to pause\");total++;this.once(\"drain\",function(){debug(\"pre-pause writing complete\");--total||pause()})}}else{pause()}};Polling.prototype.poll=function(){debug(\"polling\");this.polling=true;this.doPoll();this.emit(\"poll\")};Polling.prototype.onData=function(data){var self=this;debug(\"polling got data %s\",data);var callback=function(packet,index,total){if(\"opening\"==self.readyState){self.onOpen()}if(\"close\"==packet.type){self.onClose();return false}self.onPacket(packet)};parser.decodePayload(data,this.socket.binaryType,callback);if(\"closed\"!=this.readyState){this.polling=false;this.emit(\"pollComplete\");if(\"open\"==this.readyState){this.poll()}else{debug('ignoring poll - transport state \"%s\"',this.readyState)}}};Polling.prototype.doClose=function(){var self=this;function close(){debug(\"writing close packet\");self.write([{type:\"close\"}])}if(\"open\"==this.readyState){debug(\"transport open - closing\");close()}else{debug(\"transport not open - deferring close\");this.once(\"open\",close)}};Polling.prototype.write=function(packets){var self=this;this.writable=false;var callbackfn=function(){self.writable=true;self.emit(\"drain\")};var self=this;parser.encodePayload(packets,this.supportsBinary,function(data){self.doWrite(data,callbackfn)})};Polling.prototype.uri=function(){var query=this.query||{};var schema=this.secure?\"https\":\"http\";var port=\"\";if(false!==this.timestampRequests){query[this.timestampParam]=yeast()}if(!this.supportsBinary&&!query.sid){query.b64=1}query=parseqs.encode(query);if(this.port&&(\"https\"==schema&&this.port!=443||\"http\"==schema&&this.port!=80)){port=\":\"+this.port}if(query.length){query=\"?\"+query}var ipv6=this.hostname.indexOf(\":\")!==-1;return schema+\"://\"+(ipv6?\"[\"+this.hostname+\"]\":this.hostname)+port+this.path+query}},{\"../transport\":4,\"component-inherit\":16,debug:17,\"engine.io-parser\":19,parseqs:27,\"xmlhttprequest-ssl\":10,yeast:30}],9:[function(_dereq_,module,exports){(function(global){var Transport=_dereq_(\"../transport\");var parser=_dereq_(\"engine.io-parser\");var parseqs=_dereq_(\"parseqs\");var inherit=_dereq_(\"component-inherit\");var yeast=_dereq_(\"yeast\");var debug=_dereq_(\"debug\")(\"engine.io-client:websocket\");var BrowserWebSocket=global.WebSocket||global.MozWebSocket;var WebSocket=BrowserWebSocket;if(!WebSocket&&typeof window===\"undefined\"){try{WebSocket=_dereq_(\"ws\")}catch(e){}}module.exports=WS;function WS(opts){var forceBase64=opts&&opts.forceBase64;if(forceBase64){this.supportsBinary=false}this.perMessageDeflate=opts.perMessageDeflate;Transport.call(this,opts)}inherit(WS,Transport);WS.prototype.name=\"websocket\";WS.prototype.supportsBinary=true;WS.prototype.doOpen=function(){if(!this.check()){return}var self=this;var uri=this.uri();var protocols=void 0;var opts={agent:this.agent,perMessageDeflate:this.perMessageDeflate};opts.pfx=this.pfx;opts.key=this.key;opts.passphrase=this.passphrase;opts.cert=this.cert;opts.ca=this.ca;opts.ciphers=this.ciphers;opts.rejectUnauthorized=this.rejectUnauthorized;if(this.extraHeaders){opts.headers=this.extraHeaders}this.ws=BrowserWebSocket?new WebSocket(uri):new WebSocket(uri,protocols,opts);if(this.ws.binaryType===undefined){this.supportsBinary=false}if(this.ws.supports&&this.ws.supports.binary){this.supportsBinary=true;this.ws.binaryType=\"buffer\"}else{this.ws.binaryType=\"arraybuffer\"}this.addEventListeners()};WS.prototype.addEventListeners=function(){var self=this;this.ws.onopen=function(){self.onOpen()};this.ws.onclose=function(){self.onClose()};this.ws.onmessage=function(ev){self.onData(ev.data)};this.ws.onerror=function(e){self.onError(\"websocket error\",e)}};if(\"undefined\"!=typeof navigator&&/iPad|iPhone|iPod/i.test(navigator.userAgent)){WS.prototype.onData=function(data){var self=this;setTimeout(function(){Transport.prototype.onData.call(self,data)},0)}}WS.prototype.write=function(packets){var self=this;this.writable=false;var total=packets.length;for(var i=0,l=total;i<l;i++){(function(packet){parser.encodePacket(packet,self.supportsBinary,function(data){if(!BrowserWebSocket){var opts={};if(packet.options){opts.compress=packet.options.compress}if(self.perMessageDeflate){var len=\"string\"==typeof data?global.Buffer.byteLength(data):data.length;if(len<self.perMessageDeflate.threshold){opts.compress=false}}}try{if(BrowserWebSocket){self.ws.send(data)}else{self.ws.send(data,opts)}}catch(e){debug(\"websocket closed before onclose event\")}--total||done()})})(packets[i])}function done(){self.emit(\"flush\");setTimeout(function(){self.writable=true;self.emit(\"drain\")},0)}};WS.prototype.onClose=function(){Transport.prototype.onClose.call(this)};WS.prototype.doClose=function(){if(typeof this.ws!==\"undefined\"){this.ws.close()}};WS.prototype.uri=function(){var query=this.query||{};var schema=this.secure?\"wss\":\"ws\";var port=\"\";if(this.port&&(\"wss\"==schema&&this.port!=443||\"ws\"==schema&&this.port!=80)){port=\":\"+this.port}if(this.timestampRequests){query[this.timestampParam]=yeast()}if(!this.supportsBinary){query.b64=1}query=parseqs.encode(query);if(query.length){query=\"?\"+query}var ipv6=this.hostname.indexOf(\":\")!==-1;return schema+\"://\"+(ipv6?\"[\"+this.hostname+\"]\":this.hostname)+port+this.path+query};WS.prototype.check=function(){return!!WebSocket&&!(\"__initialize\"in WebSocket&&this.name===WS.prototype.name)}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{\"../transport\":4,\"component-inherit\":16,debug:17,\"engine.io-parser\":19,parseqs:27,ws:undefined,yeast:30}],10:[function(_dereq_,module,exports){var hasCORS=_dereq_(\"has-cors\");module.exports=function(opts){var xdomain=opts.xdomain;var xscheme=opts.xscheme;var enablesXDR=opts.enablesXDR;try{if(\"undefined\"!=typeof XMLHttpRequest&&(!xdomain||hasCORS)){return new XMLHttpRequest}}catch(e){}try{if(\"undefined\"!=typeof XDomainRequest&&!xscheme&&enablesXDR){return new XDomainRequest}}catch(e){}if(!xdomain){try{return new ActiveXObject(\"Microsoft.XMLHTTP\")}catch(e){}}}},{\"has-cors\":22}],11:[function(_dereq_,module,exports){module.exports=after;function after(count,callback,err_cb){var bail=false;err_cb=err_cb||noop;proxy.count=count;return count===0?callback():proxy;function proxy(err,result){if(proxy.count<=0){throw new Error(\"after called too many times\")}--proxy.count;if(err){bail=true;callback(err);callback=err_cb}else if(proxy.count===0&&!bail){callback(null,result)}}}function noop(){}},{}],12:[function(_dereq_,module,exports){module.exports=function(arraybuffer,start,end){var bytes=arraybuffer.byteLength;start=start||0;end=end||bytes;if(arraybuffer.slice){return arraybuffer.slice(start,end)}if(start<0){start+=bytes}if(end<0){end+=bytes}if(end>bytes){end=bytes}if(start>=bytes||start>=end||bytes===0){return new ArrayBuffer(0)}var abv=new Uint8Array(arraybuffer);var result=new Uint8Array(end-start);for(var i=start,ii=0;i<end;i++,ii++){result[ii]=abv[i]}return result.buffer}},{}],13:[function(_dereq_,module,exports){(function(chars){\"use strict\";exports.encode=function(arraybuffer){var bytes=new Uint8Array(arraybuffer),i,len=bytes.length,base64=\"\";for(i=0;i<len;i+=3){base64+=chars[bytes[i]>>2];\nbase64+=chars[(bytes[i]&3)<<4|bytes[i+1]>>4];base64+=chars[(bytes[i+1]&15)<<2|bytes[i+2]>>6];base64+=chars[bytes[i+2]&63]}if(len%3===2){base64=base64.substring(0,base64.length-1)+\"=\"}else if(len%3===1){base64=base64.substring(0,base64.length-2)+\"==\"}return base64};exports.decode=function(base64){var bufferLength=base64.length*.75,len=base64.length,i,p=0,encoded1,encoded2,encoded3,encoded4;if(base64[base64.length-1]===\"=\"){bufferLength--;if(base64[base64.length-2]===\"=\"){bufferLength--}}var arraybuffer=new ArrayBuffer(bufferLength),bytes=new Uint8Array(arraybuffer);for(i=0;i<len;i+=4){encoded1=chars.indexOf(base64[i]);encoded2=chars.indexOf(base64[i+1]);encoded3=chars.indexOf(base64[i+2]);encoded4=chars.indexOf(base64[i+3]);bytes[p++]=encoded1<<2|encoded2>>4;bytes[p++]=(encoded2&15)<<4|encoded3>>2;bytes[p++]=(encoded3&3)<<6|encoded4&63}return arraybuffer}})(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\")},{}],14:[function(_dereq_,module,exports){(function(global){var BlobBuilder=global.BlobBuilder||global.WebKitBlobBuilder||global.MSBlobBuilder||global.MozBlobBuilder;var blobSupported=function(){try{var a=new Blob([\"hi\"]);return a.size===2}catch(e){return false}}();var blobSupportsArrayBufferView=blobSupported&&function(){try{var b=new Blob([new Uint8Array([1,2])]);return b.size===2}catch(e){return false}}();var blobBuilderSupported=BlobBuilder&&BlobBuilder.prototype.append&&BlobBuilder.prototype.getBlob;function mapArrayBufferViews(ary){for(var i=0;i<ary.length;i++){var chunk=ary[i];if(chunk.buffer instanceof ArrayBuffer){var buf=chunk.buffer;if(chunk.byteLength!==buf.byteLength){var copy=new Uint8Array(chunk.byteLength);copy.set(new Uint8Array(buf,chunk.byteOffset,chunk.byteLength));buf=copy.buffer}ary[i]=buf}}}function BlobBuilderConstructor(ary,options){options=options||{};var bb=new BlobBuilder;mapArrayBufferViews(ary);for(var i=0;i<ary.length;i++){bb.append(ary[i])}return options.type?bb.getBlob(options.type):bb.getBlob()}function BlobConstructor(ary,options){mapArrayBufferViews(ary);return new Blob(ary,options||{})}module.exports=function(){if(blobSupported){return blobSupportsArrayBufferView?global.Blob:BlobConstructor}else if(blobBuilderSupported){return BlobBuilderConstructor}else{return undefined}}()}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{}],15:[function(_dereq_,module,exports){module.exports=Emitter;function Emitter(obj){if(obj)return mixin(obj)}function mixin(obj){for(var key in Emitter.prototype){obj[key]=Emitter.prototype[key]}return obj}Emitter.prototype.on=Emitter.prototype.addEventListener=function(event,fn){this._callbacks=this._callbacks||{};(this._callbacks[event]=this._callbacks[event]||[]).push(fn);return this};Emitter.prototype.once=function(event,fn){var self=this;this._callbacks=this._callbacks||{};function on(){self.off(event,on);fn.apply(this,arguments)}on.fn=fn;this.on(event,on);return this};Emitter.prototype.off=Emitter.prototype.removeListener=Emitter.prototype.removeAllListeners=Emitter.prototype.removeEventListener=function(event,fn){this._callbacks=this._callbacks||{};if(0==arguments.length){this._callbacks={};return this}var callbacks=this._callbacks[event];if(!callbacks)return this;if(1==arguments.length){delete this._callbacks[event];return this}var cb;for(var i=0;i<callbacks.length;i++){cb=callbacks[i];if(cb===fn||cb.fn===fn){callbacks.splice(i,1);break}}return this};Emitter.prototype.emit=function(event){this._callbacks=this._callbacks||{};var args=[].slice.call(arguments,1),callbacks=this._callbacks[event];if(callbacks){callbacks=callbacks.slice(0);for(var i=0,len=callbacks.length;i<len;++i){callbacks[i].apply(this,args)}}return this};Emitter.prototype.listeners=function(event){this._callbacks=this._callbacks||{};return this._callbacks[event]||[]};Emitter.prototype.hasListeners=function(event){return!!this.listeners(event).length}},{}],16:[function(_dereq_,module,exports){module.exports=function(a,b){var fn=function(){};fn.prototype=b.prototype;a.prototype=new fn;a.prototype.constructor=a}},{}],17:[function(_dereq_,module,exports){exports=module.exports=_dereq_(\"./debug\");exports.log=log;exports.formatArgs=formatArgs;exports.save=save;exports.load=load;exports.useColors=useColors;exports.storage=\"undefined\"!=typeof chrome&&\"undefined\"!=typeof chrome.storage?chrome.storage.local:localstorage();exports.colors=[\"lightseagreen\",\"forestgreen\",\"goldenrod\",\"dodgerblue\",\"darkorchid\",\"crimson\"];function useColors(){return\"WebkitAppearance\"in document.documentElement.style||window.console&&(console.firebug||console.exception&&console.table)||navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)&&parseInt(RegExp.$1,10)>=31}exports.formatters.j=function(v){return JSON.stringify(v)};function formatArgs(){var args=arguments;var useColors=this.useColors;args[0]=(useColors?\"%c\":\"\")+this.namespace+(useColors?\" %c\":\" \")+args[0]+(useColors?\"%c \":\" \")+\"+\"+exports.humanize(this.diff);if(!useColors)return args;var c=\"color: \"+this.color;args=[args[0],c,\"color: inherit\"].concat(Array.prototype.slice.call(args,1));var index=0;var lastC=0;args[0].replace(/%[a-z%]/g,function(match){if(\"%%\"===match)return;index++;if(\"%c\"===match){lastC=index}});args.splice(lastC,0,c);return args}function log(){return\"object\"===typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)}function save(namespaces){try{if(null==namespaces){exports.storage.removeItem(\"debug\")}else{exports.storage.debug=namespaces}}catch(e){}}function load(){var r;try{r=exports.storage.debug}catch(e){}return r}exports.enable(load());function localstorage(){try{return window.localStorage}catch(e){}}},{\"./debug\":18}],18:[function(_dereq_,module,exports){exports=module.exports=debug;exports.coerce=coerce;exports.disable=disable;exports.enable=enable;exports.enabled=enabled;exports.humanize=_dereq_(\"ms\");exports.names=[];exports.skips=[];exports.formatters={};var prevColor=0;var prevTime;function selectColor(){return exports.colors[prevColor++%exports.colors.length]}function debug(namespace){function disabled(){}disabled.enabled=false;function enabled(){var self=enabled;var curr=+new Date;var ms=curr-(prevTime||curr);self.diff=ms;self.prev=prevTime;self.curr=curr;prevTime=curr;if(null==self.useColors)self.useColors=exports.useColors();if(null==self.color&&self.useColors)self.color=selectColor();var args=Array.prototype.slice.call(arguments);args[0]=exports.coerce(args[0]);if(\"string\"!==typeof args[0]){args=[\"%o\"].concat(args)}var index=0;args[0]=args[0].replace(/%([a-z%])/g,function(match,format){if(match===\"%%\")return match;index++;var formatter=exports.formatters[format];if(\"function\"===typeof formatter){var val=args[index];match=formatter.call(self,val);args.splice(index,1);index--}return match});if(\"function\"===typeof exports.formatArgs){args=exports.formatArgs.apply(self,args)}var logFn=enabled.log||exports.log||console.log.bind(console);logFn.apply(self,args)}enabled.enabled=true;var fn=exports.enabled(namespace)?enabled:disabled;fn.namespace=namespace;return fn}function enable(namespaces){exports.save(namespaces);var split=(namespaces||\"\").split(/[\\s,]+/);var len=split.length;for(var i=0;i<len;i++){if(!split[i])continue;namespaces=split[i].replace(/\\*/g,\".*?\");if(namespaces[0]===\"-\"){exports.skips.push(new RegExp(\"^\"+namespaces.substr(1)+\"$\"))}else{exports.names.push(new RegExp(\"^\"+namespaces+\"$\"))}}}function disable(){exports.enable(\"\")}function enabled(name){var i,len;for(i=0,len=exports.skips.length;i<len;i++){if(exports.skips[i].test(name)){return false}}for(i=0,len=exports.names.length;i<len;i++){if(exports.names[i].test(name)){return true}}return false}function coerce(val){if(val instanceof Error)return val.stack||val.message;return val}},{ms:25}],19:[function(_dereq_,module,exports){(function(global){var keys=_dereq_(\"./keys\");var hasBinary=_dereq_(\"has-binary\");var sliceBuffer=_dereq_(\"arraybuffer.slice\");var base64encoder=_dereq_(\"base64-arraybuffer\");var after=_dereq_(\"after\");var utf8=_dereq_(\"utf8\");var isAndroid=navigator.userAgent.match(/Android/i);var isPhantomJS=/PhantomJS/i.test(navigator.userAgent);var dontSendBlobs=isAndroid||isPhantomJS;exports.protocol=3;var packets=exports.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6};var packetslist=keys(packets);var err={type:\"error\",data:\"parser error\"};var Blob=_dereq_(\"blob\");exports.encodePacket=function(packet,supportsBinary,utf8encode,callback){if(\"function\"==typeof supportsBinary){callback=supportsBinary;supportsBinary=false}if(\"function\"==typeof utf8encode){callback=utf8encode;utf8encode=null}var data=packet.data===undefined?undefined:packet.data.buffer||packet.data;if(global.ArrayBuffer&&data instanceof ArrayBuffer){return encodeArrayBuffer(packet,supportsBinary,callback)}else if(Blob&&data instanceof global.Blob){return encodeBlob(packet,supportsBinary,callback)}if(data&&data.base64){return encodeBase64Object(packet,callback)}var encoded=packets[packet.type];if(undefined!==packet.data){encoded+=utf8encode?utf8.encode(String(packet.data)):String(packet.data)}return callback(\"\"+encoded)};function encodeBase64Object(packet,callback){var message=\"b\"+exports.packets[packet.type]+packet.data.data;return callback(message)}function encodeArrayBuffer(packet,supportsBinary,callback){if(!supportsBinary){return exports.encodeBase64Packet(packet,callback)}var data=packet.data;var contentArray=new Uint8Array(data);var resultBuffer=new Uint8Array(1+data.byteLength);resultBuffer[0]=packets[packet.type];for(var i=0;i<contentArray.length;i++){resultBuffer[i+1]=contentArray[i]}return callback(resultBuffer.buffer)}function encodeBlobAsArrayBuffer(packet,supportsBinary,callback){if(!supportsBinary){return exports.encodeBase64Packet(packet,callback)}var fr=new FileReader;fr.onload=function(){packet.data=fr.result;exports.encodePacket(packet,supportsBinary,true,callback)};return fr.readAsArrayBuffer(packet.data)}function encodeBlob(packet,supportsBinary,callback){if(!supportsBinary){return exports.encodeBase64Packet(packet,callback)}if(dontSendBlobs){return encodeBlobAsArrayBuffer(packet,supportsBinary,callback)}var length=new Uint8Array(1);length[0]=packets[packet.type];var blob=new Blob([length.buffer,packet.data]);return callback(blob)}exports.encodeBase64Packet=function(packet,callback){var message=\"b\"+exports.packets[packet.type];if(Blob&&packet.data instanceof global.Blob){var fr=new FileReader;fr.onload=function(){var b64=fr.result.split(\",\")[1];callback(message+b64)};return fr.readAsDataURL(packet.data)}var b64data;try{b64data=String.fromCharCode.apply(null,new Uint8Array(packet.data))}catch(e){var typed=new Uint8Array(packet.data);var basic=new Array(typed.length);for(var i=0;i<typed.length;i++){basic[i]=typed[i]}b64data=String.fromCharCode.apply(null,basic)}message+=global.btoa(b64data);return callback(message)};exports.decodePacket=function(data,binaryType,utf8decode){if(typeof data==\"string\"||data===undefined){if(data.charAt(0)==\"b\"){return exports.decodeBase64Packet(data.substr(1),binaryType)}if(utf8decode){try{data=utf8.decode(data)}catch(e){return err}}var type=data.charAt(0);if(Number(type)!=type||!packetslist[type]){return err}if(data.length>1){return{type:packetslist[type],data:data.substring(1)}}else{return{type:packetslist[type]}}}var asArray=new Uint8Array(data);var type=asArray[0];var rest=sliceBuffer(data,1);if(Blob&&binaryType===\"blob\"){rest=new Blob([rest])}return{type:packetslist[type],data:rest}};exports.decodeBase64Packet=function(msg,binaryType){var type=packetslist[msg.charAt(0)];if(!global.ArrayBuffer){return{type:type,data:{base64:true,data:msg.substr(1)}}}var data=base64encoder.decode(msg.substr(1));if(binaryType===\"blob\"&&Blob){data=new Blob([data])}return{type:type,data:data}};exports.encodePayload=function(packets,supportsBinary,callback){if(typeof supportsBinary==\"function\"){callback=supportsBinary;supportsBinary=null}var isBinary=hasBinary(packets);if(supportsBinary&&isBinary){if(Blob&&!dontSendBlobs){return exports.encodePayloadAsBlob(packets,callback)}return exports.encodePayloadAsArrayBuffer(packets,callback)}if(!packets.length){return callback(\"0:\")}function setLengthHeader(message){return message.length+\":\"+message}function encodeOne(packet,doneCallback){exports.encodePacket(packet,!isBinary?false:supportsBinary,true,function(message){doneCallback(null,setLengthHeader(message))})}map(packets,encodeOne,function(err,results){return callback(results.join(\"\"))})};function map(ary,each,done){var result=new Array(ary.length);var next=after(ary.length,done);var eachWithIndex=function(i,el,cb){each(el,function(error,msg){result[i]=msg;cb(error,result)})};for(var i=0;i<ary.length;i++){eachWithIndex(i,ary[i],next)}}exports.decodePayload=function(data,binaryType,callback){if(typeof data!=\"string\"){return exports.decodePayloadAsBinary(data,binaryType,callback)}if(typeof binaryType===\"function\"){callback=binaryType;binaryType=null}var packet;if(data==\"\"){return callback(err,0,1)}var length=\"\",n,msg;for(var i=0,l=data.length;i<l;i++){var chr=data.charAt(i);if(\":\"!=chr){length+=chr}else{if(\"\"==length||length!=(n=Number(length))){return callback(err,0,1)}msg=data.substr(i+1,n);if(length!=msg.length){return callback(err,0,1)}if(msg.length){packet=exports.decodePacket(msg,binaryType,true);if(err.type==packet.type&&err.data==packet.data){return callback(err,0,1)}var ret=callback(packet,i+n,l);if(false===ret)return}i+=n;length=\"\"}}if(length!=\"\"){return callback(err,0,1)}};exports.encodePayloadAsArrayBuffer=function(packets,callback){if(!packets.length){return callback(new ArrayBuffer(0))}function encodeOne(packet,doneCallback){exports.encodePacket(packet,true,true,function(data){return doneCallback(null,data)})}map(packets,encodeOne,function(err,encodedPackets){var totalLength=encodedPackets.reduce(function(acc,p){var len;if(typeof p===\"string\"){len=p.length}else{len=p.byteLength}return acc+len.toString().length+len+2},0);var resultArray=new Uint8Array(totalLength);var bufferIndex=0;encodedPackets.forEach(function(p){var isString=typeof p===\"string\";var ab=p;if(isString){var view=new Uint8Array(p.length);for(var i=0;i<p.length;i++){view[i]=p.charCodeAt(i)}ab=view.buffer}if(isString){resultArray[bufferIndex++]=0}else{resultArray[bufferIndex++]=1}var lenStr=ab.byteLength.toString();for(var i=0;i<lenStr.length;i++){resultArray[bufferIndex++]=parseInt(lenStr[i])}resultArray[bufferIndex++]=255;var view=new Uint8Array(ab);for(var i=0;i<view.length;i++){resultArray[bufferIndex++]=view[i]}});return callback(resultArray.buffer)})};exports.encodePayloadAsBlob=function(packets,callback){function encodeOne(packet,doneCallback){exports.encodePacket(packet,true,true,function(encoded){var binaryIdentifier=new Uint8Array(1);binaryIdentifier[0]=1;if(typeof encoded===\"string\"){var view=new Uint8Array(encoded.length);for(var i=0;i<encoded.length;i++){view[i]=encoded.charCodeAt(i)}encoded=view.buffer;binaryIdentifier[0]=0}var len=encoded instanceof ArrayBuffer?encoded.byteLength:encoded.size;var lenStr=len.toString();var lengthAry=new Uint8Array(lenStr.length+1);for(var i=0;i<lenStr.length;i++){lengthAry[i]=parseInt(lenStr[i])}lengthAry[lenStr.length]=255;if(Blob){var blob=new Blob([binaryIdentifier.buffer,lengthAry.buffer,encoded]);doneCallback(null,blob)}})}map(packets,encodeOne,function(err,results){return callback(new Blob(results))})};exports.decodePayloadAsBinary=function(data,binaryType,callback){if(typeof binaryType===\"function\"){callback=binaryType;binaryType=null}var bufferTail=data;var buffers=[];var numberTooLong=false;while(bufferTail.byteLength>0){var tailArray=new Uint8Array(bufferTail);var isString=tailArray[0]===0;var msgLength=\"\";for(var i=1;;i++){if(tailArray[i]==255)break;if(msgLength.length>310){numberTooLong=true;break}msgLength+=tailArray[i]}if(numberTooLong)return callback(err,0,1);bufferTail=sliceBuffer(bufferTail,2+msgLength.length);msgLength=parseInt(msgLength);var msg=sliceBuffer(bufferTail,0,msgLength);if(isString){try{msg=String.fromCharCode.apply(null,new Uint8Array(msg))}catch(e){var typed=new Uint8Array(msg);msg=\"\";for(var i=0;i<typed.length;i++){msg+=String.fromCharCode(typed[i])}}}buffers.push(msg);bufferTail=sliceBuffer(bufferTail,msgLength)}var total=buffers.length;buffers.forEach(function(buffer,i){callback(exports.decodePacket(buffer,binaryType,true),i,total)})}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{\"./keys\":20,after:11,\"arraybuffer.slice\":12,\"base64-arraybuffer\":13,blob:14,\"has-binary\":21,utf8:29}],20:[function(_dereq_,module,exports){module.exports=Object.keys||function keys(obj){var arr=[];var has=Object.prototype.hasOwnProperty;for(var i in obj){if(has.call(obj,i)){arr.push(i)}}return arr}},{}],21:[function(_dereq_,module,exports){(function(global){var isArray=_dereq_(\"isarray\");module.exports=hasBinary;function hasBinary(data){function _hasBinary(obj){if(!obj)return false;if(global.Buffer&&global.Buffer.isBuffer(obj)||global.ArrayBuffer&&obj instanceof ArrayBuffer||global.Blob&&obj instanceof Blob||global.File&&obj instanceof File){return true}if(isArray(obj)){for(var i=0;i<obj.length;i++){if(_hasBinary(obj[i])){return true}}}else if(obj&&\"object\"==typeof obj){if(obj.toJSON){obj=obj.toJSON()}for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)&&_hasBinary(obj[key])){return true}}}return false}return _hasBinary(data)}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{isarray:24}],22:[function(_dereq_,module,exports){try{module.exports=typeof XMLHttpRequest!==\"undefined\"&&\"withCredentials\"in new XMLHttpRequest}catch(err){module.exports=false}},{}],23:[function(_dereq_,module,exports){var indexOf=[].indexOf;module.exports=function(arr,obj){if(indexOf)return arr.indexOf(obj);for(var i=0;i<arr.length;++i){if(arr[i]===obj)return i}return-1}},{}],24:[function(_dereq_,module,exports){module.exports=Array.isArray||function(arr){return Object.prototype.toString.call(arr)==\"[object Array]\"}},{}],25:[function(_dereq_,module,exports){var s=1e3;var m=s*60;var h=m*60;var d=h*24;var y=d*365.25;module.exports=function(val,options){options=options||{};if(\"string\"==typeof val)return parse(val);return options.long?long(val):short(val)};function parse(str){str=\"\"+str;if(str.length>1e4)return;var match=/^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);if(!match)return;var n=parseFloat(match[1]);var type=(match[2]||\"ms\").toLowerCase();switch(type){case\"years\":case\"year\":case\"yrs\":case\"yr\":case\"y\":return n*y;case\"days\":case\"day\":case\"d\":return n*d;case\"hours\":case\"hour\":case\"hrs\":case\"hr\":case\"h\":return n*h;case\"minutes\":case\"minute\":case\"mins\":case\"min\":case\"m\":return n*m;case\"seconds\":case\"second\":case\"secs\":case\"sec\":case\"s\":return n*s;case\"milliseconds\":case\"millisecond\":case\"msecs\":case\"msec\":case\"ms\":return n}}function short(ms){if(ms>=d)return Math.round(ms/d)+\"d\";if(ms>=h)return Math.round(ms/h)+\"h\";if(ms>=m)return Math.round(ms/m)+\"m\";if(ms>=s)return Math.round(ms/s)+\"s\";return ms+\"ms\"}function long(ms){return plural(ms,d,\"day\")||plural(ms,h,\"hour\")||plural(ms,m,\"minute\")||plural(ms,s,\"second\")||ms+\" ms\"}function plural(ms,n,name){if(ms<n)return;if(ms<n*1.5)return Math.floor(ms/n)+\" \"+name;return Math.ceil(ms/n)+\" \"+name+\"s\"}},{}],26:[function(_dereq_,module,exports){(function(global){var rvalidchars=/^[\\],:{}\\s]*$/;var rvalidescape=/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g;var rvalidtokens=/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g;var rvalidbraces=/(?:^|:|,)(?:\\s*\\[)+/g;var rtrimLeft=/^\\s+/;var rtrimRight=/\\s+$/;module.exports=function parsejson(data){if(\"string\"!=typeof data||!data){return null}data=data.replace(rtrimLeft,\"\").replace(rtrimRight,\"\");if(global.JSON&&JSON.parse){return JSON.parse(data)}if(rvalidchars.test(data.replace(rvalidescape,\"@\").replace(rvalidtokens,\"]\").replace(rvalidbraces,\"\"))){return new Function(\"return \"+data)()}}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{}],27:[function(_dereq_,module,exports){exports.encode=function(obj){var str=\"\";for(var i in obj){if(obj.hasOwnProperty(i)){if(str.length)str+=\"&\";str+=encodeURIComponent(i)+\"=\"+encodeURIComponent(obj[i])}}return str};exports.decode=function(qs){var qry={};var pairs=qs.split(\"&\");for(var i=0,l=pairs.length;i<l;i++){var pair=pairs[i].split(\"=\");qry[decodeURIComponent(pair[0])]=decodeURIComponent(pair[1])}return qry}},{}],28:[function(_dereq_,module,exports){var re=/^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;var parts=[\"source\",\"protocol\",\"authority\",\"userInfo\",\"user\",\"password\",\"host\",\"port\",\"relative\",\"path\",\"directory\",\"file\",\"query\",\"anchor\"];module.exports=function parseuri(str){var src=str,b=str.indexOf(\"[\"),e=str.indexOf(\"]\");if(b!=-1&&e!=-1){str=str.substring(0,b)+str.substring(b,e).replace(/:/g,\";\")+str.substring(e,str.length)}var m=re.exec(str||\"\"),uri={},i=14;while(i--){uri[parts[i]]=m[i]||\"\"}if(b!=-1&&e!=-1){uri.source=src;uri.host=uri.host.substring(1,uri.host.length-1).replace(/;/g,\":\");uri.authority=uri.authority.replace(\"[\",\"\").replace(\"]\",\"\").replace(/;/g,\":\");uri.ipv6uri=true}return uri}},{}],29:[function(_dereq_,module,exports){(function(global){(function(root){var freeExports=typeof exports==\"object\"&&exports;var freeModule=typeof module==\"object\"&&module&&module.exports==freeExports&&module;var freeGlobal=typeof global==\"object\"&&global;if(freeGlobal.global===freeGlobal||freeGlobal.window===freeGlobal){root=freeGlobal}var stringFromCharCode=String.fromCharCode;function ucs2decode(string){var output=[];var counter=0;var length=string.length;var value;var extra;while(counter<length){value=string.charCodeAt(counter++);if(value>=55296&&value<=56319&&counter<length){extra=string.charCodeAt(counter++);if((extra&64512)==56320){output.push(((value&1023)<<10)+(extra&1023)+65536)}else{output.push(value);counter--}}else{output.push(value)}}return output}function ucs2encode(array){var length=array.length;var index=-1;var value;var output=\"\";while(++index<length){value=array[index];if(value>65535){value-=65536;output+=stringFromCharCode(value>>>10&1023|55296);value=56320|value&1023}output+=stringFromCharCode(value)}return output}function checkScalarValue(codePoint){if(codePoint>=55296&&codePoint<=57343){throw Error(\"Lone surrogate U+\"+codePoint.toString(16).toUpperCase()+\" is not a scalar value\")}}function createByte(codePoint,shift){return stringFromCharCode(codePoint>>shift&63|128)}function encodeCodePoint(codePoint){if((codePoint&4294967168)==0){return stringFromCharCode(codePoint)}var symbol=\"\";if((codePoint&4294965248)==0){symbol=stringFromCharCode(codePoint>>6&31|192)}else if((codePoint&4294901760)==0){checkScalarValue(codePoint);symbol=stringFromCharCode(codePoint>>12&15|224);symbol+=createByte(codePoint,6)}else if((codePoint&4292870144)==0){symbol=stringFromCharCode(codePoint>>18&7|240);symbol+=createByte(codePoint,12);symbol+=createByte(codePoint,6)}symbol+=stringFromCharCode(codePoint&63|128);return symbol}function utf8encode(string){var codePoints=ucs2decode(string);var length=codePoints.length;var index=-1;var codePoint;var byteString=\"\";while(++index<length){codePoint=codePoints[index];byteString+=encodeCodePoint(codePoint)}return byteString}function readContinuationByte(){if(byteIndex>=byteCount){throw Error(\"Invalid byte index\")}var continuationByte=byteArray[byteIndex]&255;byteIndex++;if((continuationByte&192)==128){return continuationByte&63}throw Error(\"Invalid continuation byte\")}function decodeSymbol(){var byte1;var byte2;var byte3;var byte4;var codePoint;if(byteIndex>byteCount){throw Error(\"Invalid byte index\")}if(byteIndex==byteCount){return false}byte1=byteArray[byteIndex]&255;byteIndex++;if((byte1&128)==0){return byte1}if((byte1&224)==192){var byte2=readContinuationByte();codePoint=(byte1&31)<<6|byte2;if(codePoint>=128){return codePoint}else{throw Error(\"Invalid continuation byte\")}}if((byte1&240)==224){byte2=readContinuationByte();byte3=readContinuationByte();codePoint=(byte1&15)<<12|byte2<<6|byte3;if(codePoint>=2048){checkScalarValue(codePoint);return codePoint}else{throw Error(\"Invalid continuation byte\")}}if((byte1&248)==240){byte2=readContinuationByte();byte3=readContinuationByte();byte4=readContinuationByte();codePoint=(byte1&15)<<18|byte2<<12|byte3<<6|byte4;if(codePoint>=65536&&codePoint<=1114111){return codePoint}}throw Error(\"Invalid UTF-8 detected\")}var byteArray;var byteCount;var byteIndex;function utf8decode(byteString){byteArray=ucs2decode(byteString);byteCount=byteArray.length;byteIndex=0;var codePoints=[];var tmp;while((tmp=decodeSymbol())!==false){codePoints.push(tmp)}return ucs2encode(codePoints)}var utf8={version:\"2.0.0\",encode:utf8encode,decode:utf8decode};if(typeof define==\"function\"&&typeof define.amd==\"object\"&&define.amd){define(function(){return utf8})}else if(freeExports&&!freeExports.nodeType){if(freeModule){freeModule.exports=utf8}else{var object={};var hasOwnProperty=object.hasOwnProperty;for(var key in utf8){hasOwnProperty.call(utf8,key)&&(freeExports[key]=utf8[key])}}}else{root.utf8=utf8}})(this)}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{}],30:[function(_dereq_,module,exports){\"use strict\";var alphabet=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_\".split(\"\"),length=64,map={},seed=0,i=0,prev;function encode(num){var encoded=\"\";do{encoded=alphabet[num%length]+encoded;num=Math.floor(num/length)}while(num>0);return encoded}function decode(str){var decoded=0;for(i=0;i<str.length;i++){decoded=decoded*length+map[str.charAt(i)]}return decoded}function yeast(){var now=encode(+new Date);if(now!==prev)return seed=0,prev=now;return now+\".\"+encode(seed++)}for(;i<length;i++)map[alphabet[i]]=i;yeast.encode=encode;yeast.decode=decode;module.exports=yeast},{}],31:[function(_dereq_,module,exports){var url=_dereq_(\"./url\");var parser=_dereq_(\"socket.io-parser\");var Manager=_dereq_(\"./manager\");var debug=_dereq_(\"debug\")(\"socket.io-client\");module.exports=exports=lookup;var cache=exports.managers={};function lookup(uri,opts){if(typeof uri==\"object\"){opts=uri;uri=undefined}opts=opts||{};var parsed=url(uri);var source=parsed.source;var id=parsed.id;var path=parsed.path;var sameNamespace=cache[id]&&path in cache[id].nsps;var newConnection=opts.forceNew||opts[\"force new connection\"]||false===opts.multiplex||sameNamespace;var io;if(newConnection){debug(\"ignoring socket cache for %s\",source);io=Manager(source,opts)}else{if(!cache[id]){debug(\"new io instance for %s\",source);cache[id]=Manager(source,opts)}io=cache[id]}return io.socket(parsed.path)}exports.protocol=parser.protocol;exports.connect=lookup;exports.Manager=_dereq_(\"./manager\");exports.Socket=_dereq_(\"./socket\")},{\"./manager\":32,\"./socket\":34,\"./url\":35,debug:39,\"socket.io-parser\":47}],32:[function(_dereq_,module,exports){var eio=_dereq_(\"engine.io-client\");var Socket=_dereq_(\"./socket\");var Emitter=_dereq_(\"component-emitter\");var parser=_dereq_(\"socket.io-parser\");var on=_dereq_(\"./on\");var bind=_dereq_(\"component-bind\");var debug=_dereq_(\"debug\")(\"socket.io-client:manager\");var indexOf=_dereq_(\"indexof\");var Backoff=_dereq_(\"backo2\");var has=Object.prototype.hasOwnProperty;module.exports=Manager;function Manager(uri,opts){if(!(this instanceof Manager))return new Manager(uri,opts);if(uri&&\"object\"==typeof uri){opts=uri;uri=undefined}opts=opts||{};opts.path=opts.path||\"/socket.io\";this.nsps={};this.subs=[];this.opts=opts;this.reconnection(opts.reconnection!==false);this.reconnectionAttempts(opts.reconnectionAttempts||Infinity);this.reconnectionDelay(opts.reconnectionDelay||1e3);this.reconnectionDelayMax(opts.reconnectionDelayMax||5e3);this.randomizationFactor(opts.randomizationFactor||.5);this.backoff=new Backoff({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()});this.timeout(null==opts.timeout?2e4:opts.timeout);this.readyState=\"closed\";this.uri=uri;this.connecting=[];this.lastPing=null;this.encoding=false;this.packetBuffer=[];this.encoder=new parser.Encoder;this.decoder=new parser.Decoder;this.autoConnect=opts.autoConnect!==false;if(this.autoConnect)this.open()}Manager.prototype.emitAll=function(){this.emit.apply(this,arguments);for(var nsp in this.nsps){if(has.call(this.nsps,nsp)){this.nsps[nsp].emit.apply(this.nsps[nsp],arguments)}}};Manager.prototype.updateSocketIds=function(){for(var nsp in this.nsps){if(has.call(this.nsps,nsp)){this.nsps[nsp].id=this.engine.id}}};Emitter(Manager.prototype);Manager.prototype.reconnection=function(v){if(!arguments.length)return this._reconnection;this._reconnection=!!v;return this};Manager.prototype.reconnectionAttempts=function(v){if(!arguments.length)return this._reconnectionAttempts;this._reconnectionAttempts=v;return this};Manager.prototype.reconnectionDelay=function(v){if(!arguments.length)return this._reconnectionDelay;this._reconnectionDelay=v;this.backoff&&this.backoff.setMin(v);return this};Manager.prototype.randomizationFactor=function(v){if(!arguments.length)return this._randomizationFactor;this._randomizationFactor=v;this.backoff&&this.backoff.setJitter(v);return this};Manager.prototype.reconnectionDelayMax=function(v){if(!arguments.length)return this._reconnectionDelayMax;this._reconnectionDelayMax=v;this.backoff&&this.backoff.setMax(v);return this};Manager.prototype.timeout=function(v){if(!arguments.length)return this._timeout;this._timeout=v;return this};Manager.prototype.maybeReconnectOnOpen=function(){if(!this.reconnecting&&this._reconnection&&this.backoff.attempts===0){this.reconnect()}};Manager.prototype.open=Manager.prototype.connect=function(fn){debug(\"readyState %s\",this.readyState);if(~this.readyState.indexOf(\"open\"))return this;debug(\"opening %s\",this.uri);this.engine=eio(this.uri,this.opts);var socket=this.engine;var self=this;this.readyState=\"opening\";this.skipReconnect=false;var openSub=on(socket,\"open\",function(){self.onopen();fn&&fn()});var errorSub=on(socket,\"error\",function(data){debug(\"connect_error\");self.cleanup();self.readyState=\"closed\";self.emitAll(\"connect_error\",data);if(fn){var err=new Error(\"Connection error\");err.data=data;fn(err)}else{self.maybeReconnectOnOpen()}});if(false!==this._timeout){var timeout=this._timeout;debug(\"connect attempt will timeout after %d\",timeout);var timer=setTimeout(function(){debug(\"connect attempt timed out after %d\",timeout);openSub.destroy();socket.close();socket.emit(\"error\",\"timeout\");self.emitAll(\"connect_timeout\",timeout)},timeout);this.subs.push({destroy:function(){clearTimeout(timer)}})}this.subs.push(openSub);this.subs.push(errorSub);return this};Manager.prototype.onopen=function(){debug(\"open\");this.cleanup();this.readyState=\"open\";this.emit(\"open\");var socket=this.engine;this.subs.push(on(socket,\"data\",bind(this,\"ondata\")));this.subs.push(on(socket,\"ping\",bind(this,\"onping\")));this.subs.push(on(socket,\"pong\",bind(this,\"onpong\")));this.subs.push(on(socket,\"error\",bind(this,\"onerror\")));this.subs.push(on(socket,\"close\",bind(this,\"onclose\")));this.subs.push(on(this.decoder,\"decoded\",bind(this,\"ondecoded\")))};Manager.prototype.onping=function(){this.lastPing=new Date;this.emitAll(\"ping\")};Manager.prototype.onpong=function(){this.emitAll(\"pong\",new Date-this.lastPing)};Manager.prototype.ondata=function(data){this.decoder.add(data)};Manager.prototype.ondecoded=function(packet){this.emit(\"packet\",packet)};Manager.prototype.onerror=function(err){debug(\"error\",err);this.emitAll(\"error\",err)};Manager.prototype.socket=function(nsp){var socket=this.nsps[nsp];if(!socket){socket=new Socket(this,nsp);this.nsps[nsp]=socket;var self=this;socket.on(\"connecting\",onConnecting);\nsocket.on(\"connect\",function(){socket.id=self.engine.id});if(this.autoConnect){onConnecting()}}function onConnecting(){if(!~indexOf(self.connecting,socket)){self.connecting.push(socket)}}return socket};Manager.prototype.destroy=function(socket){var index=indexOf(this.connecting,socket);if(~index)this.connecting.splice(index,1);if(this.connecting.length)return;this.close()};Manager.prototype.packet=function(packet){debug(\"writing packet %j\",packet);var self=this;if(!self.encoding){self.encoding=true;this.encoder.encode(packet,function(encodedPackets){for(var i=0;i<encodedPackets.length;i++){self.engine.write(encodedPackets[i],packet.options)}self.encoding=false;self.processPacketQueue()})}else{self.packetBuffer.push(packet)}};Manager.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var pack=this.packetBuffer.shift();this.packet(pack)}};Manager.prototype.cleanup=function(){debug(\"cleanup\");var sub;while(sub=this.subs.shift())sub.destroy();this.packetBuffer=[];this.encoding=false;this.lastPing=null;this.decoder.destroy()};Manager.prototype.close=Manager.prototype.disconnect=function(){debug(\"disconnect\");this.skipReconnect=true;this.reconnecting=false;if(\"opening\"==this.readyState){this.cleanup()}this.backoff.reset();this.readyState=\"closed\";if(this.engine)this.engine.close()};Manager.prototype.onclose=function(reason){debug(\"onclose\");this.cleanup();this.backoff.reset();this.readyState=\"closed\";this.emit(\"close\",reason);if(this._reconnection&&!this.skipReconnect){this.reconnect()}};Manager.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var self=this;if(this.backoff.attempts>=this._reconnectionAttempts){debug(\"reconnect failed\");this.backoff.reset();this.emitAll(\"reconnect_failed\");this.reconnecting=false}else{var delay=this.backoff.duration();debug(\"will wait %dms before reconnect attempt\",delay);this.reconnecting=true;var timer=setTimeout(function(){if(self.skipReconnect)return;debug(\"attempting reconnect\");self.emitAll(\"reconnect_attempt\",self.backoff.attempts);self.emitAll(\"reconnecting\",self.backoff.attempts);if(self.skipReconnect)return;self.open(function(err){if(err){debug(\"reconnect attempt error\");self.reconnecting=false;self.reconnect();self.emitAll(\"reconnect_error\",err.data)}else{debug(\"reconnect success\");self.onreconnect()}})},delay);this.subs.push({destroy:function(){clearTimeout(timer)}})}};Manager.prototype.onreconnect=function(){var attempt=this.backoff.attempts;this.reconnecting=false;this.backoff.reset();this.updateSocketIds();this.emitAll(\"reconnect\",attempt)}},{\"./on\":33,\"./socket\":34,backo2:36,\"component-bind\":37,\"component-emitter\":38,debug:39,\"engine.io-client\":1,indexof:42,\"socket.io-parser\":47}],33:[function(_dereq_,module,exports){module.exports=on;function on(obj,ev,fn){obj.on(ev,fn);return{destroy:function(){obj.removeListener(ev,fn)}}}},{}],34:[function(_dereq_,module,exports){var parser=_dereq_(\"socket.io-parser\");var Emitter=_dereq_(\"component-emitter\");var toArray=_dereq_(\"to-array\");var on=_dereq_(\"./on\");var bind=_dereq_(\"component-bind\");var debug=_dereq_(\"debug\")(\"socket.io-client:socket\");var hasBin=_dereq_(\"has-binary\");module.exports=exports=Socket;var events={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1};var emit=Emitter.prototype.emit;function Socket(io,nsp){this.io=io;this.nsp=nsp;this.json=this;this.ids=0;this.acks={};this.receiveBuffer=[];this.sendBuffer=[];this.connected=false;this.disconnected=true;if(this.io.autoConnect)this.open()}Emitter(Socket.prototype);Socket.prototype.subEvents=function(){if(this.subs)return;var io=this.io;this.subs=[on(io,\"open\",bind(this,\"onopen\")),on(io,\"packet\",bind(this,\"onpacket\")),on(io,\"close\",bind(this,\"onclose\"))]};Socket.prototype.open=Socket.prototype.connect=function(){if(this.connected)return this;this.subEvents();this.io.open();if(\"open\"==this.io.readyState)this.onopen();this.emit(\"connecting\");return this};Socket.prototype.send=function(){var args=toArray(arguments);args.unshift(\"message\");this.emit.apply(this,args);return this};Socket.prototype.emit=function(ev){if(events.hasOwnProperty(ev)){emit.apply(this,arguments);return this}var args=toArray(arguments);var parserType=parser.EVENT;if(hasBin(args)){parserType=parser.BINARY_EVENT}var packet={type:parserType,data:args};packet.options={};packet.options.compress=!this.flags||false!==this.flags.compress;if(\"function\"==typeof args[args.length-1]){debug(\"emitting packet with ack id %d\",this.ids);this.acks[this.ids]=args.pop();packet.id=this.ids++}if(this.connected){this.packet(packet)}else{this.sendBuffer.push(packet)}delete this.flags;return this};Socket.prototype.packet=function(packet){packet.nsp=this.nsp;this.io.packet(packet)};Socket.prototype.onopen=function(){debug(\"transport is open - connecting\");if(\"/\"!=this.nsp){this.packet({type:parser.CONNECT})}};Socket.prototype.onclose=function(reason){debug(\"close (%s)\",reason);this.connected=false;this.disconnected=true;delete this.id;this.emit(\"disconnect\",reason)};Socket.prototype.onpacket=function(packet){if(packet.nsp!=this.nsp)return;switch(packet.type){case parser.CONNECT:this.onconnect();break;case parser.EVENT:this.onevent(packet);break;case parser.BINARY_EVENT:this.onevent(packet);break;case parser.ACK:this.onack(packet);break;case parser.BINARY_ACK:this.onack(packet);break;case parser.DISCONNECT:this.ondisconnect();break;case parser.ERROR:this.emit(\"error\",packet.data);break}};Socket.prototype.onevent=function(packet){var args=packet.data||[];debug(\"emitting event %j\",args);if(null!=packet.id){debug(\"attaching ack callback to event\");args.push(this.ack(packet.id))}if(this.connected){emit.apply(this,args)}else{this.receiveBuffer.push(args)}};Socket.prototype.ack=function(id){var self=this;var sent=false;return function(){if(sent)return;sent=true;var args=toArray(arguments);debug(\"sending ack %j\",args);var type=hasBin(args)?parser.BINARY_ACK:parser.ACK;self.packet({type:type,id:id,data:args})}};Socket.prototype.onack=function(packet){var ack=this.acks[packet.id];if(\"function\"==typeof ack){debug(\"calling ack %s with %j\",packet.id,packet.data);ack.apply(this,packet.data);delete this.acks[packet.id]}else{debug(\"bad ack %s\",packet.id)}};Socket.prototype.onconnect=function(){this.connected=true;this.disconnected=false;this.emit(\"connect\");this.emitBuffered()};Socket.prototype.emitBuffered=function(){var i;for(i=0;i<this.receiveBuffer.length;i++){emit.apply(this,this.receiveBuffer[i])}this.receiveBuffer=[];for(i=0;i<this.sendBuffer.length;i++){this.packet(this.sendBuffer[i])}this.sendBuffer=[]};Socket.prototype.ondisconnect=function(){debug(\"server disconnect (%s)\",this.nsp);this.destroy();this.onclose(\"io server disconnect\")};Socket.prototype.destroy=function(){if(this.subs){for(var i=0;i<this.subs.length;i++){this.subs[i].destroy()}this.subs=null}this.io.destroy(this)};Socket.prototype.close=Socket.prototype.disconnect=function(){if(this.connected){debug(\"performing disconnect (%s)\",this.nsp);this.packet({type:parser.DISCONNECT})}this.destroy();if(this.connected){this.onclose(\"io client disconnect\")}return this};Socket.prototype.compress=function(compress){this.flags=this.flags||{};this.flags.compress=compress;return this}},{\"./on\":33,\"component-bind\":37,\"component-emitter\":38,debug:39,\"has-binary\":41,\"socket.io-parser\":47,\"to-array\":51}],35:[function(_dereq_,module,exports){(function(global){var parseuri=_dereq_(\"parseuri\");var debug=_dereq_(\"debug\")(\"socket.io-client:url\");module.exports=url;function url(uri,loc){var obj=uri;var loc=loc||global.location;if(null==uri)uri=loc.protocol+\"//\"+loc.host;if(\"string\"==typeof uri){if(\"/\"==uri.charAt(0)){if(\"/\"==uri.charAt(1)){uri=loc.protocol+uri}else{uri=loc.host+uri}}if(!/^(https?|wss?):\\/\\//.test(uri)){debug(\"protocol-less url %s\",uri);if(\"undefined\"!=typeof loc){uri=loc.protocol+\"//\"+uri}else{uri=\"https://\"+uri}}debug(\"parse %s\",uri);obj=parseuri(uri)}if(!obj.port){if(/^(http|ws)$/.test(obj.protocol)){obj.port=\"80\"}else if(/^(http|ws)s$/.test(obj.protocol)){obj.port=\"443\"}}obj.path=obj.path||\"/\";var ipv6=obj.host.indexOf(\":\")!==-1;var host=ipv6?\"[\"+obj.host+\"]\":obj.host;obj.id=obj.protocol+\"://\"+host+\":\"+obj.port;obj.href=obj.protocol+\"://\"+host+(loc&&loc.port==obj.port?\"\":\":\"+obj.port);return obj}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{debug:39,parseuri:45}],36:[function(_dereq_,module,exports){module.exports=Backoff;function Backoff(opts){opts=opts||{};this.ms=opts.min||100;this.max=opts.max||1e4;this.factor=opts.factor||2;this.jitter=opts.jitter>0&&opts.jitter<=1?opts.jitter:0;this.attempts=0}Backoff.prototype.duration=function(){var ms=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var rand=Math.random();var deviation=Math.floor(rand*this.jitter*ms);ms=(Math.floor(rand*10)&1)==0?ms-deviation:ms+deviation}return Math.min(ms,this.max)|0};Backoff.prototype.reset=function(){this.attempts=0};Backoff.prototype.setMin=function(min){this.ms=min};Backoff.prototype.setMax=function(max){this.max=max};Backoff.prototype.setJitter=function(jitter){this.jitter=jitter}},{}],37:[function(_dereq_,module,exports){var slice=[].slice;module.exports=function(obj,fn){if(\"string\"==typeof fn)fn=obj[fn];if(\"function\"!=typeof fn)throw new Error(\"bind() requires a function\");var args=slice.call(arguments,2);return function(){return fn.apply(obj,args.concat(slice.call(arguments)))}}},{}],38:[function(_dereq_,module,exports){module.exports=Emitter;function Emitter(obj){if(obj)return mixin(obj)}function mixin(obj){for(var key in Emitter.prototype){obj[key]=Emitter.prototype[key]}return obj}Emitter.prototype.on=Emitter.prototype.addEventListener=function(event,fn){this._callbacks=this._callbacks||{};(this._callbacks[\"$\"+event]=this._callbacks[\"$\"+event]||[]).push(fn);return this};Emitter.prototype.once=function(event,fn){function on(){this.off(event,on);fn.apply(this,arguments)}on.fn=fn;this.on(event,on);return this};Emitter.prototype.off=Emitter.prototype.removeListener=Emitter.prototype.removeAllListeners=Emitter.prototype.removeEventListener=function(event,fn){this._callbacks=this._callbacks||{};if(0==arguments.length){this._callbacks={};return this}var callbacks=this._callbacks[\"$\"+event];if(!callbacks)return this;if(1==arguments.length){delete this._callbacks[\"$\"+event];return this}var cb;for(var i=0;i<callbacks.length;i++){cb=callbacks[i];if(cb===fn||cb.fn===fn){callbacks.splice(i,1);break}}return this};Emitter.prototype.emit=function(event){this._callbacks=this._callbacks||{};var args=[].slice.call(arguments,1),callbacks=this._callbacks[\"$\"+event];if(callbacks){callbacks=callbacks.slice(0);for(var i=0,len=callbacks.length;i<len;++i){callbacks[i].apply(this,args)}}return this};Emitter.prototype.listeners=function(event){this._callbacks=this._callbacks||{};return this._callbacks[\"$\"+event]||[]};Emitter.prototype.hasListeners=function(event){return!!this.listeners(event).length}},{}],39:[function(_dereq_,module,exports){arguments[4][17][0].apply(exports,arguments)},{\"./debug\":40,dup:17}],40:[function(_dereq_,module,exports){arguments[4][18][0].apply(exports,arguments)},{dup:18,ms:44}],41:[function(_dereq_,module,exports){(function(global){var isArray=_dereq_(\"isarray\");module.exports=hasBinary;function hasBinary(data){function _hasBinary(obj){if(!obj)return false;if(global.Buffer&&global.Buffer.isBuffer&&global.Buffer.isBuffer(obj)||global.ArrayBuffer&&obj instanceof ArrayBuffer||global.Blob&&obj instanceof Blob||global.File&&obj instanceof File){return true}if(isArray(obj)){for(var i=0;i<obj.length;i++){if(_hasBinary(obj[i])){return true}}}else if(obj&&\"object\"==typeof obj){if(obj.toJSON&&\"function\"==typeof obj.toJSON){obj=obj.toJSON()}for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)&&_hasBinary(obj[key])){return true}}}return false}return _hasBinary(data)}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{isarray:43}],42:[function(_dereq_,module,exports){arguments[4][23][0].apply(exports,arguments)},{dup:23}],43:[function(_dereq_,module,exports){arguments[4][24][0].apply(exports,arguments)},{dup:24}],44:[function(_dereq_,module,exports){arguments[4][25][0].apply(exports,arguments)},{dup:25}],45:[function(_dereq_,module,exports){arguments[4][28][0].apply(exports,arguments)},{dup:28}],46:[function(_dereq_,module,exports){(function(global){var isArray=_dereq_(\"isarray\");var isBuf=_dereq_(\"./is-buffer\");exports.deconstructPacket=function(packet){var buffers=[];var packetData=packet.data;function _deconstructPacket(data){if(!data)return data;if(isBuf(data)){var placeholder={_placeholder:true,num:buffers.length};buffers.push(data);return placeholder}else if(isArray(data)){var newData=new Array(data.length);for(var i=0;i<data.length;i++){newData[i]=_deconstructPacket(data[i])}return newData}else if(\"object\"==typeof data&&!(data instanceof Date)){var newData={};for(var key in data){newData[key]=_deconstructPacket(data[key])}return newData}return data}var pack=packet;pack.data=_deconstructPacket(packetData);pack.attachments=buffers.length;return{packet:pack,buffers:buffers}};exports.reconstructPacket=function(packet,buffers){var curPlaceHolder=0;function _reconstructPacket(data){if(data&&data._placeholder){var buf=buffers[data.num];return buf}else if(isArray(data)){for(var i=0;i<data.length;i++){data[i]=_reconstructPacket(data[i])}return data}else if(data&&\"object\"==typeof data){for(var key in data){data[key]=_reconstructPacket(data[key])}return data}return data}packet.data=_reconstructPacket(packet.data);packet.attachments=undefined;return packet};exports.removeBlobs=function(data,callback){function _removeBlobs(obj,curKey,containingObject){if(!obj)return obj;if(global.Blob&&obj instanceof Blob||global.File&&obj instanceof File){pendingBlobs++;var fileReader=new FileReader;fileReader.onload=function(){if(containingObject){containingObject[curKey]=this.result}else{bloblessData=this.result}if(!--pendingBlobs){callback(bloblessData)}};fileReader.readAsArrayBuffer(obj)}else if(isArray(obj)){for(var i=0;i<obj.length;i++){_removeBlobs(obj[i],i,obj)}}else if(obj&&\"object\"==typeof obj&&!isBuf(obj)){for(var key in obj){_removeBlobs(obj[key],key,obj)}}}var pendingBlobs=0;var bloblessData=data;_removeBlobs(bloblessData);if(!pendingBlobs){callback(bloblessData)}}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{\"./is-buffer\":48,isarray:43}],47:[function(_dereq_,module,exports){var debug=_dereq_(\"debug\")(\"socket.io-parser\");var json=_dereq_(\"json3\");var isArray=_dereq_(\"isarray\");var Emitter=_dereq_(\"component-emitter\");var binary=_dereq_(\"./binary\");var isBuf=_dereq_(\"./is-buffer\");exports.protocol=4;exports.types=[\"CONNECT\",\"DISCONNECT\",\"EVENT\",\"BINARY_EVENT\",\"ACK\",\"BINARY_ACK\",\"ERROR\"];exports.CONNECT=0;exports.DISCONNECT=1;exports.EVENT=2;exports.ACK=3;exports.ERROR=4;exports.BINARY_EVENT=5;exports.BINARY_ACK=6;exports.Encoder=Encoder;exports.Decoder=Decoder;function Encoder(){}Encoder.prototype.encode=function(obj,callback){debug(\"encoding packet %j\",obj);if(exports.BINARY_EVENT==obj.type||exports.BINARY_ACK==obj.type){encodeAsBinary(obj,callback)}else{var encoding=encodeAsString(obj);callback([encoding])}};function encodeAsString(obj){var str=\"\";var nsp=false;str+=obj.type;if(exports.BINARY_EVENT==obj.type||exports.BINARY_ACK==obj.type){str+=obj.attachments;str+=\"-\"}if(obj.nsp&&\"/\"!=obj.nsp){nsp=true;str+=obj.nsp}if(null!=obj.id){if(nsp){str+=\",\";nsp=false}str+=obj.id}if(null!=obj.data){if(nsp)str+=\",\";str+=json.stringify(obj.data)}debug(\"encoded %j as %s\",obj,str);return str}function encodeAsBinary(obj,callback){function writeEncoding(bloblessData){var deconstruction=binary.deconstructPacket(bloblessData);var pack=encodeAsString(deconstruction.packet);var buffers=deconstruction.buffers;buffers.unshift(pack);callback(buffers)}binary.removeBlobs(obj,writeEncoding)}function Decoder(){this.reconstructor=null}Emitter(Decoder.prototype);Decoder.prototype.add=function(obj){var packet;if(\"string\"==typeof obj){packet=decodeString(obj);if(exports.BINARY_EVENT==packet.type||exports.BINARY_ACK==packet.type){this.reconstructor=new BinaryReconstructor(packet);if(this.reconstructor.reconPack.attachments===0){this.emit(\"decoded\",packet)}}else{this.emit(\"decoded\",packet)}}else if(isBuf(obj)||obj.base64){if(!this.reconstructor){throw new Error(\"got binary data when not reconstructing a packet\")}else{packet=this.reconstructor.takeBinaryData(obj);if(packet){this.reconstructor=null;this.emit(\"decoded\",packet)}}}else{throw new Error(\"Unknown type: \"+obj)}};function decodeString(str){var p={};var i=0;p.type=Number(str.charAt(0));if(null==exports.types[p.type])return error();if(exports.BINARY_EVENT==p.type||exports.BINARY_ACK==p.type){var buf=\"\";while(str.charAt(++i)!=\"-\"){buf+=str.charAt(i);if(i==str.length)break}if(buf!=Number(buf)||str.charAt(i)!=\"-\"){throw new Error(\"Illegal attachments\")}p.attachments=Number(buf)}if(\"/\"==str.charAt(i+1)){p.nsp=\"\";while(++i){var c=str.charAt(i);if(\",\"==c)break;p.nsp+=c;if(i==str.length)break}}else{p.nsp=\"/\"}var next=str.charAt(i+1);if(\"\"!==next&&Number(next)==next){p.id=\"\";while(++i){var c=str.charAt(i);if(null==c||Number(c)!=c){--i;break}p.id+=str.charAt(i);if(i==str.length)break}p.id=Number(p.id)}if(str.charAt(++i)){try{p.data=json.parse(str.substr(i))}catch(e){return error()}}debug(\"decoded %s as %j\",str,p);return p}Decoder.prototype.destroy=function(){if(this.reconstructor){this.reconstructor.finishedReconstruction()}};function BinaryReconstructor(packet){this.reconPack=packet;this.buffers=[]}BinaryReconstructor.prototype.takeBinaryData=function(binData){this.buffers.push(binData);if(this.buffers.length==this.reconPack.attachments){var packet=binary.reconstructPacket(this.reconPack,this.buffers);this.finishedReconstruction();return packet}return null};BinaryReconstructor.prototype.finishedReconstruction=function(){this.reconPack=null;this.buffers=[]};function error(data){return{type:exports.ERROR,data:\"parser error\"}}},{\"./binary\":46,\"./is-buffer\":48,\"component-emitter\":49,debug:39,isarray:43,json3:50}],48:[function(_dereq_,module,exports){(function(global){module.exports=isBuf;function isBuf(obj){return global.Buffer&&global.Buffer.isBuffer(obj)||global.ArrayBuffer&&obj instanceof ArrayBuffer}}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{}],49:[function(_dereq_,module,exports){arguments[4][15][0].apply(exports,arguments)},{dup:15}],50:[function(_dereq_,module,exports){(function(global){(function(){var isLoader=typeof define===\"function\"&&define.amd;var objectTypes={\"function\":true,object:true};var freeExports=objectTypes[typeof exports]&&exports&&!exports.nodeType&&exports;var root=objectTypes[typeof window]&&window||this,freeGlobal=freeExports&&objectTypes[typeof module]&&module&&!module.nodeType&&typeof global==\"object\"&&global;if(freeGlobal&&(freeGlobal[\"global\"]===freeGlobal||freeGlobal[\"window\"]===freeGlobal||freeGlobal[\"self\"]===freeGlobal)){root=freeGlobal}function runInContext(context,exports){context||(context=root[\"Object\"]());exports||(exports=root[\"Object\"]());var Number=context[\"Number\"]||root[\"Number\"],String=context[\"String\"]||root[\"String\"],Object=context[\"Object\"]||root[\"Object\"],Date=context[\"Date\"]||root[\"Date\"],SyntaxError=context[\"SyntaxError\"]||root[\"SyntaxError\"],TypeError=context[\"TypeError\"]||root[\"TypeError\"],Math=context[\"Math\"]||root[\"Math\"],nativeJSON=context[\"JSON\"]||root[\"JSON\"];if(typeof nativeJSON==\"object\"&&nativeJSON){exports.stringify=nativeJSON.stringify;exports.parse=nativeJSON.parse}var objectProto=Object.prototype,getClass=objectProto.toString,isProperty,forEach,undef;var isExtended=new Date(-0xc782b5b800cec);try{isExtended=isExtended.getUTCFullYear()==-109252&&isExtended.getUTCMonth()===0&&isExtended.getUTCDate()===1&&isExtended.getUTCHours()==10&&isExtended.getUTCMinutes()==37&&isExtended.getUTCSeconds()==6&&isExtended.getUTCMilliseconds()==708}catch(exception){}function has(name){if(has[name]!==undef){return has[name]}var isSupported;if(name==\"bug-string-char-index\"){isSupported=\"a\"[0]!=\"a\"}else if(name==\"json\"){isSupported=has(\"json-stringify\")&&has(\"json-parse\")}else{var value,serialized='{\"a\":[1,true,false,null,\"\\\\u0000\\\\b\\\\n\\\\f\\\\r\\\\t\"]}';if(name==\"json-stringify\"){var stringify=exports.stringify,stringifySupported=typeof stringify==\"function\"&&isExtended;if(stringifySupported){(value=function(){return 1}).toJSON=value;try{stringifySupported=stringify(0)===\"0\"&&stringify(new Number)===\"0\"&&stringify(new String)=='\"\"'&&stringify(getClass)===undef&&stringify(undef)===undef&&stringify()===undef&&stringify(value)===\"1\"&&stringify([value])==\"[1]\"&&stringify([undef])==\"[null]\"&&stringify(null)==\"null\"&&stringify([undef,getClass,null])==\"[null,null,null]\"&&stringify({a:[value,true,false,null,\"\\x00\\b\\n\\f\\r\t\"]})==serialized&&stringify(null,value)===\"1\"&&stringify([1,2],null,1)==\"[\\n 1,\\n 2\\n]\"&&stringify(new Date(-864e13))=='\"-271821-04-20T00:00:00.000Z\"'&&stringify(new Date(864e13))=='\"+275760-09-13T00:00:00.000Z\"'&&stringify(new Date(-621987552e5))=='\"-000001-01-01T00:00:00.000Z\"'&&stringify(new Date(-1))=='\"1969-12-31T23:59:59.999Z\"'}catch(exception){stringifySupported=false}}isSupported=stringifySupported}if(name==\"json-parse\"){var parse=exports.parse;if(typeof parse==\"function\"){try{if(parse(\"0\")===0&&!parse(false)){value=parse(serialized);var parseSupported=value[\"a\"].length==5&&value[\"a\"][0]===1;if(parseSupported){try{parseSupported=!parse('\"\t\"')}catch(exception){}if(parseSupported){try{parseSupported=parse(\"01\")!==1}catch(exception){}}if(parseSupported){try{parseSupported=parse(\"1.\")!==1}catch(exception){}}}}}catch(exception){parseSupported=false}}isSupported=parseSupported}}return has[name]=!!isSupported}if(!has(\"json\")){var functionClass=\"[object Function]\",dateClass=\"[object Date]\",numberClass=\"[object Number]\",stringClass=\"[object String]\",arrayClass=\"[object Array]\",booleanClass=\"[object Boolean]\";var charIndexBuggy=has(\"bug-string-char-index\");if(!isExtended){var floor=Math.floor;var Months=[0,31,59,90,120,151,181,212,243,273,304,334];var getDay=function(year,month){return Months[month]+365*(year-1970)+floor((year-1969+(month=+(month>1)))/4)-floor((year-1901+month)/100)+floor((year-1601+month)/400)}}if(!(isProperty=objectProto.hasOwnProperty)){isProperty=function(property){var members={},constructor;if((members.__proto__=null,members.__proto__={toString:1},members).toString!=getClass){isProperty=function(property){var original=this.__proto__,result=property in(this.__proto__=null,this);this.__proto__=original;return result}}else{constructor=members.constructor;isProperty=function(property){var parent=(this.constructor||constructor).prototype;return property in this&&!(property in parent&&this[property]===parent[property])}}members=null;return isProperty.call(this,property)}}forEach=function(object,callback){var size=0,Properties,members,property;(Properties=function(){this.valueOf=0}).prototype.valueOf=0;members=new Properties;for(property in members){if(isProperty.call(members,property)){size++}}Properties=members=null;if(!size){members=[\"valueOf\",\"toString\",\"toLocaleString\",\"propertyIsEnumerable\",\"isPrototypeOf\",\"hasOwnProperty\",\"constructor\"];forEach=function(object,callback){var isFunction=getClass.call(object)==functionClass,property,length;var hasProperty=!isFunction&&typeof object.constructor!=\"function\"&&objectTypes[typeof object.hasOwnProperty]&&object.hasOwnProperty||isProperty;for(property in object){if(!(isFunction&&property==\"prototype\")&&hasProperty.call(object,property)){callback(property)}}for(length=members.length;property=members[--length];hasProperty.call(object,property)&&callback(property));}}else if(size==2){forEach=function(object,callback){var members={},isFunction=getClass.call(object)==functionClass,property;for(property in object){if(!(isFunction&&property==\"prototype\")&&!isProperty.call(members,property)&&(members[property]=1)&&isProperty.call(object,property)){callback(property)}}}}else{forEach=function(object,callback){var isFunction=getClass.call(object)==functionClass,property,isConstructor;for(property in object){if(!(isFunction&&property==\"prototype\")&&isProperty.call(object,property)&&!(isConstructor=property===\"constructor\")){callback(property)}}if(isConstructor||isProperty.call(object,property=\"constructor\")){callback(property)}}}return forEach(object,callback)};if(!has(\"json-stringify\")){var Escapes={92:\"\\\\\\\\\",34:'\\\\\"',8:\"\\\\b\",12:\"\\\\f\",10:\"\\\\n\",13:\"\\\\r\",9:\"\\\\t\"};var leadingZeroes=\"000000\";var toPaddedString=function(width,value){return(leadingZeroes+(value||0)).slice(-width)};var unicodePrefix=\"\\\\u00\";var quote=function(value){var result='\"',index=0,length=value.length,useCharIndex=!charIndexBuggy||length>10;var symbols=useCharIndex&&(charIndexBuggy?value.split(\"\"):value);for(;index<length;index++){var charCode=value.charCodeAt(index);switch(charCode){case 8:case 9:case 10:case 12:case 13:case 34:case 92:result+=Escapes[charCode];break;default:if(charCode<32){result+=unicodePrefix+toPaddedString(2,charCode.toString(16));break}result+=useCharIndex?symbols[index]:value.charAt(index)}}return result+'\"'};var serialize=function(property,object,callback,properties,whitespace,indentation,stack){var value,className,year,month,date,time,hours,minutes,seconds,milliseconds,results,element,index,length,prefix,result;try{value=object[property]}catch(exception){}if(typeof value==\"object\"&&value){className=getClass.call(value);if(className==dateClass&&!isProperty.call(value,\"toJSON\")){if(value>-1/0&&value<1/0){if(getDay){date=floor(value/864e5);for(year=floor(date/365.2425)+1970-1;getDay(year+1,0)<=date;year++);for(month=floor((date-getDay(year,0))/30.42);getDay(year,month+1)<=date;month++);date=1+date-getDay(year,month);time=(value%864e5+864e5)%864e5;hours=floor(time/36e5)%24;minutes=floor(time/6e4)%60;seconds=floor(time/1e3)%60;milliseconds=time%1e3}else{year=value.getUTCFullYear();month=value.getUTCMonth();date=value.getUTCDate();hours=value.getUTCHours();minutes=value.getUTCMinutes();seconds=value.getUTCSeconds();milliseconds=value.getUTCMilliseconds()}value=(year<=0||year>=1e4?(year<0?\"-\":\"+\")+toPaddedString(6,year<0?-year:year):toPaddedString(4,year))+\"-\"+toPaddedString(2,month+1)+\"-\"+toPaddedString(2,date)+\"T\"+toPaddedString(2,hours)+\":\"+toPaddedString(2,minutes)+\":\"+toPaddedString(2,seconds)+\".\"+toPaddedString(3,milliseconds)+\"Z\"}else{value=null}}else if(typeof value.toJSON==\"function\"&&(className!=numberClass&&className!=stringClass&&className!=arrayClass||isProperty.call(value,\"toJSON\"))){value=value.toJSON(property)}}if(callback){value=callback.call(object,property,value)}if(value===null){return\"null\"}className=getClass.call(value);if(className==booleanClass){return\"\"+value}else if(className==numberClass){return value>-1/0&&value<1/0?\"\"+value:\"null\"}else if(className==stringClass){return quote(\"\"+value)}if(typeof value==\"object\"){for(length=stack.length;length--;){if(stack[length]===value){throw TypeError()}}stack.push(value);results=[];prefix=indentation;indentation+=whitespace;if(className==arrayClass){for(index=0,length=value.length;index<length;index++){element=serialize(index,value,callback,properties,whitespace,indentation,stack);results.push(element===undef?\"null\":element)}result=results.length?whitespace?\"[\\n\"+indentation+results.join(\",\\n\"+indentation)+\"\\n\"+prefix+\"]\":\"[\"+results.join(\",\")+\"]\":\"[]\"}else{forEach(properties||value,function(property){var element=serialize(property,value,callback,properties,whitespace,indentation,stack);if(element!==undef){results.push(quote(property)+\":\"+(whitespace?\" \":\"\")+element)}});result=results.length?whitespace?\"{\\n\"+indentation+results.join(\",\\n\"+indentation)+\"\\n\"+prefix+\"}\":\"{\"+results.join(\",\")+\"}\":\"{}\"}stack.pop();return result}};exports.stringify=function(source,filter,width){var whitespace,callback,properties,className;if(objectTypes[typeof filter]&&filter){if((className=getClass.call(filter))==functionClass){callback=filter}else if(className==arrayClass){properties={};for(var index=0,length=filter.length,value;index<length;value=filter[index++],(className=getClass.call(value),className==stringClass||className==numberClass)&&(properties[value]=1));}}if(width){if((className=getClass.call(width))==numberClass){if((width-=width%1)>0){for(whitespace=\"\",width>10&&(width=10);whitespace.length<width;whitespace+=\" \");}}else if(className==stringClass){whitespace=width.length<=10?width:width.slice(0,10)}}return serialize(\"\",(value={},value[\"\"]=source,value),callback,properties,whitespace,\"\",[])}}if(!has(\"json-parse\")){var fromCharCode=String.fromCharCode;var Unescapes={92:\"\\\\\",34:'\"',47:\"/\",98:\"\\b\",116:\"\t\",110:\"\\n\",102:\"\\f\",114:\"\\r\"};var Index,Source;var abort=function(){Index=Source=null;throw SyntaxError()};var lex=function(){var source=Source,length=source.length,value,begin,position,isSigned,charCode;while(Index<length){charCode=source.charCodeAt(Index);switch(charCode){case 9:case 10:case 13:case 32:Index++;break;case 123:case 125:case 91:case 93:case 58:case 44:value=charIndexBuggy?source.charAt(Index):source[Index];Index++;return value;case 34:for(value=\"@\",Index++;Index<length;){charCode=source.charCodeAt(Index);if(charCode<32){abort()}else if(charCode==92){charCode=source.charCodeAt(++Index);switch(charCode){case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:value+=Unescapes[charCode];Index++;break;case 117:begin=++Index;for(position=Index+4;Index<position;Index++){charCode=source.charCodeAt(Index);if(!(charCode>=48&&charCode<=57||charCode>=97&&charCode<=102||charCode>=65&&charCode<=70)){abort()}}value+=fromCharCode(\"0x\"+source.slice(begin,Index));break;default:abort()}}else{if(charCode==34){break}charCode=source.charCodeAt(Index);begin=Index;while(charCode>=32&&charCode!=92&&charCode!=34){charCode=source.charCodeAt(++Index)}value+=source.slice(begin,Index)}}if(source.charCodeAt(Index)==34){Index++;return value}abort();default:begin=Index;if(charCode==45){isSigned=true;charCode=source.charCodeAt(++Index)}if(charCode>=48&&charCode<=57){if(charCode==48&&(charCode=source.charCodeAt(Index+1),charCode>=48&&charCode<=57)){abort()}isSigned=false;for(;Index<length&&(charCode=source.charCodeAt(Index),charCode>=48&&charCode<=57);Index++);if(source.charCodeAt(Index)==46){position=++Index;for(;position<length&&(charCode=source.charCodeAt(position),charCode>=48&&charCode<=57);position++);if(position==Index){abort()}Index=position}charCode=source.charCodeAt(Index);if(charCode==101||charCode==69){charCode=source.charCodeAt(++Index);if(charCode==43||charCode==45){Index++}for(position=Index;position<length&&(charCode=source.charCodeAt(position),charCode>=48&&charCode<=57);position++);if(position==Index){abort()}Index=position}return+source.slice(begin,Index)}if(isSigned){abort()}if(source.slice(Index,Index+4)==\"true\"){Index+=4;return true}else if(source.slice(Index,Index+5)==\"false\"){Index+=5;return false}else if(source.slice(Index,Index+4)==\"null\"){Index+=4;return null}abort()}}return\"$\"};var get=function(value){var results,hasMembers;if(value==\"$\"){abort()}if(typeof value==\"string\"){if((charIndexBuggy?value.charAt(0):value[0])==\"@\"){return value.slice(1)}if(value==\"[\"){results=[];for(;;hasMembers||(hasMembers=true)){value=lex();if(value==\"]\"){break}if(hasMembers){if(value==\",\"){value=lex();if(value==\"]\"){abort()}}else{abort()}}if(value==\",\"){abort()}results.push(get(value))}return results}else if(value==\"{\"){results={};for(;;hasMembers||(hasMembers=true)){value=lex();if(value==\"}\"){break}if(hasMembers){if(value==\",\"){value=lex();if(value==\"}\"){abort()}}else{abort()}}if(value==\",\"||typeof value!=\"string\"||(charIndexBuggy?value.charAt(0):value[0])!=\"@\"||lex()!=\":\"){abort()}results[value.slice(1)]=get(lex())\n}return results}abort()}return value};var update=function(source,property,callback){var element=walk(source,property,callback);if(element===undef){delete source[property]}else{source[property]=element}};var walk=function(source,property,callback){var value=source[property],length;if(typeof value==\"object\"&&value){if(getClass.call(value)==arrayClass){for(length=value.length;length--;){update(value,length,callback)}}else{forEach(value,function(property){update(value,property,callback)})}}return callback.call(source,property,value)};exports.parse=function(source,callback){var result,value;Index=0;Source=\"\"+source;result=get(lex());if(lex()!=\"$\"){abort()}Index=Source=null;return callback&&getClass.call(callback)==functionClass?walk((value={},value[\"\"]=result,value),\"\",callback):result}}}exports[\"runInContext\"]=runInContext;return exports}if(freeExports&&!isLoader){runInContext(root,freeExports)}else{var nativeJSON=root.JSON,previousJSON=root[\"JSON3\"],isRestored=false;var JSON3=runInContext(root,root[\"JSON3\"]={noConflict:function(){if(!isRestored){isRestored=true;root.JSON=nativeJSON;root[\"JSON3\"]=previousJSON;nativeJSON=previousJSON=null}return JSON3}});root.JSON={parse:JSON3.parse,stringify:JSON3.stringify}}if(isLoader){define(function(){return JSON3})}}).call(this)}).call(this,typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:typeof global!==\"undefined\"?global:{})},{}],51:[function(_dereq_,module,exports){module.exports=toArray;function toArray(list,index){var array=[];index=index||0;for(var i=index||0;i<list.length;i++){array[i-index]=list[i]}return array}},{}]},{},[31])(31)});\n\n    \n      ;var weight = document.getElementById('weight');\n      var socket = io('http://{{ip}}:4001');\n      socket.on('getWeight', function(msg) {\n        weight.innerHTML = msg;\n    \n      }); \n    }, 1000);\n    </script>\n\n  </body>\n</html>\n","x":600.9166889190674,"y":1703.2499961853027,"wires":[["57cd55b3.4e6d7c"]]},{"id":"57cd55b3.4e6d7c","type":"http response","z":"e761e99f.3a2628","name":"","x":823.4166927337646,"y":1708.249997138977,"wires":[]},{"id":"b40c8911.c74b88","type":"function","z":"e761e99f.3a2628","name":"set ip","func":"msg.ip = global.get('ip');\nreturn msg;","outputs":1,"noerr":0,"x":420.91668701171875,"y":1715.749997138977,"wires":[["6b7c6ee5.26bd9"]]},{"id":"b73ad6aa.3fbca8","type":"http in","z":"e761e99f.3a2628","name":"","url":"/getsnapshot","method":"get","swaggerDoc":"","x":185,"y":1628.999997138977,"wires":[["59cc9c1e.5be534","f37259e4.643bb8"]]},{"id":"45f4d08e.3f283","type":"link out","z":"2f07d3e2.0f102c","name":"link photo","links":["b72bc48c.144be8","91faa459.b97e48","33ac0b34.77d4f4"],"x":565,"y":302,"wires":[]},{"id":"f3c29cef.c7152","type":"debug","z":"2f07d3e2.0f102c","name":"http","active":true,"console":"false","complete":"true","x":371,"y":956,"wires":[]},{"id":"71016364.7edb2c","type":"debug","z":"2f07d3e2.0f102c","name":"","active":true,"console":"false","complete":"true","x":354,"y":1295,"wires":[]},{"id":"230f2b44.761c34","type":"inject","z":"2f07d3e2.0f102c","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":true,"x":84,"y":309,"wires":[["7c73745d.7db76c"]]},{"id":"7c73745d.7db76c","type":"delay","z":"2f07d3e2.0f102c","name":"","pauseType":"delay","timeout":"10","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":222,"y":377,"wires":[["c62be96d.e8b788","5fd9240e.54409c","8612ac2b.6ac8e"]]},{"id":"edf63165.268d8","type":"debug","z":"2f07d3e2.0f102c","name":"","active":true,"console":"false","complete":"true","x":761,"y":1185,"wires":[]},{"id":"31706f42.b9549","type":"inject","z":"2f07d3e2.0f102c","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":127.4444465637207,"y":1343.8889026641846,"wires":[["c75e8437.ea0a28"]]},{"id":"c75e8437.ea0a28","type":"http request","z":"2f07d3e2.0f102c","name":"","method":"GET","ret":"bin","url":"https://retail.by/upload/resize_cache/iblock/b28/500_250_040cd750bba9870f18aada2478b24840a/984.jpg","tls":"","x":296.3333320617676,"y":1344.5555562973022,"wires":[["860b1954.b307b8"]]},{"id":"eb49023a.e3dbd","type":"debug","z":"2f07d3e2.0f102c","name":"","active":true,"console":"false","complete":"true","x":644.8888893127441,"y":1385.9999599456787,"wires":[]},{"id":"860b1954.b307b8","type":"base64","z":"2f07d3e2.0f102c","name":"","action":"","property":"payload","x":483.22220611572266,"y":1391.8889293670654,"wires":[["eb49023a.e3dbd"]]},{"id":"425b6e5e.f02bf","type":"http request","z":"2f07d3e2.0f102c","name":"","method":"GET","ret":"bin","url":"http://www.vesisib.ru/upload/resize_cache/iblock/6a9/400_400_2/vsa_r60000_12.jpg","tls":"","x":293.2222213745117,"y":1388.8889465332031,"wires":[["860b1954.b307b8"]]},{"id":"8604fe85.23d26","type":"inject","z":"2f07d3e2.0f102c","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":121.77778625488281,"y":1382.5555171966553,"wires":[["425b6e5e.f02bf"]]},{"id":"d933303b.0052a","type":"http request","z":"2f07d3e2.0f102c","name":"","method":"GET","ret":"bin","url":"https://opt-1299796.ssl.1c-bitrix-cdn.ru/upload/iblock/b71/b71e0fb639bcdf5b750a2c66db171593.jpg?155873421683672","tls":"","x":290.88888931274414,"y":1431.4443941116333,"wires":[["860b1954.b307b8"]]},{"id":"fceac0.951a654","type":"inject","z":"2f07d3e2.0f102c","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":123.8888931274414,"y":1426.222240447998,"wires":[["d933303b.0052a"]]},{"id":"b7207ade.2878f8","type":"http request","z":"2f07d3e2.0f102c","name":"","method":"GET","ret":"bin","url":"https://ireland.apollo.olxcdn.com/v1/files/bqx5qijsmuuj-UA/image;s=1000x700","tls":"","x":293.2222328186035,"y":1465.6666460037231,"wires":[["860b1954.b307b8"]]},{"id":"7fec2b90.e1d434","type":"inject","z":"2f07d3e2.0f102c","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":127.33332824707031,"y":1467.1111583709717,"wires":[["b7207ade.2878f8"]]},{"id":"276411e0.28e5be","type":"random","z":"2f07d3e2.0f102c","name":"","low":"1","high":"4","inte":"true","property":"random","x":230,"y":1590,"wires":[["7538505b.eb546"]]},{"id":"7538505b.eb546","type":"switch","z":"2f07d3e2.0f102c","name":"","property":"random","propertyType":"msg","rules":[{"t":"eq","v":"1","vt":"num"},{"t":"eq","v":"2","vt":"num"},{"t":"eq","v":"3","vt":"num"},{"t":"eq","v":"4","vt":"num"}],"checkall":"true","outputs":4,"x":363,"y":1586,"wires":[["bc582ddc.4c32a"],["fa9598e.82d7c68"],["5ddb69dc.f6ad78"],["f64def48.899e7"]]},{"id":"bc582ddc.4c32a","type":"http request","z":"2f07d3e2.0f102c","name":"","method":"GET","ret":"bin","url":"https://retail.by/upload/resize_cache/iblock/b28/500_250_040cd750bba9870f18aada2478b24840a/984.jpg","tls":"","x":526,"y":1532,"wires":[["7641302a.7a139"]]},{"id":"fa9598e.82d7c68","type":"http request","z":"2f07d3e2.0f102c","name":"","method":"GET","ret":"bin","url":"http://www.vesisib.ru/upload/resize_cache/iblock/6a9/400_400_2/vsa_r60000_12.jpg","tls":"","x":527,"y":1570,"wires":[["7641302a.7a139"]]},{"id":"5ddb69dc.f6ad78","type":"http request","z":"2f07d3e2.0f102c","name":"","method":"GET","ret":"bin","url":"https://opt-1299796.ssl.1c-bitrix-cdn.ru/upload/iblock/b71/b71e0fb639bcdf5b750a2c66db171593.jpg?155873421683672","tls":"","x":527,"y":1604,"wires":[["7641302a.7a139"]]},{"id":"f64def48.899e7","type":"http request","z":"2f07d3e2.0f102c","name":"","method":"GET","ret":"bin","url":"https://ireland.apollo.olxcdn.com/v1/files/bqx5qijsmuuj-UA/image;s=1000x700","tls":"","x":520,"y":1642,"wires":[["7641302a.7a139"]]},{"id":"94f4c47f.2f3968","type":"inject","z":"2f07d3e2.0f102c","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":86,"y":1587,"wires":[["276411e0.28e5be"]]},{"id":"7641302a.7a139","type":"base64","z":"2f07d3e2.0f102c","name":"","action":"","property":"payload","x":737.3333282470703,"y":1587.6667108535767,"wires":[["d9b91a76.3f85a8"]]},{"id":"d9b91a76.3f85a8","type":"function","z":"2f07d3e2.0f102c","name":"","func":"var sn = {\n            snapshot: msg.payload\n        }   \nmsg.payload = sn;\nreturn msg;","outputs":1,"noerr":0,"x":887.7777404785156,"y":1587.7777042388916,"wires":[["f53bceb5.922a7","ba097be9.c24668"]]},{"id":"f53bceb5.922a7","type":"debug","z":"2f07d3e2.0f102c","name":"","active":true,"console":"false","complete":"true","x":1035.5554695129395,"y":1585.5555381774902,"wires":[]},{"id":"4d1c78c3.f05878","type":"debug","z":"7d24c700.ff9778","name":"","active":true,"console":"false","complete":"false","x":718.8888888888889,"y":123.33333333333333,"wires":[]},{"id":"604ff1b1.6fe79","type":"debug","z":"7d24c700.ff9778","name":"","active":true,"console":"false","complete":"false","x":737.7777709960938,"y":181.11109924316406,"wires":[]},{"id":"4c47b0c2.dc165","type":"debug","z":"7d24c700.ff9778","name":"","active":true,"console":"false","complete":"false","x":747.7777709960938,"y":246.66665649414062,"wires":[]},{"id":"49ed8ccc.81c9c4","type":"debug","z":"7d24c700.ff9778","name":"","active":true,"console":"false","complete":"false","x":750,"y":346.6666564941406,"wires":[]},{"id":"29a08858.ebcc98","type":"debug","z":"7d24c700.ff9778","name":"","active":true,"console":"false","complete":"false","x":753.3333358764648,"y":421.11108779907227,"wires":[]},{"id":"c3836747.d92488","type":"debug","z":"7d24c700.ff9778","name":"","active":true,"console":"false","complete":"false","x":746.6666259765625,"y":492.2221984863281,"wires":[]},{"id":"e2989c11.9373b","type":"function","z":"e761e99f.3a2628","name":"","func":"var max = 1;\nvar min = 101;\n\nvar img = (Math.random() * (max - min) + min).toFixed();\n\nmsg.payload = \"/distr/data/noCar/\" + img + \".jpg\";\nmsg.filename = msg.payload;\nreturn msg;\n\n","outputs":1,"noerr":0,"x":623.4166946411133,"y":1571.3890504837036,"wires":[["8d4e9559.1daed8"]]},{"id":"8d4e9559.1daed8","type":"file in","z":"e761e99f.3a2628","name":"noCar","filename":"","format":"","x":760.0833358764648,"y":1574.722424507141,"wires":[["1556779f.fad268"]]},{"id":"2f6f4db.3e9dbb2","type":"function","z":"e761e99f.3a2628","name":"","func":"var max = 1;\nvar min = 15;\n\nvar img = (Math.random() * (max - min) + min).toFixed();\n\nmsg.payload = \"/distr/data/front/\" + img + \".jpg\";\nmsg.filename = msg.payload;\nreturn msg;\n\n","outputs":1,"noerr":0,"x":619.9444198608398,"y":1607.6391878128052,"wires":[["55e09bb5.5b9b34"]]},{"id":"55e09bb5.5b9b34","type":"file in","z":"e761e99f.3a2628","name":"front","filename":"","format":"","x":760.3610458374023,"y":1613.4725618362427,"wires":[["1556779f.fad268"]]},{"id":"59cc9c1e.5be534","type":"switch","z":"e761e99f.3a2628","name":"","property":"w_demo","propertyType":"flow","rules":[{"t":"eq","v":"0","vt":"num"},{"t":"gt","v":"0","vt":"num"}],"checkall":"true","outputs":2,"x":480.9166946411133,"y":1596.666760444641,"wires":[["e2989c11.9373b"],["2f6f4db.3e9dbb2"]]},{"id":"b45e1d71.2fdb9","type":"function","z":"e761e99f.3a2628","name":"w_demo","func":"flow.set(\"w_demo\", msg.payload); //для знімків\nreturn msg;","outputs":1,"noerr":0,"x":236.0833740234375,"y":452.8333625793457,"wires":[[]]},{"id":"c3fd125d.1bce9","type":"http response","z":"e761e99f.3a2628","name":"","x":1052.1667175292969,"y":1572.916898727417,"wires":[]},{"id":"19231cdd.e72d03","type":"function","z":"e761e99f.3a2628","name":"","func":"var sn = {\n            snapshot: msg.payload\n        }   \nmsg.payload = sn;\nreturn msg;","outputs":1,"noerr":0,"x":910.9167137145996,"y":1612.9168977737427,"wires":[["c3fd125d.1bce9","5fd2a054.53bb8"]]},{"id":"1556779f.fad268","type":"base64","z":"e761e99f.3a2628","name":"","action":"","property":"payload","x":902.1667137145996,"y":1572.9168977737427,"wires":[["19231cdd.e72d03"]]},{"id":"46e28095.e8f95","type":"function","z":"e761e99f.3a2628","name":"","func":"var max = 1;\nvar min = 101;\n\nvar img = (Math.random() * (max - min) + min).toFixed();\n\nmsg.payload = \"/distr/data/noCar/\" + img + \".jpg\";\nmsg.filename = msg.payload;\nreturn msg;\n\n","outputs":1,"noerr":0,"x":1720.0833587646484,"y":1019.0833625793457,"wires":[["c8a14736.629298"]]},{"id":"c8a14736.629298","type":"file in","z":"e761e99f.3a2628","name":"noCar","filename":"","format":"","x":1856.75,"y":1022.4167366027832,"wires":[["8579059d.fc1d08"]]},{"id":"b744b072.571cd","type":"function","z":"e761e99f.3a2628","name":"","func":"var max = 1;\nvar min = 15;\n\nvar img = (Math.random() * (max - min) + min).toFixed();\n\nmsg.payload = \"/distr/data/front/\" + img + \".jpg\";\nmsg.filename = msg.payload;\nreturn msg;\n\n","outputs":1,"noerr":0,"x":1720.361083984375,"y":1071.5834999084473,"wires":[["cddb9164.aed86"]]},{"id":"cddb9164.aed86","type":"file in","z":"e761e99f.3a2628","name":"front","filename":"","format":"","x":1857.0277252197266,"y":1074.9168739318848,"wires":[["8579059d.fc1d08"]]},{"id":"961a9dd9.74e8c","type":"switch","z":"e761e99f.3a2628","name":"","property":"w_demo","propertyType":"flow","rules":[{"t":"eq","v":"0","vt":"num"},{"t":"gt","v":"0","vt":"num"}],"checkall":"true","outputs":2,"x":1571.0833854675293,"y":1045.6110877990723,"wires":[["46e28095.e8f95"],["b744b072.571cd"]]},{"id":"84208bfb.776b88","type":"function","z":"e761e99f.3a2628","name":"","func":"var sn = {\n            snapshot: msg.payload\n        }   \nmsg.payload = sn;\nreturn msg;","outputs":1,"noerr":0,"x":2138.5833740234375,"y":1047.6111335754395,"wires":[["ee730334.20441","578917f6.fbe6e8"]]},{"id":"8579059d.fc1d08","type":"base64","z":"e761e99f.3a2628","name":"","action":"","property":"payload","x":2010.0833740234375,"y":1048.1111335754395,"wires":[["84208bfb.776b88"]]},{"id":"f37259e4.643bb8","type":"debug","z":"e761e99f.3a2628","name":"","active":false,"console":"false","complete":"true","x":468.4166793823242,"y":1637.916745185852,"wires":[]},{"id":"5fd2a054.53bb8","type":"debug","z":"e761e99f.3a2628","name":"","active":false,"console":"false","complete":"true","x":1053.4167175292969,"y":1612.9167776107788,"wires":[]},{"id":"578917f6.fbe6e8","type":"debug","z":"e761e99f.3a2628","name":"Camera 2","active":false,"console":"true","complete":"payload","x":2356.3333740234375,"y":1075.3333625793457,"wires":[]},{"id":"8832c901.4ac268","type":"debug","z":"e761e99f.3a2628","name":"Camera 3","active":true,"console":"true","complete":"payload","x":2391.3333740234375,"y":598.3333625793457,"wires":[]},{"id":"ac24e8e7.928ee8","type":"debug","z":"e761e99f.3a2628","name":"IN event","active":false,"console":"false","complete":"payload","x":1256.3333740234375,"y":865.3333625793457,"wires":[]},{"id":"fb93c58.4e65e38","type":"http in","z":"e761e99f.3a2628","name":"","url":"/getsnapshot_2","method":"get","swaggerDoc":"","x":185.66668701171875,"y":1466.666745185852,"wires":[["1f93cfdc.19c1d"]]},{"id":"4ea12bdb.2abc14","type":"function","z":"e761e99f.3a2628","name":"","func":"var max = 1;\nvar min = 15;\n\nvar img = (Math.random() * (max - min) + min).toFixed();\n\nmsg.payload = \"/distr/data/front/\" + img + \".jpg\";\nmsg.filename = msg.payload;\nreturn msg;\n\n","outputs":1,"noerr":0,"x":624.4166965484619,"y":1480.4167623519897,"wires":[["bcae37fb.af5398"]]},{"id":"bcae37fb.af5398","type":"file in","z":"e761e99f.3a2628","name":"front","filename":"","format":"","x":761.083330154419,"y":1486.2501373291016,"wires":[["b3351420.5e4618"]]},{"id":"1f93cfdc.19c1d","type":"switch","z":"e761e99f.3a2628","name":"","property":"w_demo","propertyType":"flow","rules":[{"t":"eq","v":"0","vt":"num"},{"t":"gt","v":"0","vt":"num"}],"checkall":"true","outputs":2,"x":477.888973236084,"y":1470.694333076477,"wires":[["1d63d964.6d45e7"],["4ea12bdb.2abc14"]]},{"id":"b3351420.5e4618","type":"base64","z":"e761e99f.3a2628","name":"","action":"","property":"payload","x":917.8889751434326,"y":1471.9444570541382,"wires":[["48112c29.25fff4"]]},{"id":"1d63d964.6d45e7","type":"function","z":"e761e99f.3a2628","name":"","func":"var max = 1;\nvar min = 101;\n\nvar img = (Math.random() * (max - min) + min).toFixed();\n\nmsg.payload = \"/distr/data/noCar/\" + img + \".jpg\";\nmsg.filename = msg.payload;\nreturn msg;\n\n","outputs":1,"noerr":0,"x":624.1389636993408,"y":1449.1666078567505,"wires":[["4145d3de.e54d8c"]]},{"id":"4145d3de.e54d8c","type":"file in","z":"e761e99f.3a2628","name":"noCar","filename":"","format":"","x":760.8056049346924,"y":1452.499981880188,"wires":[["b3351420.5e4618"]]},{"id":"48112c29.25fff4","type":"function","z":"e761e99f.3a2628","name":"","func":"//var ph = \"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAN1wAADdcBQiibeAAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAADtSURBVFiFY+wRkPnPMICAaSAtH3XAqANGHcDAwMDAQk3Dit8/Jkpdr6AsdR0gY2nGwMjMTJZeih1gVpDNYFtfQbZ+itKAgrM9g01tGcPtLTsYVvmGkWUG2SEgoCjP4D1nKsPbm7cZtqfnM/z+9o0yB5CSgFi5uBj8l85lYGBgYNgYnQy3HDlxkewAYoGsjSWDYXoSg7C6KsO6sDiGD/cfkmwpRQ4I27yKgYGBgeFwYwfDg70HKbKcLAes8g1j+P/3L8OT46cotpwsBzw+cpwqFsMA42iLaKAdMOCV0YCHwKgDBtwBo+XAqANGHQAADwk7UsL4LxEAAAAASUVORK5CYII=\";\n\n\nvar sn = {\n            snapshot: msg.payload\n            //snapshot:ph\n        } ; \n        \n        \n        \n        \nmsg.payload = sn;\nreturn msg;","outputs":1,"noerr":0,"x":912.888994216919,"y":1508.1944723129272,"wires":[["39738c61.157ac4","f68deb0f.e85a08"]]},{"id":"39738c61.157ac4","type":"http response","z":"e761e99f.3a2628","name":"","x":1090.3889770507812,"y":1473.1944570541382,"wires":[]},{"id":"f68deb0f.e85a08","type":"debug","z":"e761e99f.3a2628","name":"","active":false,"console":"false","complete":"true","x":1102.8889980316162,"y":1513.1943521499634,"wires":[]},{"id":"e4b65256.abefa","type":"http in","z":"e761e99f.3a2628","name":"Serial snapshot","url":"/scale/7FF53459E8E9131CE0533300000ABADC/getsnapshot","method":"get","swaggerDoc":"","x":180,"y":1380,"wires":[["3f54c45b.9f937c"]]},{"id":"3f54c45b.9f937c","type":"switch","z":"e761e99f.3a2628","name":"","property":"w_demo","propertyType":"flow","rules":[{"t":"eq","v":"0","vt":"num"},{"t":"gt","v":"0","vt":"num"}],"checkall":"true","outputs":2,"x":479.888973236084,"y":1371.694333076477,"wires":[["558fb91d.84f618"],["58a80665.8df4a8"]]},{"id":"558fb91d.84f618","type":"function","z":"e761e99f.3a2628","name":"","func":"var max = 1;\nvar min = 101;\n\nvar img = (Math.random() * (max - min) + min).toFixed();\n\nmsg.payload = \"/distr/data/noCar/\" + img + \".jpg\";\nmsg.filename = msg.payload;\nreturn msg;\n\n","outputs":1,"noerr":0,"x":626.1389636993408,"y":1350.1666078567505,"wires":[["76dccaf8.800944"]]},{"id":"58a80665.8df4a8","type":"function","z":"e761e99f.3a2628","name":"","func":"var max = 1;\nvar min = 15;\n\nvar img = (Math.random() * (max - min) + min).toFixed();\n\nmsg.payload = \"/distr/data/front/\" + img + \".jpg\";\nmsg.filename = msg.payload;\nreturn msg;\n\n","outputs":1,"noerr":0,"x":626.4166965484619,"y":1381.4167623519897,"wires":[["6a301289.1f625c"]]},{"id":"76dccaf8.800944","type":"file in","z":"e761e99f.3a2628","name":"noCar","filename":"","format":"","x":762.8056049346924,"y":1353.499981880188,"wires":[["5598ea93.92e014"]]},{"id":"6a301289.1f625c","type":"file in","z":"e761e99f.3a2628","name":"front","filename":"","format":"","x":763.083330154419,"y":1387.2501373291016,"wires":[["5598ea93.92e014"]]},{"id":"5598ea93.92e014","type":"base64","z":"e761e99f.3a2628","name":"","action":"","property":"payload","x":919.8889751434326,"y":1372.9444570541382,"wires":[["cb2279e9.4a19e8"]]},{"id":"cb2279e9.4a19e8","type":"function","z":"e761e99f.3a2628","name":"","func":"//var ph = \"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAN1wAADdcBQiibeAAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAADtSURBVFiFY+wRkPnPMICAaSAtH3XAqANGHcDAwMDAQk3Dit8/Jkpdr6AsdR0gY2nGwMjMTJZeih1gVpDNYFtfQbZ+itKAgrM9g01tGcPtLTsYVvmGkWUG2SEgoCjP4D1nKsPbm7cZtqfnM/z+9o0yB5CSgFi5uBj8l85lYGBgYNgYnQy3HDlxkewAYoGsjSWDYXoSg7C6KsO6sDiGD/cfkmwpRQ4I27yKgYGBgeFwYwfDg70HKbKcLAes8g1j+P/3L8OT46cotpwsBzw+cpwqFsMA42iLaKAdMOCV0YCHwKgDBtwBo+XAqANGHQAADwk7UsL4LxEAAAAASUVORK5CYII=\";\n\n\nvar sn = {\n            snapshot: msg.payload\n            //snapshot:ph\n        } ; \n        \n        \n        \n        \nmsg.payload = sn;\nreturn msg;","outputs":1,"noerr":0,"x":914.888994216919,"y":1409.1944723129272,"wires":[["d8f4f48c.c35c38","4cf682be.f3157c"]]},{"id":"d8f4f48c.c35c38","type":"http response","z":"e761e99f.3a2628","name":"","x":1092.3889770507812,"y":1374.1944570541382,"wires":[]},{"id":"4cf682be.f3157c","type":"debug","z":"e761e99f.3a2628","name":"","active":false,"console":"false","complete":"true","x":1104.8889980316162,"y":1414.1943521499634,"wires":[]},{"id":"ff5c8ad6.be1158","type":"function","z":"edffc925.6e1988","name":"time_rasp","func":"var time = new Date();\nflow.set(\"time_rasp\", time);\n\nreturn msg;","outputs":1,"noerr":0,"x":261,"y":392,"wires":[["6f92bcee.da4324"]]},{"id":"e7ead0a8.99178","type":"inject","z":"edffc925.6e1988","name":"","topic":"","payload":"","payloadType":"date","repeat":"1","crontab":"","once":false,"x":103,"y":396,"wires":[["ff5c8ad6.be1158"]]},{"id":"6f92bcee.da4324","type":"function","z":"edffc925.6e1988","name":"sub time","func":"var weigth_time = flow.get(\"weigth_time\");\nvar time_rasp = flow.get(\"time_rasp\");\n\nvar sub = time_rasp - weigth_time;\n//msg.payload = {\n//    sub: time_rasp - weigth_time,\n//    weigth_time: weigth_time,\n//    time_rasp: time_rasp\n//}\n\n    if(sub > 5000){\n    msg.payload = 0;\n    return msg;\n    }\n","outputs":1,"noerr":0,"x":440,"y":388,"wires":[["bd1a4c6b.07adc"]]},{"id":"bd1a4c6b.07adc","type":"debug","z":"edffc925.6e1988","name":"","active":false,"console":"false","complete":"false","x":587,"y":397,"wires":[]},{"id":"6fa4257a.e9d4fc","type":"function","z":"7f6ea0f.1a6ab6","name":"time_rasp","func":"var time = new Date();\nflow.set(\"time_rasp\", time);\n\nreturn msg;","outputs":1,"noerr":0,"x":287,"y":405,"wires":[["50d166a4.5e4308"]]},{"id":"6ea2c978.caef88","type":"inject","z":"7f6ea0f.1a6ab6","name":"","topic":"","payload":"","payloadType":"date","repeat":"1","crontab":"","once":false,"x":129,"y":409,"wires":[["6fa4257a.e9d4fc"]]},{"id":"50d166a4.5e4308","type":"function","z":"7f6ea0f.1a6ab6","name":"sub time","func":"var weigth_time = flow.get(\"weigth_time\");\nvar time_rasp = flow.get(\"time_rasp\");\n\nvar sub = time_rasp - weigth_time;\n//msg.payload = {\n//    sub: time_rasp - weigth_time,\n//    weigth_time: weigth_time,\n//    time_rasp: time_rasp\n//}\n\n    if(sub > 5000){\n    msg.payload = 0;\n    return msg;\n    }\n","outputs":1,"noerr":0,"x":466,"y":401,"wires":[["6a8ea2aa.8f960c"]]},{"id":"6a8ea2aa.8f960c","type":"debug","z":"7f6ea0f.1a6ab6","name":"","active":true,"console":"false","complete":"false","x":613,"y":410,"wires":[]},{"id":"5f455aca.d5c284","type":"debug","z":"e761e99f.3a2628","name":"empty waybill","active":false,"console":"true","complete":"true","x":911.3333740234375,"y":443.3333625793457,"wires":[]},{"id":"97d876a9.5c1448","type":"inject","z":"e761e99f.3a2628","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":720.0000114440918,"y":58.75,"wires":[["27b72a96.9c37e6"]]},{"id":"27b72a96.9c37e6","type":"function","z":"e761e99f.3a2628","name":"","func":"flow.set('transaction', new Date());\nreturn msg;","outputs":1,"noerr":0,"x":857.5,"y":61.25,"wires":[[]]},{"id":"4fac5e67.67719","type":"debug","z":"cd04ff99.5a648","name":"","active":true,"console":"false","complete":"false","x":658,"y":1345,"wires":[]},{"id":"a52301e0.247f6","type":"switch","z":"cd04ff99.5a648","name":"switch minus in","property":"is_minus","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":396.66666412353516,"y":481.6666593551636,"wires":[["28cf155c.3cbe5a"]]},{"id":"28cf155c.3cbe5a","type":"function","z":"cd04ff99.5a648","name":"move in minus","func":"msg.event_id = flow.get('event_move_in_minus_id');\nmsg.description = 'Заїзд із мінусом. ' + msg.prevWeight +' кг.';\n\nreturn msg;","outputs":1,"noerr":0,"x":605.0000038146973,"y":398.33331775665283,"wires":[["58f2d037.aff6b"]]},{"id":"374b3976.178ad6","type":"function","z":"cd04ff99.5a648","name":"main module old","func":"var prevWeight = flow.get('prevWeight');\nvar transaction = flow.get('transaction');\nvar transactionData = flow.get('transactionData');\nvar transactionMaxWeight = flow.get('transactionMaxWeight');\nvar transactionHasMaxWeight = flow.get('transactionHasMaxWeight');\nvar transactionHasMinWeight = flow.get('transactionHasMinWeight');\nvar transactionHasMaxDuration = flow.get('transactionHasMaxDuration');\nvar waybill = flow.get('transactionWaybill');\nvar weight = msg.payload;\nvar stableSize = 5;\nvar duration = 0;\nvar maxWeight = flow.get('maxWeight');\nvar maxDuration = flow.get('maxDuration');\nvar prevTransaction = transaction;\nvar minWeight = flow.get('minWeight');\nvar minTriggerWeight = flow.get('minTriggerWeight');\nvar driverWeight = flow.get('driverWeight');\n\n//transaction\nif (prevWeight === null){\n    prevWeight = msg.payload;    \n}else{\n    if((prevWeight <= 0) && (weight > 0) && (weight > minTriggerWeight)){\n        //start of transaction\n        transaction = Date.now();\n        msg.on = true;\n        flow.set('transaction',transaction);\n    }else if((prevWeight > 0) && (weight <=0) && (transaction)){\n        //transaction = 0;\n        msg.on = false;\n        transactionData = [];\n        flow.set('transaction',0);\n        flow.set('transactionMaxWeight',null);\n        flow.set('transactionHasMaxWeight',null);\n        flow.set('transactionHasMinWeight',null);\n        flow.set('transactionHasMaxDuration',null);\n        flow.set('transactionWaybill',null);\n        flow.set('transactionMetadata',null);\n        flow.set('transactionDriverIn',null);\n    }else if((transaction === null) && (weight>0) && (weight > minTriggerWeight)){\n        transaction = Date.now();\n        flow.set('transaction',transaction);\n    }\n}\n\nif (transaction > 0){\n    transactionData.push(weight);    \n\n    //stable\n    if(transactionData.length > stableSize+1){\n        var stabletmp = true;\n        for (var i = transactionData.length-1; i > transactionData.length-1-stableSize; i--){\n            if (transactionData[i] !== transactionData[i-1]){\n                stabletmp = false;\n                msg.stable = stabletmp;\n                break;\n            }\n            msg.stable = stabletmp;\n        }\n    }else{\n        msg.stable = false;\n    }\n\n    //duration & transactionMaxWeight\n    duration = (Number(Date.now()) - Number(transaction));\n    if( (weight>transactionMaxWeight) || (transactionMaxWeight === null)){\n        transactionMaxWeight = weight;\n        flow.set(\"transactionMaxWeight\",transactionMaxWeight);\n    }\n    \n    if(!transactionHasMaxWeight && weight > maxWeight){\n        msg.transactionHasMaxWeight = true;\n        flow.set('transactionHasMaxWeight',true);\n    }\n    \n    if(!transactionHasMinWeight && weight < minWeight){\n        msg.transactionHasMinWeight = true;\n        flow.set('transactionHasMinWeight',true);\n    }\n    \n    //max duartion\n    if(!transactionHasMaxDuration && duration > maxDuration){\n        msg.transactionHasMaxDuration = true;\n        flow.set('transactionHasMaxDuration',true);\n    }\n    \n    //driver In Out\n    if (prevWeight-weight){\n        \n    }\n}\n\n//result\nmsg.metadata = {\n    'weight':weight,\n    'prevWeight':prevWeight,\n    'prevTransaction':prevTransaction,\n    'transaction':transaction,\n    'on':msg.on,\n    'transactionDataCount':transactionData.length,\n    'stable':msg.stable,\n    'duration':Math.round(duration/1000),\n    'transactionMaxWeight':transactionMaxWeight,\n    'waybill':waybill,\n    'perimetr':true,\n    'weight1':msg.weight1,\n    'weight2':msg.weight2,\n    'weight_center':msg.weight_center,\n    'driverInCar':false\n}\nflow.set('transactionData',transactionData);\nflow.set('prevWeight',weight);\nflow.set('transactionMetadata',msg.metadata);\nflow.set('lasttimedata', new Date());\nreturn msg;","outputs":1,"noerr":0,"x":1229.9999389648438,"y":31.666667938232422,"wires":[[]]},{"id":"9c7e1108.57e7b","type":"comment","z":"cd04ff99.5a648","name":"Відключив відправку події по цим вагам 21.09.2020","info":"Андрій попросив відключити відравку \nподії по цим вагам","x":1100,"y":640,"wires":[]},{"id":"4a4fd5c3.ab003c","type":"inject","z":"3cdb3dc4.4ec0b2","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":112,"y":47,"wires":[["f0e1fc4d.afc5"]]},{"id":"f0e1fc4d.afc5","type":"function","z":"3cdb3dc4.4ec0b2","name":"","func":"msg.payload = Buffer.from(\"6b5f91\", \"hex\");\nreturn msg;","outputs":1,"noerr":0,"x":242,"y":48,"wires":[["412549f7.d554d8","d0f8e37c.d2b86"]]},{"id":"412549f7.d554d8","type":"debug","z":"3cdb3dc4.4ec0b2","name":"","active":false,"console":"false","complete":"false","x":418,"y":50,"wires":[]},{"id":"d0f8e37c.d2b86","type":"function","z":"3cdb3dc4.4ec0b2","name":"","func":"var buffer = msg.payload;\nvar number = buffer[0].toString(\"16\") + buffer[1].toString(\"16\") + buffer[2].toString(\"16\");\n\n\n\nvar dec = parseInt(number,16).toString()\nmsg.payload = dec;\nreturn msg;","outputs":1,"noerr":0,"x":349,"y":125,"wires":[["efd88999.76fe68"]]},{"id":"efd88999.76fe68","type":"debug","z":"3cdb3dc4.4ec0b2","name":"","active":true,"console":"false","complete":"false","x":495,"y":124,"wires":[]},{"id":"2f2ac420.e6380c","type":"inject","z":"3cdb3dc4.4ec0b2","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":186,"y":278,"wires":[["191a9db4.b84652"]]},{"id":"191a9db4.b84652","type":"function","z":"3cdb3dc4.4ec0b2","name":"","func":"msg.payload = Date.now() - 86400000;\nreturn msg;","outputs":1,"noerr":0,"x":316,"y":279,"wires":[["9491f345.aed1a"]]},{"id":"9491f345.aed1a","type":"debug","z":"3cdb3dc4.4ec0b2","name":"","active":true,"console":"false","complete":"false","x":492,"y":281,"wires":[]},{"id":"aecf9246.daa51","type":"inject","z":"3cdb3dc4.4ec0b2","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":185,"y":357,"wires":[["394ec406.e8213c"]]},{"id":"394ec406.e8213c","type":"function","z":"3cdb3dc4.4ec0b2","name":"","func":"msg.payload = Date.now();\nreturn msg;","outputs":1,"noerr":0,"x":315,"y":358,"wires":[["9491f345.aed1a"]]},{"id":"f69124c2.29e168","type":"http request","z":"e761e99f.3a2628","name":"send a snapshot","method":"POST","ret":"txt","url":"","tls":"145ca816.bc4f08","x":2200.3333740234375,"y":868.3333625793457,"wires":[["83b67e96.e2358"]]},{"id":"628f275b.3eb168","type":"function","z":"e761e99f.3a2628","name":"","func":"msg.url = \"http://176.9.9.121:8080/ords/demo_ettn/iot_cli/events/log\";\nreturn msg;","outputs":1,"noerr":0,"x":2032.3333740234375,"y":869.3333625793457,"wires":[["f69124c2.29e168"]]},{"id":"46b997a6.0902b8","type":"comment","z":"e761e99f.3a2628","name":"Відправка на сервер Польща","info":"","x":2113,"y":755,"wires":[]},{"id":"b591d323.9951d","type":"debug","z":"891702d3.77cb6","name":"IN device config","active":false,"console":"true","complete":"payload","x":902.3333740234375,"y":188.49999904632568,"wires":[]},{"id":"4fdce77a.99d798","type":"file","z":"891702d3.77cb6","name":"deivce_config","filename":"deivce_config.json","appendNewline":true,"createDir":false,"overwriteFile":"true","x":409.3333740234375,"y":192.49999904632568,"wires":[]},{"id":"cd425ee.2604da","type":"exec","z":"891702d3.77cb6","command":"cat /proc/cpuinfo","addpay":true,"append":"| grep Serial","useSpawn":"","timer":"5","name":"","x":379.3333740234375,"y":72.49999904632568,"wires":[["9b42c84c.d37fa8","dba69cb7.1a468"],[],[]]},{"id":"85c3958e.112998","type":"function","z":"891702d3.77cb6","name":"main config","func":"flow.set('prevWeight',null);\nflow.set('transaction',null);\nflow.set('transactionData',[]);\nflow.set('transactionMaxWeight',null);\nflow.set('transactionHasMinWeight',null);\nflow.set('transactionHasMaxWeight',null);\nflow.set('transactionHasMaxDuration',null);\nflow.set('lasttimedata', new Date());\nflow.set('checkHealth',null);\nflow.set('transactionWaybill',null);\n\nreturn msg;\n","outputs":1,"noerr":0,"x":399.3333740234375,"y":272.4999990463257,"wires":[[]]},{"id":"ff68eeec.fecb5","type":"inject","z":"891702d3.77cb6","name":"","topic":"","payload":"","payloadType":"str","repeat":"","crontab":"","once":true,"x":127.3333740234375,"y":254.49999904632568,"wires":[["a6eb15ec.d862b8","85c3958e.112998"]]},{"id":"afbc75aa.7eaac8","type":"http in","z":"891702d3.77cb6","name":"","url":"/firmware_4","method":"post","swaggerDoc":"","x":169.3333740234375,"y":192.49999904632568,"wires":[["4fdce77a.99d798"]]},{"id":"a6eb15ec.d862b8","type":"file in","z":"891702d3.77cb6","name":"deivce_config","filename":"deivce_config.json","format":"utf8","x":409.3333740234375,"y":232.49999904632568,"wires":[["3e821450.5d14dc"]]},{"id":"1b9ee226.776ede","type":"http in","z":"891702d3.77cb6","name":"","url":"/serial_4","method":"get","swaggerDoc":"","x":159.3333740234375,"y":72.49999904632568,"wires":[["cd425ee.2604da"]]},{"id":"9b42c84c.d37fa8","type":"http response","z":"891702d3.77cb6","name":"","x":514.333381652832,"y":35,"wires":[]},{"id":"dba69cb7.1a468","type":"function","z":"891702d3.77cb6","name":"","func":"msg.payload = msg.payload.split(':')[1].replace('\\n','').replace(' ','');\nreturn msg;","outputs":1,"noerr":0,"x":569.3333740234375,"y":132.49999904632568,"wires":[["ca9b9f15.353bb"]]},{"id":"ca9b9f15.353bb","type":"debug","z":"891702d3.77cb6","name":"","active":false,"console":"false","complete":"false","x":709.3333740234375,"y":132.49999904632568,"wires":[]},{"id":"3ce0665c.7dfa3a","type":"inject","z":"891702d3.77cb6","name":"DEMO","topic":"","payload":"","payloadType":"str","repeat":"10800","crontab":"","once":true,"x":129.3333740234375,"y":132.49999904632568,"wires":[["65091727.802198"]]},{"id":"65091727.802198","type":"function","z":"891702d3.77cb6","name":"DEMO Data","func":"var device_config = {\n    'event_move_in_id':'80096D9ABE7F68F3E0533300000A6C0D',\n    'event_move_in_minus_id':'8DB9B239DF5252F0E055000000000001',\n    'event_move_out_id':'80096D9ABE8068F3E0533300000A6C0D',\n    'event_max_weight_id':'85A255F950F9BEF4E0533300000AC45D',\n    'event_on_id': '85A2CC45702A2DD1E0533300000A0C94',\n    'event_off_id':'85A2CC4570292DD1E0533300000A0C94',\n    'event_max_duration':'8642EE858DE89BAAE0533300000AFCC7',\n    'event_fake_traffic':'80096EF60C186574E0533300000ADBA5',\n    'event_get_weight_acc':'800970AC1FDC683CE0533300000AF1B0',\n    'event_min_weight':'875C3EB5C9DD092DE055000000000001',\n    'event_driver_in':'8E68D8D8B2977181E055000000000001',\n    'snapshot_events':['80096D9ABE7F68F3E0533300000A6C0D','85A255F950F9BEF4E0533300000AC45D','8642EE858DE89BAAE0533300000AFCC7','800970AC1FDC683CE0533300000AF1B0'],\n    'main_host':'http://78.46.24.220:8080/ords/demo_ettn',\n    'event_url':'/iot_cli/events/log',\n    'state_url':'/iot_cli/device',\n    'snapshot_url':'/iot_cli/events/snapshot',\n    'maxWeight':60000,\n    'maxDuration':600000,\n    'minWeight':-40,\n    'checkHealthTimeout':3000,\n    'minTriggerWeight':40,\n    'driverWeight':80\n}\nmsg.payload = device_config;\n\n//\"http://176.9.9.121:8080/ords/demo_ettn/iot_cli/events/log\"\n// flow.set('scale_id','80096CB0EFD83B63E0533300000A4334');\n// flow.set('event_move_in_id','80096D9ABE7F68F3E0533300000A6C0D');\n// flow.set('event_move_out_id','80096D9ABE8068F3E0533300000A6C0D');\n// flow.set('event_max_weight_id','85A255F950F9BEF4E0533300000AC45D');\n// flow.set('event_off_id','85A2CC4570292DD1E0533300000A0C94');\n// flow.set('event_on_id', '85A2CC45702A2DD1E0533300000A0C94');\n// flow.set('event_max_duration','8642EE858DE89BAAE0533300000AFCC7');\n// flow.set('main_host','http://prod.apex.rest/ords/ettn');\n// flow.set('event_url','/iot_cli/events/log');\n// flow.set('state_url','/v1/device');\n// flow.set('maxWeight',40000);\n// flow.set('maxDuration',20000);\n// flow.set('checkHealthTimeout',3000);\nreturn msg;","outputs":1,"noerr":0,"x":288.3333740234375,"y":132.49999904632568,"wires":[["4fdce77a.99d798"]]},{"id":"f2d46356.87a92","type":"debug","z":"891702d3.77cb6","name":"","active":false,"console":"false","complete":"payload","x":774.3333740234375,"y":232.49999904632568,"wires":[]},{"id":"eb9bb0f8.a183","type":"function","z":"891702d3.77cb6","name":"device config","func":"var device_config = JSON.parse(msg.payload);\n\nflow.set('scale_id',device_config.scale_id);\nflow.set('event_move_in_id',device_config.event_move_in_id);\nflow.set('event_move_in_minus_id',device_config.event_move_in_minus_id);\nflow.set('event_move_out_id',device_config.event_move_out_id);\nflow.set('event_max_weight_id',device_config.event_max_weight_id);\nflow.set('event_off_id',device_config.event_off_id);\nflow.set('event_on_id', device_config.event_on_id);\nflow.set('event_max_duration',device_config.event_max_duration);\nflow.set('event_fake_traffic',device_config.event_fake_traffic);\nflow.set('event_driver_in', device_config.event_driver_in);\nflow.set('main_host',device_config.main_host);\nflow.set('event_url',device_config.event_url);\nflow.set('state_url',device_config.state_url);\nflow.set('maxWeight',device_config.maxWeight);\nflow.set('minWeight',device_config.minWeight);\nflow.set('maxDuration',device_config.maxDuration);\nflow.set('checkHealthTimeout',device_config.checkHealthTimeout);\nflow.set('event_get_weight_acc',device_config.event_get_weight_acc);\nflow.set('event_min_weight',device_config.event_min_weight);\nflow.set('minTriggerWeight',device_config.minTriggerWeight);\nflow.set('snapshot_url',device_config.snapshot_url);\nflow.set('snapshot_events',device_config.snapshot_events);\nflow.set('driverWeight',device_config.driverWeight)\n\nreturn msg;\n","outputs":1,"noerr":0,"x":599.3333740234375,"y":232.49999904632568,"wires":[["f2d46356.87a92"]]},{"id":"3e821450.5d14dc","type":"function","z":"891702d3.77cb6","name":"device config","func":"var device_config = JSON.parse(msg.payload);\n\nflow.set('scale_id',device_config.scale_id);\nflow.set('event_move_in_id',device_config.event_move_in_id);\nflow.set('event_move_in_minus_id',device_config.event_move_in_minus_id);\nflow.set('event_move_out_id',device_config.event_move_out_id);\nflow.set('event_max_weight_id',device_config.event_max_weight_id);\nflow.set('event_off_id',device_config.event_off_id);\nflow.set('event_on_id', device_config.event_on_id);\nflow.set('event_max_duration',device_config.event_max_duration);\nflow.set('event_fake_traffic',device_config.event_fake_traffic);\nflow.set('event_driver_in', device_config.event_driver_in);\nflow.set('main_host',device_config.main_host);\nflow.set('event_url',device_config.event_url);\nflow.set('state_url',device_config.state_url);\nflow.set('maxWeight',device_config.maxWeight);\nflow.set('minWeight',device_config.minWeight);\nflow.set('maxDuration',device_config.maxDuration);\nflow.set('checkHealthTimeout',device_config.checkHealthTimeout);\nflow.set('event_get_weight_acc',device_config.event_get_weight_acc);\nflow.set('event_min_weight',device_config.event_min_weight);\nflow.set('minTriggerWeight',device_config.minTriggerWeight);\nflow.set('snapshot_url',device_config.snapshot_url);\nflow.set('snapshot_events',device_config.snapshot_events);\nflow.set('driverWeight',device_config.driverWeight);\n\nmsg.payload = {\n\tscale_id: flow.get('scale_id'),\n\tevent_move_in_id: flow.get('event_move_in_id'),\n\tevent_move_in_minus_id: flow.get('event_move_in_minus_id'),\n\tevent_move_out_id: flow.get('event_move_out_id'),\n\tevent_max_weight_id: flow.get('event_max_weight_id'),\n\tevent_off_id: flow.get('event_off_id'),\n\tevent_on_id: flow.get('event_on_id'),\n\tevent_max_duration: flow.get('event_max_duration'),\n\tevent_fake_traffic: flow.get('event_fake_traffic'),\n\tevent_driver_in: flow.get('event_driver_in'),\n\tmain_host: flow.get('main_host'),\n\tevent_url: flow.get('event_url'),\n\tstate_url: flow.get('state_url'),\n\tmaxWeight: flow.get('maxWeight'),\n\tminWeight: flow.get('minWeight'),\n\tmaxDuration: flow.get('maxDuration'),\n\tcheckHealthTimeout: flow.get('checkHealthTimeout'),\n\tevent_get_weight_acc: flow.get('event_get_weight_acc'),\n\tevent_min_weight: flow.get('event_min_weight'),\n\tminTriggerWeight: flow.get('minTriggerWeight'),\n\tsnapshot_url: flow.get('snapshot_url'),\n\tsnapshot_events: flow.get('snapshot_events'),\n\tdriverWeight: flow.get('driverWeight')\n};\n\nreturn msg;\n","outputs":1,"noerr":0,"x":594.3333740234375,"y":192.49999904632568,"wires":[["12c48590.a7d2ea"]]},{"id":"12c48590.a7d2ea","type":"json","z":"891702d3.77cb6","name":"","x":740.3333740234375,"y":190.49999904632568,"wires":[["b591d323.9951d"]]},{"id":"1ee9ae66.3f6952","type":"function","z":"891702d3.77cb6","name":"transactionHasMaxWeight","func":"msg.event_id = flow.get('event_max_weight_id');\nmsg.description = 'Przekroczono maksymalną wagę samochodu, kg: ' + msg.metadata.weight;\n\n\nreturn msg;","outputs":1,"noerr":0,"x":646,"y":573.16663646698,"wires":[["6941540b.b1507c"]]},{"id":"722584fc.9f2c7c","type":"switch","z":"891702d3.77cb6","name":"switch max weight","property":"transactionHasMaxWeight","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":406,"y":573.16663646698,"wires":[["1ee9ae66.3f6952"]]},{"id":"6941540b.b1507c","type":"function","z":"891702d3.77cb6","name":"events payload","func":"var event_id = msg.event_id;\nvar scale_id = global.get('scale_id_poland');\nvar snapshot_events = flow.get('snapshot_events');\nvar snapshot = false;\n\nif (snapshot_events.indexOf(event_id)>=0){\n    snapshot = true;\n}\n\nmsg.payload = {\n    'event':{\n        'id':msg.event_id\n    },\n    'devices':[{'id':scale_id}],\n    'data':msg.metadata,\n    'description':msg.description\n}\n\nmsg.headers = {\n    \"content-type\":\"application/json\"\n}\n\nmsg.url = flow.get('main_host')+flow.get('event_url');\nmsg.main_host = flow.get('main_host');\nmsg.event_url = flow.get('event_url');\nmsg.snapshot = snapshot;\nreturn msg;","outputs":1,"noerr":0,"x":982.0000610351562,"y":542.5951528549194,"wires":[["514a51bb.7b3a7","cec64ef5.f3c31","da775d86.dcb5e","d2bbabc.ca6d058"]]},{"id":"e56d01fc.2e4c4","type":"function","z":"891702d3.77cb6","name":"main module","func":"var prevWeight = flow.get('prevWeight');\nvar transaction = flow.get('transaction');\nvar transactionData = flow.get('transactionData');\nvar transactionMaxWeight = flow.get('transactionMaxWeight');\nvar transactionHasMaxWeight = flow.get('transactionHasMaxWeight');\nvar transactionHasMinWeight = flow.get('transactionHasMinWeight');\nvar transactionHasMaxDuration = flow.get('transactionHasMaxDuration');\nvar waybill = flow.get('transactionWaybill');\nvar weight = msg.payload;\nvar stableSize = 5;\nvar duration = 0;\nvar maxWeight = flow.get('maxWeight');\nvar maxDuration = flow.get('maxDuration');\nvar prevTransaction = transaction;\nvar minWeight = flow.get('minWeight');\nvar minTriggerWeight = flow.get('minTriggerWeight');\nvar is_minus = false;\n//transaction\nif (prevWeight === null){\n    prevWeight = msg.payload;    \n}else{\n    if((prevWeight <= 0) && (weight > 0) && (weight > minTriggerWeight)){\n        //start of transaction\n        transaction = Date.now();\n        msg.on = true;\n        flow.set('transaction',transaction);\n    }else if((prevWeight > 0) && (weight <=0) && (transaction)){\n        //transaction = 0;\n        msg.on = false;\n        transactionData = [];\n        flow.set('transaction',0);\n        flow.set('transactionMaxWeight',null);\n        flow.set('transactionHasMaxWeight',null);\n        flow.set('transactionHasMinWeight',null);\n        flow.set('transactionHasMaxDuration',null);\n        flow.set('transactionWaybill',null);\n        flow.set('transactionMetadata',null);\n    }else if((transaction === null) && (weight>0) && (weight > minTriggerWeight)){\n        transaction = Date.now();\n        flow.set('transaction',transaction);\n    }\n    if((prevWeight < 0) && ((weight-prevWeight) > minTriggerWeight)){\n        //start of transaction\n        is_minus = true;\n        msg.prevWeight = prevWeight;\n    }\n}\n\nif (transaction > 0){\n    transactionData.push(weight);    \n\n    //stable\n    if(transactionData.length > stableSize+1){\n        var stabletmp = true;\n        for (var i = transactionData.length-1; i > transactionData.length-1-stableSize; i--){\n            if (transactionData[i] !== transactionData[i-1]){\n                stabletmp = false;\n                msg.stable = stabletmp;\n                break;\n            }\n            msg.stable = stabletmp;\n        }\n    }else{\n        msg.stable = false;\n    }\n\n    //duration & transactionMaxWeight\n    duration = (Number(Date.now()) - Number(transaction));\n    if( (weight>transactionMaxWeight) || (transactionMaxWeight === null)){\n        transactionMaxWeight = weight;\n        flow.set(\"transactionMaxWeight\",transactionMaxWeight);\n    }\n    \n    if(!transactionHasMaxWeight && weight > maxWeight){\n        msg.transactionHasMaxWeight = true;\n        flow.set('transactionHasMaxWeight',true);\n    }\n    \n    if(!transactionHasMinWeight && weight < minWeight){\n        msg.transactionHasMinWeight = true;\n        flow.set('transactionHasMinWeight',true);\n    }\n    \n    //max duartion\n    if(!transactionHasMaxDuration && duration > maxDuration){\n        msg.transactionHasMaxDuration = true;\n        flow.set('transactionHasMaxDuration',true);\n    }\n}\n\n//result\nmsg.metadata = {\n    'weight':weight,\n    'prevWeight':prevWeight,\n    'prevTransaction':prevTransaction,\n    'transaction':transaction,\n    'on':msg.on,\n    'transactionDataCount':transactionData.length,\n    'stable':msg.stable,\n    'duration':Math.round(duration/1000),\n    'transactionMaxWeight':transactionMaxWeight,\n    'waybill':waybill,\n    'perimetr':true,\n    'weight1':msg.weight1,\n    'weight2':msg.weight2,\n    'weight_center':msg.weight_center,\n    'driverInCar':false\n}\nflow.set('transactionData',transactionData);\nflow.set('prevWeight',weight);\nflow.set('transactionMetadata',msg.metadata);\nflow.set('lasttimedata', new Date());\nmsg.is_minus = is_minus;\n\nreturn msg;","outputs":1,"noerr":0,"x":207,"y":552.1666250228882,"wires":[["369a53d4.e1ba7c","722584fc.9f2c7c","17adc105.4dbd8f","3e15763f.07d36a","6f46768e.8e6448"]]},{"id":"514a51bb.7b3a7","type":"switch","z":"891702d3.77cb6","name":"take snapshot","property":"snapshot","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":1283.1429443359375,"y":673.16663646698,"wires":[["614db656.6077e8"]]},{"id":"cec64ef5.f3c31","type":"json","z":"891702d3.77cb6","name":"","x":1136,"y":471.73801708221436,"wires":[["90bf2632.7b8608"]]},{"id":"144d7118.6df5df","type":"function","z":"891702d3.77cb6","name":"move in","func":"msg.event_id = flow.get('event_move_in_id');\nmsg.description = 'Wjazd na wagę. Aktualna waga: ' + msg.metadata.weight;\n\nreturn msg;","outputs":1,"noerr":0,"x":596,"y":493.16663646698,"wires":[["6941540b.b1507c"]]},{"id":"49393128.1b8dd","type":"function","z":"891702d3.77cb6","name":"off","func":"msg.event_id = flow.get('event_off_id');\nmsg.description = 'Brak połączenia z urządzeniem';\nmsg.metadata = {\n    'state':msg.checkHealth\n}\nreturn msg;","outputs":1,"noerr":0,"x":626,"y":733.16663646698,"wires":[["6941540b.b1507c"]]},{"id":"4f8acb4.148ba34","type":"function","z":"891702d3.77cb6","name":"on","func":"msg.event_id = flow.get('event_on_id');\nmsg.description = 'Urządzenie zostało podłączone do systemu';\nmsg.metadata = {\n    'state':msg.checkHealth\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":626,"y":693.16663646698,"wires":[["6941540b.b1507c"]]},{"id":"58e9122a.f8699c","type":"function","z":"891702d3.77cb6","name":"move out","func":"msg.event_id = flow.get('event_move_out_id');\nmsg.description = 'Zjazd z wagi. Aktualna waga: ' + msg.metadata.weight;\n\nreturn msg;","outputs":1,"noerr":0,"x":596,"y":533.16663646698,"wires":[["6941540b.b1507c"]]},{"id":"70173858.9d3a78","type":"function","z":"891702d3.77cb6","name":"transaction has max duration","func":"msg.event_id = flow.get('event_max_duration');\nmsg.description = 'Przekroczenie czasu postoju na wadze, sekundy: ' + msg.metadata.duration;\n\nreturn msg;","outputs":1,"noerr":0,"x":656,"y":613.16663646698,"wires":[["6941540b.b1507c"]]},{"id":"4d391ccc.410c94","type":"function","z":"891702d3.77cb6","name":"empty waybill","func":"msg.event_id = flow.get('event_fake_traffic');\nmsg.description = 'Przejazd bez ważenia. Сzas trwania ruchu ' + Math.round(msg.metadata.duration/60)+ 'm.';\n\nreturn msg;","outputs":1,"noerr":0,"x":756,"y":453.16663646698,"wires":[["6941540b.b1507c","b51ca98f.339bc8"]]},{"id":"2ca5680.c60e798","type":"function","z":"891702d3.77cb6","name":"transactionHasMinWeight","func":"msg.event_id = flow.get('event_min_weight');\nmsg.description = 'Minimalna waga, kg: ' + msg.metadata.weight;\n\nreturn msg;","outputs":1,"noerr":0,"x":646,"y":653.16663646698,"wires":[["6941540b.b1507c"]]},{"id":"7f937a61.409ad4","type":"function","z":"891702d3.77cb6","name":"move in minus","func":"msg.event_id = flow.get('event_move_in_minus_id');\nmsg.description = 'Wjazd na wagę z ujemną wartością. ' + msg.prevWeight +' kg.';\n\nreturn msg;","outputs":1,"noerr":0,"x":606,"y":413.16663646698,"wires":[["6941540b.b1507c"]]},{"id":"a3056dbd.15f8b","type":"link in","z":"891702d3.77cb6","name":"s4","links":["563d8bb6.e3dc94"],"x":51,"y":553.16663646698,"wires":[["c5d92454.acea08","fde58c42.903b8","9534795a.7c6658","cf996096.12d82","e56d01fc.2e4c4"]]},{"id":"369a53d4.e1ba7c","type":"switch","z":"891702d3.77cb6","name":"switch move","property":"on","propertyType":"msg","rules":[{"t":"true"},{"t":"false"}],"checkall":"true","outputs":2,"x":406,"y":533.16663646698,"wires":[["144d7118.6df5df"],["58e9122a.f8699c","197bd6ff.a4d269","b51ca98f.339bc8"]]},{"id":"17adc105.4dbd8f","type":"switch","z":"891702d3.77cb6","name":"max duration","property":"transactionHasMaxDuration","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":386,"y":613.16663646698,"wires":[["70173858.9d3a78"]]},{"id":"3e15763f.07d36a","type":"switch","z":"891702d3.77cb6","name":"switch min weight","property":"transactionHasMinWeight","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":406,"y":653.16663646698,"wires":[["2ca5680.c60e798"]]},{"id":"6f46768e.8e6448","type":"switch","z":"891702d3.77cb6","name":"switch minus in","property":"is_minus","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":406,"y":473.16663646698,"wires":[["7f937a61.409ad4"]]},{"id":"8cc447bb.a21b28","type":"switch","z":"891702d3.77cb6","name":"","property":"driver_in","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":776,"y":793.16663646698,"wires":[["57d07ce.f911284","37246d8.439cb92"]]},{"id":"57d07ce.f911284","type":"function","z":"891702d3.77cb6","name":"driver_in event","func":"msg.event_id = flow.get('event_driver_in');\nmsg.description = 'Kierowca w samochodzie podczas ważenia. Aktualna waga: ' + msg.metadata.weight+\"kg. Numer maszyny: \"+msg.metadata.truck1+\" \"+msg.metadata.truck2+\" \"+msg.metadata.item_name;//\n//Kierowca w samochodzie podczas ważenia\nreturn msg;","outputs":1,"noerr":0,"x":933.0159301757812,"y":712.373046875,"wires":[[]]},{"id":"90bf2632.7b8608","type":"debug","z":"891702d3.77cb6","name":"IN event","active":false,"console":"true","complete":"payload","x":1284.857177734375,"y":465.1665954589844,"wires":[]},{"id":"f69be4c6.bc8408","type":"switch","z":"891702d3.77cb6","name":"","property":"checkHealth","propertyType":"msg","rules":[{"t":"true"},{"t":"false"}],"checkall":"true","outputs":2,"x":486,"y":753.16663646698,"wires":[["4f8acb4.148ba34"],["49393128.1b8dd"]]},{"id":"197bd6ff.a4d269","type":"switch","z":"891702d3.77cb6","name":"waybill","property":"metadata.waybill","propertyType":"msg","rules":[{"t":"null"}],"checkall":"true","outputs":1,"x":596,"y":453.16663646698,"wires":[["4d391ccc.410c94","b51ca98f.339bc8"]]},{"id":"c5d92454.acea08","type":"debug","z":"891702d3.77cb6","name":"IN weight","active":false,"console":"true","complete":"payload","x":199,"y":514.1666259765625,"wires":[]},{"id":"fde58c42.903b8","type":"ui_text","z":"891702d3.77cb6","group":"ce8a2022.9dbe7","order":0,"width":0,"height":0,"name":"","label":"Поточна вага:","format":"{{msg.payload}}","layout":"row-spread","x":193,"y":710.16663646698,"wires":[]},{"id":"9534795a.7c6658","type":"ui_chart","z":"891702d3.77cb6","name":"","group":"d03ed285.c2f47","order":0,"width":"6","height":"6","label":"Графік ваги","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","ymin":"0==","ymax":"","removeOlder":"10","removeOlderPoints":"","removeOlderUnit":"60","cutout":0,"x":207,"y":451.16663646698,"wires":[[],[]]},{"id":"37246d8.439cb92","type":"debug","z":"891702d3.77cb6","name":"","active":false,"console":"false","complete":"true","x":915,"y":834.16663646698,"wires":[]},{"id":"dbddd38.e99553","type":"function","z":"891702d3.77cb6","name":"check scale health","func":"var lastcheckHealth = flow.get('checkHealth');\nvar checkHealth = null;\nvar lasttimedata = flow.get('lasttimedata');\n\nvar currenttimedata = new Date();\n\nif ((currenttimedata - lasttimedata) > 3000){\n    checkHealth = false;\n} else {\n    checkHealth = true;\n}\n\nflow.set(\"checkHealth\",checkHealth);\n\nif (lastcheckHealth != checkHealth){\n    msg.checkHealth = checkHealth;\n}else{\n    msg.checkHealth = null;\n}\nmsg.payload = checkHealth;\n\nreturn msg;","outputs":1,"noerr":0,"x":306,"y":793.16663646698,"wires":[["f69be4c6.bc8408"]]},{"id":"100c683e.77dd08","type":"function","z":"891702d3.77cb6","name":"snapshot payload","func":"var event_id = msg.event_id;\nvar scale_id = global.get('scale_id_in');\n//var tbase64   = msg.payload.toString('base64');\nvar tbase64   = msg.payload.snapshot;\nmsg.payload = {\n    'event':{\n        'id':msg.event_id\n    },\n    'device':{\n        'id':scale_id\n        \n    },\n    'snapshot':tbase64,\n    'ext':'jpeg'\n}\n\nmsg.headers = {\n    \"content-type\":\"application/json\"\n}\n\nmsg.url = flow.get('main_host')+flow.get('snapshot_url');\nmsg.main_host = flow.get('main_host');\nmsg.snapshot_url = flow.get('snapshot_url');\n\nreturn msg;","outputs":1,"noerr":0,"x":1894,"y":666.16663646698,"wires":[["36f9448.f5f52bc","fb74fca4.f74fc","20e8f3ef.29bc6c"]]},{"id":"309f5e5b.2d2bb2","type":"inject","z":"891702d3.77cb6","name":"","topic":"","payload":"","payloadType":"date","repeat":"4","crontab":"","once":false,"x":126,"y":793.16663646698,"wires":[["dbddd38.e99553"]]},{"id":"36f9448.f5f52bc","type":"debug","z":"891702d3.77cb6","name":"Camera 1","active":false,"console":"true","complete":"payload","x":2113,"y":673.1666250228882,"wires":[]},{"id":"d3610fc1.50573","type":"json","z":"891702d3.77cb6","name":"","x":2306,"y":662.16663646698,"wires":[["79189152.b3ad3"]]},{"id":"79189152.b3ad3","type":"debug","z":"891702d3.77cb6","name":"event Apex","active":false,"console":"true","complete":"payload","x":2496.9998779296875,"y":659.1666250228882,"wires":[]},{"id":"33ac0b34.77d4f4","type":"link in","z":"891702d3.77cb6","name":"","links":["45f4d08e.3f283"],"x":92.3333740234375,"y":304.4999990463257,"wires":[["b6c411f9.2a998"]]},{"id":"b6c411f9.2a998","type":"function","z":"891702d3.77cb6","name":"","func":"flow.set(\"p1\", msg.payload.p1);\nflow.set(\"p2\", msg.payload.p2);\nflow.set(\"p3\", msg.payload.p3);\nreturn msg;","outputs":1,"noerr":0,"x":193.3333740234375,"y":298.4999990463257,"wires":[[]]},{"id":"cf996096.12d82","type":"function","z":"891702d3.77cb6","name":"w_demo","func":"flow.set(\"w_demo\", msg.payload);\nreturn msg;","outputs":1,"noerr":0,"x":192.0833740234375,"y":385.9999990463257,"wires":[[]]},{"id":"f2c8d99d.1b0f38","type":"function","z":"891702d3.77cb6","name":"","func":"var max = 1;\nvar min = 101;\n\nvar img = (Math.random() * (max - min) + min).toFixed();\n\nmsg.payload = \"/distr/data/noCar/\" + img + \".jpg\";\nmsg.filename = msg.payload;\nreturn msg;\n\n","outputs":1,"noerr":0,"x":1676.0833587646484,"y":952.2499990463257,"wires":[["2e93c359.1dcbec"]]},{"id":"2e93c359.1dcbec","type":"file in","z":"891702d3.77cb6","name":"noCar","filename":"","format":"","x":1812.75,"y":955.5833730697632,"wires":[["a2ba5a7c.062218"]]},{"id":"1926378b.e16098","type":"function","z":"891702d3.77cb6","name":"","func":"var max = 1;\nvar min = 15;\n\nvar img = (Math.random() * (max - min) + min).toFixed();\n\nmsg.payload = \"/distr/data/front/\" + img + \".jpg\";\nmsg.filename = msg.payload;\nreturn msg;\n\n","outputs":1,"noerr":0,"x":1676.361083984375,"y":1004.7501363754272,"wires":[["528b46cb.2ac838"]]},{"id":"528b46cb.2ac838","type":"file in","z":"891702d3.77cb6","name":"front","filename":"","format":"","x":1813.0277252197266,"y":1008.0835103988647,"wires":[["a2ba5a7c.062218"]]},{"id":"614db656.6077e8","type":"switch","z":"891702d3.77cb6","name":"","property":"w_demo","propertyType":"flow","rules":[{"t":"eq","v":"0","vt":"num"},{"t":"gt","v":"0","vt":"num"}],"checkall":"true","outputs":2,"x":1441.0833740234375,"y":793.7777099609375,"wires":[["f2c8d99d.1b0f38"],["1926378b.e16098"]]},{"id":"fe23cd9b.cc262","type":"function","z":"891702d3.77cb6","name":"","func":"var sn = {\n            snapshot: msg.payload\n        }   \nmsg.payload = sn;\nreturn msg;","outputs":1,"noerr":0,"x":2094.5833740234375,"y":980.7777700424194,"wires":[["100c683e.77dd08","da03190d.5b3df8"]]},{"id":"a2ba5a7c.062218","type":"base64","z":"891702d3.77cb6","name":"","action":"","property":"payload","x":1966.0833740234375,"y":981.2777700424194,"wires":[["fe23cd9b.cc262"]]},{"id":"da03190d.5b3df8","type":"debug","z":"891702d3.77cb6","name":"Camera 2","active":false,"console":"true","complete":"payload","x":2312.3333740234375,"y":1008.4999990463257,"wires":[]},{"id":"a86bd5a1.fce998","type":"debug","z":"891702d3.77cb6","name":"Camera 3","active":true,"console":"true","complete":"true","x":2347.3333740234375,"y":531.4999990463257,"wires":[]},{"id":"b51ca98f.339bc8","type":"debug","z":"891702d3.77cb6","name":"empty waybill","active":false,"console":"true","complete":"true","x":867.3333740234375,"y":376.4999990463257,"wires":[]},{"id":"afbcff65.e75eb","type":"inject","z":"891702d3.77cb6","name":"","topic":"","payload":"main_host","payloadType":"flow","repeat":"","crontab":"","once":false,"x":583.3333740234375,"y":284.4999990463257,"wires":[["c31331b3.a3c11"]]},{"id":"c31331b3.a3c11","type":"debug","z":"891702d3.77cb6","name":"empty waybill","active":false,"console":"true","complete":"true","x":831.3333740234375,"y":298.4999990463257,"wires":[]},{"id":"e9a9d50a.22b198","type":"inject","z":"891702d3.77cb6","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":703.3333854675293,"y":67.24999904632568,"wires":[["962bfb79.8be948"]]},{"id":"962bfb79.8be948","type":"function","z":"891702d3.77cb6","name":"","func":"flow.set('transaction', new Date());\nreturn msg;","outputs":1,"noerr":0,"x":840.8333740234375,"y":69.74999904632568,"wires":[[]]},{"id":"7806ec0f.91f444","type":"http request","z":"891702d3.77cb6","name":"EVENTS","method":"POST","ret":"txt","url":"","tls":"","x":1274.3333740234375,"y":936.4999990463257,"wires":[["737a97da.92b488"]]},{"id":"5d225566.c147dc","type":"http request","z":"891702d3.77cb6","name":"send a snapshot","method":"POST","ret":"txt","url":"","tls":"87cc99a4.0f0328","x":2175.33349609375,"y":570.5,"wires":[["d3610fc1.50573","a86bd5a1.fce998"]]},{"id":"440e92c3.1063bc","type":"comment","z":"891702d3.77cb6","name":"Відправка на сервер Польща","info":"","x":1215.3333740234375,"y":891.4999990463257,"wires":[]},{"id":"da775d86.dcb5e","type":"function","z":"891702d3.77cb6","name":"","func":"msg.url = \"http://176.9.9.121:8080/ords/demo_ettn/iot_cli/events/log\";\ndelete msg.req;\ndelete msg.res;\nreturn msg;","outputs":1,"noerr":0,"x":1113.3333740234375,"y":932.4999990463257,"wires":[["7806ec0f.91f444","72c1f613.ac6958"]]},{"id":"737a97da.92b488","type":"debug","z":"891702d3.77cb6","name":"","active":true,"console":"false","complete":"true","x":1428.3333740234375,"y":933.4999990463257,"wires":[]},{"id":"fb74fca4.f74fc","type":"function","z":"891702d3.77cb6","name":"","func":"msg.url = \"http://176.9.9.121:8080/ords/demo_ettn/iot_cli/events/snapshot\";\n///\nreturn msg;","outputs":1,"noerr":0,"x":2024.3333740234375,"y":572.5,"wires":[["5d225566.c147dc","2201a8b8.2b20c8"]]},{"id":"fd6594ea.da11b8","type":"comment","z":"891702d3.77cb6","name":"Відправка на сервер Польща","info":"","x":2106.3333740234375,"y":522.5,"wires":[]},{"id":"20e8f3ef.29bc6c","type":"debug","z":"891702d3.77cb6","name":"Camera 3","active":false,"console":"true","complete":"true","x":2128,"y":625,"wires":[]},{"id":"594ff6a6.c56c78","type":"inject","z":"891702d3.77cb6","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":1723,"y":885,"wires":[["f2c8d99d.1b0f38"]]},{"id":"2201a8b8.2b20c8","type":"debug","z":"891702d3.77cb6","name":"Camera 3","active":true,"console":"true","complete":"true","x":2176,"y":447,"wires":[]},{"id":"72c1f613.ac6958","type":"debug","z":"891702d3.77cb6","name":"","active":true,"console":"false","complete":"true","x":1273,"y":1018,"wires":[]},{"id":"d2bbabc.ca6d058","type":"debug","z":"891702d3.77cb6","name":"","active":true,"console":"false","complete":"true","x":1195,"y":546,"wires":[]},{"id":"4b0d4a6a.836514","type":"inject","z":"e761e99f.3a2628","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":1675.3333740234375,"y":879.3333625793457,"wires":[["46e28095.e8f95"]]},{"id":"d5343b26.509da8","type":"http in","z":"891702d3.77cb6","name":"Serial getWeight","url":"/scale/35a70523-b81a-9adb-2640-f1481f019000/getWeight","method":"get","swaggerDoc":"","x":120,"y":920,"wires":[["f13d7a3a.284f08","733fb83.7411148"]]},{"id":"3905f14f.40985e","type":"http response","z":"891702d3.77cb6","name":"","x":530.0000171661377,"y":1017.1428575515747,"wires":[]},{"id":"f13d7a3a.284f08","type":"function","z":"891702d3.77cb6","name":"response","func":"msg.payload = flow.get('transactionMetadata');\nmsg.payload.driverInCar = false;\ntransactionWaybill = flow.get('transactionWaybill');\nmsg.payload.transactionWaybill = transactionWaybill;\nif(transactionWaybill && transactionWaybill !== msg.req.query.reader){\n    msg.payload.status = false;    \n}else {\n    msg.payload.status = true;    \n}\nreturn msg;","outputs":1,"noerr":0,"x":381.42857360839844,"y":1018.5713939666748,"wires":[["3905f14f.40985e"]]},{"id":"fce49c69.bc01d","type":"link out","z":"e761e99f.3a2628","name":"","links":["2aa85e5a.47c1e2"],"x":737.3333787918091,"y":973.9047927856445,"wires":[]},{"id":"3aeaa66f.2ba32a","type":"comment","z":"2fe00946.488356","name":"Забрав відправку 20.10.2020","info":"","x":635.7142944335938,"y":130.0000057220459,"wires":[]},{"id":"733fb83.7411148","type":"function","z":"891702d3.77cb6","name":"get weight from accounting system","func":"var transactionMetadata = flow.get('transactionMetadata');\nvar transactionMaxWeight = flow.get('transactionMaxWeight');\nvar driverWeight = flow.get('driverWeight');\nvar buisness_data = msg.req.query;\n// var buisness_data = {\n//     operation_name: \"operation_name\",\n//     operation_type: \"operation_type\",\n//     truck1: \"truck1\",\n//     truck2: \"truck2\",\n//     item_name: \"item_name\",\n//     waybill: \"waybill\"\n//     };\nmsg.metadata = Object.assign(transactionMetadata,buisness_data);\n\n//check driver in a car\nvar driver_in = false;\nmsg.driverWeight = driverWeight;\nif((transactionMaxWeight - msg.metadata.weight) < driverWeight){\n    driver_in = true;\n}\n\nmsg.event_id = flow.get('event_get_weight_acc');\ntransactionWaybill = flow.get('transactionWaybill');\nif (!transactionWaybill){\n    flow.set('transactionWaybill',msg.req.query.reader);\n}\nmsg.description = ' '+buisness_data.operation_name+'. '+buisness_data.operation_type+'. Wagę zaczytano do systemu. Aktualna waga: ' + msg.metadata.weight+\" Numer maszyny: \"+buisness_data.truck1+\" \"+buisness_data.truck2+\" \"+buisness_data.item_name + \", ТТF: \" + buisness_data.waybill;\nmsg.transactionMetadata = transactionMetadata;\nmsg.driver_in = driver_in;\n\nreturn msg;","outputs":1,"noerr":0,"x":442.1429138183594,"y":882.857177734375,"wires":[["8cc447bb.a21b28","6941540b.b1507c","1a4e9850.1567f8"]]},{"id":"1a4e9850.1567f8","type":"debug","z":"891702d3.77cb6","name":"","active":true,"console":"false","complete":"true","x":718.2857055664062,"y":901.5714721679688,"wires":[]},{"id":"b56c76bc.348f28","type":"json","z":"e761e99f.3a2628","name":"","x":1062.3333740234375,"y":840.3333625793457,"wires":[["ac24e8e7.928ee8"]]},{"id":"af55413d.8b401","type":"inject","z":"54099c75.aa76a4","name":"","topic":"","payload":"","payloadType":"date","repeat":"300","crontab":"","once":false,"x":138,"y":172,"wires":[["df8e498b.8f5828"]]},{"id":"df8e498b.8f5828","type":"function","z":"54099c75.aa76a4","name":"","func":"msg.payload = {\n    \"login\":\"user\",\n    \"password\":\"user\",\n    \"name\":\"office-10-20-00000000db95b409\",\n    \"serial\": \"00000000db95b409\",\n    \"ip\":\"81.30.161.168\",\n    \"port\": \"4000\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJzdXBwb3J0IiwiaWF0IjoxNjAzNzA5ODU1fQ.9Qz2hbEkoWqyRFAMZ_HQw94-lK9UBRLGkokxkOR6rMo\"\n}\n\nflow.set(\"serial\",msg.payload.serial);\nflow.set(\"ip\",msg.payload.ip);\nreturn msg;","outputs":1,"noerr":0,"x":275,"y":171,"wires":[["d3e2bb46.9f3498","7a9b7e2.6d8778"]]},{"id":"d3e2bb46.9f3498","type":"debug","z":"54099c75.aa76a4","name":"","active":true,"console":"false","complete":"false","x":470,"y":210,"wires":[]},{"id":"6477e8d0.d1c048","type":"http request","z":"54099c75.aa76a4","name":"","method":"POST","ret":"txt","url":"http://demo.skelya.online:8080/ords/demo_ettn/v1/auth_dev","tls":"","x":713,"y":164,"wires":[["1b67005f.8003f"]]},{"id":"791c339d.995b7c","type":"debug","z":"54099c75.aa76a4","name":"","active":true,"console":"false","complete":"false","x":1047,"y":160,"wires":[]},{"id":"e57bcdf0.3ab45","type":"http in","z":"54099c75.aa76a4","name":"","url":"/post/serial","method":"post","swaggerDoc":"","x":179,"y":385,"wires":[["611cb3fb.94ea7c","4f5b3997.28b028"]]},{"id":"611cb3fb.94ea7c","type":"debug","z":"54099c75.aa76a4","name":"","active":true,"console":"false","complete":"true","x":394,"y":349,"wires":[]},{"id":"4f5b3997.28b028","type":"function","z":"54099c75.aa76a4","name":"","func":"var serial_post = msg.payload.serial;\nvar serial_flow = flow.get(\"serial\");\n\n\n\nif(serial_post === serial_flow){\n\n\n\n    msg.payload = {\"status\":1};\n\n} else {\n    msg.payload = {\"status\":0};\n}\n\n\nmsg.serial_post = serial_post;\n\n\nflow.set(\"autentification_block\", 1);\nreturn msg;","outputs":1,"noerr":0,"x":524,"y":388,"wires":[["9ebc6b62.593008","c4904c2b.2a5bc"]]},{"id":"9ebc6b62.593008","type":"http response","z":"54099c75.aa76a4","name":"","x":755,"y":378,"wires":[]},{"id":"c4904c2b.2a5bc","type":"debug","z":"54099c75.aa76a4","name":"","active":true,"console":"false","complete":"true","x":647,"y":340,"wires":[]},{"id":"338318d4.2aa258","type":"inject","z":"e761e99f.3a2628","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":137,"y":29,"wires":[["b3941e6.776fce"]]},{"id":"7a9b7e2.6d8778","type":"switch","z":"54099c75.aa76a4","name":"","property":"autentification_block","propertyType":"flow","rules":[{"t":"neq","v":"1","vt":"num"}],"checkall":"true","outputs":1,"x":479,"y":170,"wires":[["6477e8d0.d1c048"]]},{"id":"1b67005f.8003f","type":"function","z":"54099c75.aa76a4","name":"","func":"flow.set(\"autentification_block\", 0);\nreturn msg;","outputs":1,"noerr":0,"x":859,"y":168,"wires":[["791c339d.995b7c"]]},{"id":"c9a503ab.0dcfe","type":"inject","z":"54099c75.aa76a4","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":684,"y":254,"wires":[["1b67005f.8003f"]]},{"id":"65a7dc8c.082d24","type":"bcrypt","z":"edffc925.6e1988","name":"","action":"encrypt","field":"payload","hash":"payload","rounds":10,"x":672,"y":629,"wires":[["eabe423e.66ede"]]},{"id":"b7812520.aac1e8","type":"inject","z":"edffc925.6e1988","name":"","topic":"","payload":"user","payloadType":"str","repeat":"","crontab":"","once":false,"x":401,"y":692,"wires":[["65a7dc8c.082d24"]]},{"id":"eabe423e.66ede","type":"debug","z":"edffc925.6e1988","name":"","active":true,"console":"false","complete":"payload","x":863,"y":629,"wires":[]},{"id":"1b0035b.01cd2ca","type":"inject","z":"edffc925.6e1988","name":"","topic":"","payload":"$2a$10$b6kMfyJrlPJ8GRHIwi8NfObJRj8Gjp2dJbOELxYroMHizA/MdGpte","payloadType":"str","repeat":"","crontab":"","once":false,"x":401,"y":744,"wires":[["946615a6.2d7b38"]]},{"id":"2d8da81a.93bfc8","type":"bcrypt","z":"edffc925.6e1988","name":"","action":"verify","field":"payload","hash":"verify","rounds":10,"x":674,"y":710,"wires":[["d989c5eb.8f67a8"]]},{"id":"d989c5eb.8f67a8","type":"debug","z":"edffc925.6e1988","name":"","active":true,"console":"false","complete":"true","x":830,"y":710,"wires":[]},{"id":"946615a6.2d7b38","type":"function","z":"edffc925.6e1988","name":"","func":"msg.verify = \"$2a$10$6jmqF1Pr6IoGw9.wnJJxIOBy5FYH25qngdAlH0sWx7vJcIPHtvAdu\";\nmsg.payload = \"user\";\nreturn msg;\n\n//\"$2a$10$6jmqF1Pr6IoGw9.wnJJxIOBy5FYH25qngdAlH0sWx7vJcIPHtvAdu\"\n\n//\"$2a$10$b6kMfyJrlPJ8GRHIwi8NfObJRj8Gjp2dJbOELxYroMHizA/MdGpte\"","outputs":1,"noerr":0,"x":535,"y":729,"wires":[["2d8da81a.93bfc8"]]},{"id":"43672381.5d741c","type":"inject","z":"54099c75.aa76a4","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":128,"y":72,"wires":[["922e907b.b6e7a"]]},{"id":"eced6f1b.33b6f","type":"http request","z":"54099c75.aa76a4","name":"","method":"POST","ret":"txt","url":"http://192.168.0.101:4000/auth/login","tls":"","x":459,"y":70,"wires":[["7cecb471.f630ec"]]},{"id":"922e907b.b6e7a","type":"function","z":"54099c75.aa76a4","name":"","func":"msg.payload = {\"username\": \"user\", \"password\": \"user\"};\nreturn msg;","outputs":1,"noerr":0,"x":282,"y":68,"wires":[["eced6f1b.33b6f"]]},{"id":"deb0f366.7fa47","type":"debug","z":"54099c75.aa76a4","name":"","active":true,"console":"false","complete":"false","x":809,"y":66,"wires":[]},{"id":"7cecb471.f630ec","type":"json","z":"54099c75.aa76a4","name":"","x":631,"y":69,"wires":[["deb0f366.7fa47"]]},{"id":"613a4601.061dc8","type":"switch","z":"e761e99f.3a2628","name":"","property":"transactionHasOverLoad","propertyType":"flow","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":790,"y":380,"wires":[["6896cc9.4b2ba34"]]},{"id":"6896cc9.4b2ba34","type":"function","z":"e761e99f.3a2628","name":"over_load","func":"msg.event_id = flow.get('event_over_load');\nmsg.description = 'Можливий досип після зважування. Максимальная вага: ' + msg.metadata.transactionMaxWeight + \"кг. Облікова вага: \" + msg.metadata.transactionAccWeight + \"кг.\";\n\nreturn msg;","outputs":1,"noerr":0,"x":920,"y":380,"wires":[["604bec27.37aad4"]]},{"id":"5502b98f.401748","type":"switch","z":"cd04ff99.5a648","name":"","property":"transactionHasOverLoad","propertyType":"flow","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":570,"y":340,"wires":[["a4bc038b.793d9"]]},{"id":"a4bc038b.793d9","type":"function","z":"cd04ff99.5a648","name":"over_load","func":"msg.event_id = flow.get('event_over_load');\nmsg.description = 'Можливий досип після зважування. Максимальная вага: ' + msg.metadata.transactionMaxWeight + \"кг. Облікова вага: \" + msg.metadata.transactionAccWeight + \"кг.\";\n\nreturn msg;","outputs":1,"noerr":0,"x":700,"y":340,"wires":[["58f2d037.aff6b"]]},{"id":"1a15940d.4d19fc","type":"http in","z":"e761e99f.3a2628","name":"Serial getWeight","url":"/scale/88348A32BD3D149FE055000000000001/getWeight","method":"get","swaggerDoc":"","x":140,"y":1040,"wires":[["6486128a.97099c","6c6b6be9.ecfac4"]]},{"id":"60470fad.00039","type":"inject","z":"6871a0d3.6ca94","name":"init","topic":"","payload":"init","payloadType":"str","repeat":"","crontab":"","once":true,"x":150,"y":160,"wires":[["c3efc7b8.1f5338"]]},{"id":"7859658c.b96f0c","type":"comment","z":"6871a0d3.6ca94","name":"INITIALIZING","info":"","x":170,"y":120,"wires":[]},{"id":"c3efc7b8.1f5338","type":"function","z":"6871a0d3.6ca94","name":"Модель весов","func":"flow.set('inputString',\"CMD\");\nflow.set('parser',function(v){\n            \n        //v = v.replace('S','');\n        //v = v.replace('D','');\n        //v = v.replace('kg','');\n        return Number(v);\n        \n        }\n    );\nglobal.set('scale_id_poland','35a70523-b81a-9adb-2640-f1481f019000');\nglobal.set('ip','192.168.104.3');\nglobal.set('video_camera_url_1','http://admin:admin333@192.168.104.58/ISAPI/Streaming/channels/101/picture?snapShotImageType=JPEG');\n   \nreturn msg;","outputs":1,"noerr":0,"x":360.00000381469727,"y":159.42856788635254,"wires":[[]]},{"id":"1d6b1aef.abb275","type":"http in","z":"891702d3.77cb6","name":"Serial snapshot","url":"/scale/188a6348-68c7-f366-e640-4f351f019000/getsnapshot","method":"get","swaggerDoc":"","x":160,"y":1140,"wires":[["fd396fdd.f32ed"]]},{"id":"fd396fdd.f32ed","type":"switch","z":"891702d3.77cb6","name":"","property":"w_demo","propertyType":"flow","rules":[{"t":"eq","v":"0","vt":"num"},{"t":"gt","v":"0","vt":"num"}],"checkall":"true","outputs":2,"x":459.888973236084,"y":1131.694333076477,"wires":[["55721b6a.eaca74"],["845aa858.9eb708"]]},{"id":"55721b6a.eaca74","type":"function","z":"891702d3.77cb6","name":"","func":"var max = 1;\nvar min = 101;\n\nvar img = (Math.random() * (max - min) + min).toFixed();\n\nmsg.payload = \"/distr/data/noCar/\" + img + \".jpg\";\nmsg.filename = msg.payload;\nreturn msg;\n\n","outputs":1,"noerr":0,"x":606.1389636993408,"y":1110.1666078567505,"wires":[["3c1b79db.2b2936"]]},{"id":"845aa858.9eb708","type":"function","z":"891702d3.77cb6","name":"","func":"var max = 1;\nvar min = 15;\n\nvar img = (Math.random() * (max - min) + min).toFixed();\n\nmsg.payload = \"/distr/data/front/\" + img + \".jpg\";\nmsg.filename = msg.payload;\nreturn msg;\n\n","outputs":1,"noerr":0,"x":606.4166965484619,"y":1141.4167623519897,"wires":[["2be2376.fc9f8c8"]]},{"id":"3c1b79db.2b2936","type":"file in","z":"891702d3.77cb6","name":"noCar","filename":"","format":"","x":742.8056049346924,"y":1113.499981880188,"wires":[["71ff274.6e4f1d8"]]},{"id":"2be2376.fc9f8c8","type":"file in","z":"891702d3.77cb6","name":"front","filename":"","format":"","x":743.083330154419,"y":1147.2501373291016,"wires":[["71ff274.6e4f1d8"]]},{"id":"71ff274.6e4f1d8","type":"base64","z":"891702d3.77cb6","name":"","action":"","property":"payload","x":899.8889751434326,"y":1132.9444570541382,"wires":[["968d8126.c2186"]]},{"id":"968d8126.c2186","type":"function","z":"891702d3.77cb6","name":"","func":"//var ph = \"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAN1wAADdcBQiibeAAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAADtSURBVFiFY+wRkPnPMICAaSAtH3XAqANGHcDAwMDAQk3Dit8/Jkpdr6AsdR0gY2nGwMjMTJZeih1gVpDNYFtfQbZ+itKAgrM9g01tGcPtLTsYVvmGkWUG2SEgoCjP4D1nKsPbm7cZtqfnM/z+9o0yB5CSgFi5uBj8l85lYGBgYNgYnQy3HDlxkewAYoGsjSWDYXoSg7C6KsO6sDiGD/cfkmwpRQ4I27yKgYGBgeFwYwfDg70HKbKcLAes8g1j+P/3L8OT46cotpwsBzw+cpwqFsMA42iLaKAdMOCV0YCHwKgDBtwBo+XAqANGHQAADwk7UsL4LxEAAAAASUVORK5CYII=\";\n\n\nvar sn = {\n            snapshot: msg.payload\n            //snapshot:ph\n        } ; \n        \n        \n        \n        \nmsg.payload = sn;\nreturn msg;","outputs":1,"noerr":0,"x":894.888994216919,"y":1169.1944723129272,"wires":[["d2de8086.c697f","c947b51a.5fe588"]]},{"id":"d2de8086.c697f","type":"http response","z":"891702d3.77cb6","name":"","x":1072.3889770507812,"y":1134.1944570541382,"wires":[]},{"id":"c947b51a.5fe588","type":"debug","z":"891702d3.77cb6","name":"","active":false,"console":"false","complete":"true","x":1084.8889980316162,"y":1174.1943521499634,"wires":[]}]
